{"version":3,"sources":["webpack:///../src/ol/source/CartoDB.js","webpack:///./cartodb.js"],"names":["source_CartoDB","XYZ","CartoDB","options","super","this","attributions","cacheSize","crossOrigin","maxZoom","undefined","minZoom","projection","state","State","LOADING","wrapX","account_","account","mapId_","map","config_","config","templateCache_","initializeMap_","getConfig","updateConfig","Object","obj","setConfig","const","paramHash","JSON","stringify","applyTemplate_","let","mapUrl","client","XMLHttpRequest","addEventListener","handleInitResponse_","bind","handleInitError_","open","setRequestHeader","send","event","status","response","parse","responseText","err","setState","ERROR","READY","data","tilesUrl","cdn_url","https","layergroupid","setUrl","mapConfig","layers","type","cartocss_version","cartocss","sql","cartoDBSource","Map","Tile","source","OSM","target","view","View","center","zoom","document","getElementById","n","setArea","value"],"mappings":"2IAuLAA,EAtJyB,SAAAC,GAQvB,SAAAC,EAAYC,GACVC,OAAKC,MACHC,aAAcH,EAAQG,aACtBC,UAAWJ,EAAQI,UACnBC,YAAaL,EAAQK,YACrBC,aAA6BC,IAApBP,EAAQM,QAAwBN,EAAQM,QAAU,GAC3DE,QAASR,EAAQQ,QACjBC,WAAYT,EAAQS,WACpBC,MAAOC,EAAA,EAAYC,QACnBC,MAAOb,EAAQa,QAOjBX,KAAKY,SAAWd,EAAQe,QAMxBb,KAAKc,OAAShB,EAAQiB,KAAO,GAM7Bf,KAAKgB,QAAUlB,EAAQmB,WAMvBjB,KAAKkB,kBAELlB,KAAKmB,2HAQPC,UAAA,WACE,OAAOpB,KAAKgB,qBASdK,aAAA,SAAaJ,GACXK,OAAAC,EAAA,EAAAD,CAAOtB,KAAKgB,QAASC,GACrBjB,KAAKmB,8BAUPK,UAAA,SAAUP,GACRjB,KAAKgB,QAAUC,MACfjB,KAAKmB,8BAOPA,eAAA,WACEM,IAAMC,EAAYC,KAAKC,UAAU5B,KAAKgB,SACtC,GAAIhB,KAAKkB,eAAeQ,GACtB1B,KAAK6B,eAAe7B,KAAKkB,eAAeQ,QAD1C,CAIAI,IAAIC,EAAS,WAAa/B,KAAKY,SAAW,wBAEtCZ,KAAKc,SACPiB,GAAU,UAAY/B,KAAKc,QAG7BW,IAAMO,EAAS,IAAIC,eACnBD,EAAOE,iBAAiB,OAAQlC,KAAKmC,oBAAoBC,KAAKpC,KAAM0B,IACpEM,EAAOE,iBAAiB,QAASlC,KAAKqC,iBAAiBD,KAAKpC,OAC5DgC,EAAOM,KAAK,OAAQP,GACpBC,EAAOO,iBAAiB,eAAgB,oBACxCP,EAAOQ,KAAKb,KAAKC,UAAU5B,KAAKgB,wBAUlCmB,oBAAA,SAAoBT,EAAWe,GAC7BhB,IAAMO,EAAwCS,EAAY,OAE1D,IAAKT,EAAOU,QAAUV,EAAOU,QAAU,KAAOV,EAAOU,OAAS,IAAK,CACjEZ,IAAIa,EACJ,IACEA,EAA2ChB,KAAKiB,MAAMZ,EAAOa,cAC7D,MAAOC,GAEP,YADA9C,KAAK+C,SAAStC,EAAA,EAAYuC,OAG5BhD,KAAK6B,eAAec,GACpB3C,KAAKkB,eAAeQ,GAAaiB,EACjC3C,KAAK+C,SAAStC,EAAA,EAAYwC,YAE1BjD,KAAK+C,SAAStC,EAAA,EAAYuC,oBAQ9BX,iBAAA,SAAiBI,GACfzC,KAAK+C,SAAStC,EAAA,EAAYuC,oBAQ5BnB,eAAA,SAAeqB,GACbzB,IAAM0B,EAAW,WAAaD,EAAKE,QAAQC,MAAQ,IAAMrD,KAAKY,SAC1D,eAAiBsC,EAAKI,aAAe,mBACzCtD,KAAKuD,OAAOJ,MAjJS,OAAH,UC5BhBK,GACJC,SACEC,KAAQ,UACR5D,SACE6D,iBAAoB,QACpBC,SAAY,iCACZC,IAAO,wDAKPC,EAAgB,IAAInE,GACxBkB,QAAS,gBACTI,OAAQuC,IAGE,IAAIO,EAAA,GACdN,QACE,IAAIO,EAAA,GACFC,OAAQ,IAAIC,EAAA,IAEd,IAAIF,EAAA,GACFC,OAAQH,KAGZK,OAAQ,MACRC,KAAM,IAAIC,EAAA,GACRC,QAAS,EAAG,GACZC,KAAM,MAWVC,SAASC,eAAe,gBAAgBvC,iBAAiB,SAAU,YAPnE,SAAiBwC,GACflB,EAAUC,OAAO,GAAG3D,QAAQ+D,IACxB,mDAAqDa,EACzDZ,EAActC,UAAUgC,GAKxBmB,CAAQ3E,KAAK4E","file":"cartodb.js","sourcesContent":["/**\n * @module ol/source/CartoDB\n */\n\nimport {assign} from '../obj.js';\nimport SourceState from '../source/State.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * http://docs.cartodb.com/cartodb-platform/maps-api/anonymous-maps/\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\n * for more detail.\n * @property {string} account If using named maps, this will be the name of the template to load.\n */\n\n\nclass CartoDB extends XYZ {\n  /**\n   * @classdesc\n   * Layer source for the CartoDB Maps API.\n   *\n   * @param {module:ol/source/CartoDB~Options=} options CartoDB options.\n   * @api\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n      minZoom: options.minZoom,\n      projection: options.projection,\n      state: SourceState.LOADING,\n      wrapX: options.wrapX\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.account_ = options.account;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.mapId_ = options.map || '';\n\n    /**\n     * @type {!Object}\n     * @private\n     */\n    this.config_ = options.config || {};\n\n    /**\n     * @type {!Object.<string, CartoDBLayerInfo>}\n     * @private\n     */\n    this.templateCache_ = {};\n\n    this.initializeMap_();\n  }\n\n  /**\n   * Returns the current config.\n   * @return {!Object} The current configuration.\n   * @api\n   */\n  getConfig() {\n    return this.config_;\n  }\n\n  /**\n   * Updates the carto db config.\n   * @param {Object} config a key-value lookup. Values will replace current values\n   *     in the config.\n   * @api\n   */\n  updateConfig(config) {\n    assign(this.config_, config);\n    this.initializeMap_();\n  }\n\n  /**\n   * Sets the CartoDB config\n   * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n   *     object.\n   * If using named maps, a key-value lookup with the template parameters.\n   * @api\n   */\n  setConfig(config) {\n    this.config_ = config || {};\n    this.initializeMap_();\n  }\n\n  /**\n   * Issue a request to initialize the CartoDB map.\n   * @private\n   */\n  initializeMap_() {\n    const paramHash = JSON.stringify(this.config_);\n    if (this.templateCache_[paramHash]) {\n      this.applyTemplate_(this.templateCache_[paramHash]);\n      return;\n    }\n    let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n\n    if (this.mapId_) {\n      mapUrl += '/named/' + this.mapId_;\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));\n    client.addEventListener('error', this.handleInitError_.bind(this));\n    client.open('POST', mapUrl);\n    client.setRequestHeader('Content-type', 'application/json');\n    client.send(JSON.stringify(this.config_));\n  }\n\n  /**\n   * Handle map initialization response.\n   * @param {string} paramHash a hash representing the parameter set that was used\n   *     for the request\n   * @param {Event} event Event.\n   * @private\n   */\n  handleInitResponse_(paramHash, event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {CartoDBLayerInfo} */(JSON.parse(client.responseText));\n      } catch (err) {\n        this.setState(SourceState.ERROR);\n        return;\n      }\n      this.applyTemplate_(response);\n      this.templateCache_[paramHash] = response;\n      this.setState(SourceState.READY);\n    } else {\n      this.setState(SourceState.ERROR);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event Event.\n   */\n  handleInitError_(event) {\n    this.setState(SourceState.ERROR);\n  }\n\n  /**\n   * Apply the new tile urls returned by carto db\n   * @param {CartoDBLayerInfo} data Result of carto db call.\n   * @private\n   */\n  applyTemplate_(data) {\n    const tilesUrl = 'https://' + data.cdn_url.https + '/' + this.account_ +\n        '/api/v1/map/' + data.layergroupid + '/{z}/{x}/{y}.png';\n    this.setUrl(tilesUrl);\n  }\n}\n\n\nexport default CartoDB;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {CartoDB, OSM} from '../src/ol/source.js';\n\nconst mapConfig = {\n  'layers': [{\n    'type': 'cartodb',\n    'options': {\n      'cartocss_version': '2.1.1',\n      'cartocss': '#layer { polygon-fill: #F00; }',\n      'sql': 'select * from european_countries_e where area > 0'\n    }\n  }]\n};\n\nconst cartoDBSource = new CartoDB({\n  account: 'documentation',\n  config: mapConfig\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    new TileLayer({\n      source: cartoDBSource\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nfunction setArea(n) {\n  mapConfig.layers[0].options.sql =\n      'select * from european_countries_e where area > ' + n;\n  cartoDBSource.setConfig(mapConfig);\n}\n\n\ndocument.getElementById('country-area').addEventListener('change', function() {\n  setArea(this.value);\n});\n"],"sourceRoot":""}