{"version":3,"sources":["webpack:///./vector-esri-edit.js"],"names":["serviceUrl","esrijsonFormat","_src_ol_format_EsriJSON_js__WEBPACK_IMPORTED_MODULE_2__","vectorSource","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_11__","loader","extent","resolution","projection","const","url","encodeURIComponent","$","ajax","dataType","success","response","error","alert","message","details","join","features","readFeatures","featureProjection","length","addFeatures","strategy","Object","_src_ol_loadingstrategy_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_tilegrid_js__WEBPACK_IMPORTED_MODULE_13__","tileSize","vector","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_7__","source","raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_source_XYZ_js__WEBPACK_IMPORTED_MODULE_12__","attributions","draw","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_3__","type","select","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_4__","setActive","selected","getFeatures","modify","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_5__","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","interactions","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_6__","extend","layers","target","document","getElementById","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_10__","zoom","typeSelect","onchange","value","dirty","on","evt","element","getId","feature","fid","payload","writeFeature","getView","getProjection","post","f","done","data","result","JSON","parse","updateResults","description","code","addResults","setId","clear"],"mappings":"sNAYMA,EAAa,4GAIbC,EAAiB,IAAIC,EAAA,EAErBC,EAAe,IAAIC,EAAA,GACvBC,OAAQ,SAASC,EAAQC,EAAYC,GACnCC,IAAMC,EAAMV,EANF,oFAQNW,mBAAmB,WAAaL,EAAO,GAAK,WACxCA,EAAO,GAAK,WAAaA,EAAO,GAAK,WAAaA,EAAO,GACzD,wCACJ,0EAEJM,EAAEC,MAAMH,IAAKA,EAAKI,SAAU,QAASC,QAAS,SAASC,GACrD,GAAIA,EAASC,MACXC,MAAMF,EAASC,MAAME,QAAU,KAC3BH,EAASC,MAAMG,QAAQC,KAAK,WAC3B,CAELZ,IAAMa,EAAWrB,EAAesB,aAAaP,GAC3CQ,kBAAmBhB,IAEjBc,EAASG,OAAS,GACpBtB,EAAauB,YAAYJ,QAKjCK,SAAUC,OAAAC,EAAA,EAAAD,CAAaA,OAAAE,EAAA,EAAAF,EACrBG,SAAU,SAIRC,EAAS,IAAIC,EAAA,GACjBC,OAAQ/B,IAGJgC,EAAS,IAAIC,EAAA,GACjBF,OAAQ,IAAIG,EAAA,GACVC,aAAc,+GAEd5B,IAAK,qGAKH6B,EAAO,IAAIC,EAAA,GACfN,OAAQ/B,EACRsC,KAAM,YAGFC,EAAS,IAAIC,EAAA,EACnBD,EAAOE,WAAU,GACjBnC,IAAMoC,EAAWH,EAAOI,cAElBC,EAAS,IAAIC,EAAA,GACjB1B,SAAUuB,IAEZE,EAAOH,WAAU,GAEjBnC,IAAMwC,EAAM,IAAIC,EAAA,GACdC,aAAcvB,OAAAwB,EAAA,EAAAxB,GAAsByB,QAAQd,EAAMG,EAAQK,IAC1DO,QAASnB,EAAQH,GACjBuB,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAIC,EAAA,GACRC,OAAQhC,OAAAiC,EAAA,EAAAjC,GAAa,QAAS,SAC9BkC,KAAM,OAIJC,EAAaP,SAASC,eAAe,QAM3CM,EAAWC,SAAW,WACpBzB,EAAKK,UAA+B,SAArBmB,EAAWE,OAC1BvB,EAAOE,UAA+B,WAArBmB,EAAWE,OAC5BlB,EAAOH,UAA+B,WAArBmB,EAAWE,QAG9BxD,IAAMyD,KAENrB,EAASsB,GAAG,MAAO,SAASC,GACVA,EAAIC,QACZF,GAAG,SAAU,SAASC,GAC5BF,EAAME,EAAIb,OAAOe,UAAW,MAIhCzB,EAASsB,GAAG,SAAU,SAASC,GAC7B3D,IAAM8D,EAAUH,EAAIC,QACdG,EAAMD,EAAQD,QACpB,IAAmB,IAAfJ,EAAMM,GAAe,CACvB/D,IAAMgE,EAAU,IAAMxE,EAAeyE,aAAaH,GAChD/C,kBAAmByB,EAAI0B,UAAUC,kBAC9B,IAELhE,EAAEiE,KADU7E,6HACC8E,EAAG,OAAQxD,SAAUmD,IAAUM,KAAK,SAASC,GACxDvE,IAAMwE,EAASC,KAAKC,MAAMH,GAC1B,GAAIC,EAAOG,eAAiBH,EAAOG,cAAc3D,OAAS,EACxD,IAAwC,IAApCwD,EAAOG,cAAc,GAAGrE,QAAkB,CAC5CN,IAAMQ,EAAQgE,EAAOG,cAAc,GAAGnE,MACtCC,MAAMD,EAAMoE,YAAc,KAAOpE,EAAMqE,KAAO,iBAEvCpB,EAAMM,QAOvBjC,EAAK4B,GAAG,UAAW,SAASC,GAC1B3D,IAAM8D,EAAUH,EAAIG,QACdE,EAAU,IAAMxE,EAAeyE,aAAaH,GAChD/C,kBAAmByB,EAAI0B,UAAUC,kBAC9B,IAELhE,EAAEiE,KADU7E,0HACC8E,EAAG,OAAQxD,SAAUmD,IAAUM,KAAK,SAASC,GACxDvE,IAAMwE,EAASC,KAAKC,MAAMH,GAC1B,GAAIC,EAAOM,YAAcN,EAAOM,WAAW9D,OAAS,EAClD,IAAqC,IAAjCwD,EAAOM,WAAW,GAAGxE,QACvBwD,EAAQiB,MAAMP,EAAOM,WAAW,GAAa,UAC7CpF,EAAasF,YACR,CACLhF,IAAMQ,EAAQgE,EAAOM,WAAW,GAAGtE,MACnCC,MAAMD,EAAMoE,YAAc,KAAOpE,EAAMqE,KAAO","file":"vector-esri-edit.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport EsriJSON from '../src/ol/format/EsriJSON.js';\nimport {defaults as defaultInteractions, Draw, Modify, Select} from '../src/ol/interaction.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {tile as tileStrategy} from '../src/ol/loadingstrategy.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {createXYZ} from '../src/ol/tilegrid.js';\n\n\nconst serviceUrl = 'https://services.arcgis.com/rOo16HdIMeOBI4Mb/arcgis/rest/' +\n    'services/PDX_Pedestrian_Districts/FeatureServer/';\nconst layer = '0';\n\nconst esrijsonFormat = new EsriJSON();\n\nconst vectorSource = new VectorSource({\n  loader: function(extent, resolution, projection) {\n    const url = serviceUrl + layer + '/query/?f=json&' +\n        'returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=' +\n        encodeURIComponent('{\"xmin\":' + extent[0] + ',\"ymin\":' +\n            extent[1] + ',\"xmax\":' + extent[2] + ',\"ymax\":' + extent[3] +\n            ',\"spatialReference\":{\"wkid\":102100}}') +\n        '&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*' +\n        '&outSR=102100';\n    $.ajax({url: url, dataType: 'jsonp', success: function(response) {\n      if (response.error) {\n        alert(response.error.message + '\\n' +\n            response.error.details.join('\\n'));\n      } else {\n        // dataProjection will be read from document\n        const features = esrijsonFormat.readFeatures(response, {\n          featureProjection: projection\n        });\n        if (features.length > 0) {\n          vectorSource.addFeatures(features);\n        }\n      }\n    }});\n  },\n  strategy: tileStrategy(createXYZ({\n    tileSize: 512\n  }))\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource\n});\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions: 'Tiles Â© <a href=\"https://services.arcgisonline.com/ArcGIS/' +\n        'rest/services/World_Topo_Map/MapServer\">ArcGIS</a>',\n    url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +\n        'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'\n  })\n});\n\nconst draw = new Draw({\n  source: vectorSource,\n  type: 'Polygon'\n});\n\nconst select = new Select();\nselect.setActive(false);\nconst selected = select.getFeatures();\n\nconst modify = new Modify({\n  features: selected\n});\nmodify.setActive(false);\n\nconst map = new Map({\n  interactions: defaultInteractions().extend([draw, select, modify]),\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: fromLonLat([-122.619, 45.512]),\n    zoom: 12\n  })\n});\n\nconst typeSelect = document.getElementById('type');\n\n\n/**\n * Let user change the interaction type.\n */\ntypeSelect.onchange = function() {\n  draw.setActive(typeSelect.value === 'DRAW');\n  select.setActive(typeSelect.value === 'MODIFY');\n  modify.setActive(typeSelect.value === 'MODIFY');\n};\n\nconst dirty = {};\n\nselected.on('add', function(evt) {\n  const feature = evt.element;\n  feature.on('change', function(evt) {\n    dirty[evt.target.getId()] = true;\n  });\n});\n\nselected.on('remove', function(evt) {\n  const feature = evt.element;\n  const fid = feature.getId();\n  if (dirty[fid] === true) {\n    const payload = '[' + esrijsonFormat.writeFeature(feature, {\n      featureProjection: map.getView().getProjection()\n    }) + ']';\n    const url = serviceUrl + layer + '/updateFeatures';\n    $.post(url, {f: 'json', features: payload}).done(function(data) {\n      const result = JSON.parse(data);\n      if (result.updateResults && result.updateResults.length > 0) {\n        if (result.updateResults[0].success !== true) {\n          const error = result.updateResults[0].error;\n          alert(error.description + ' (' + error.code + ')');\n        } else {\n          delete dirty[fid];\n        }\n      }\n    });\n  }\n});\n\ndraw.on('drawend', function(evt) {\n  const feature = evt.feature;\n  const payload = '[' + esrijsonFormat.writeFeature(feature, {\n    featureProjection: map.getView().getProjection()\n  }) + ']';\n  const url = serviceUrl + layer + '/addFeatures';\n  $.post(url, {f: 'json', features: payload}).done(function(data) {\n    const result = JSON.parse(data);\n    if (result.addResults && result.addResults.length > 0) {\n      if (result.addResults[0].success === true) {\n        feature.setId(result.addResults[0]['objectId']);\n        vectorSource.clear();\n      } else {\n        const error = result.addResults[0].error;\n        alert(error.description + ' (' + error.code + ')');\n      }\n    }\n  });\n});\n"],"sourceRoot":""}