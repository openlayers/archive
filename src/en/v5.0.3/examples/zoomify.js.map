{"version":3,"sources":["webpack:///../src/ol/source/Zoomify.js","webpack:///./zoomify.js"],"names":["TierSizeCalculation","CustomTile","tileGrid","tileCoord","state","src","crossOrigin","tileLoadFunction","opt_options","ImageTile","call","this","zoomifyImage_","tileSize_","Object","ol_size","getTileSize","util","prototype","getImage","const","image","TileState","LOADED","tileSize","width","height","context","dom","drawImage","canvas","Zoomify","options","size","tierSizeCalculation","undefined","imageWidth","imageHeight","extent","tierSizeInTiles","common","tileSizeForTierSizeCalculation","push","Math","ceil","let","asserts","reverse","resolutions","tileCountUpToTier","i","ii","length","TileGrid","origin","ol_extent","url","indexOf","urls","tileurlfunction","tileUrlFunction","map","template","pixelRatio","projection","tileCoordZ","tileCoordX","tileCoordY","tileIndex","localContext","z","x","y","TileGroup","replace","m","p","ZoomifyTileClass","bind","TileImage","attributions","cacheSize","reprojectionErrorThreshold","tileClass","transition","source_Zoomify","zoomifyUrl","zoomify_layer","Tile","source","zoomify_extent","Map","layers","target","view","View","getSource","getTileGrid","getResolutions","getView","fit","document","getElementById","addEventListener","event","value","currentTarget","setSource"],"mappings":"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","file":"zoomify.js","sourcesContent":["/**\n * @module ol/source/Zoomify\n */\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport {inherits} from '../util.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport {expandUrl, createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {assert} from '../asserts.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getTopLeft} from '../extent.js';\nimport {toSize} from '../size.js';\nimport TileImage from '../source/TileImage.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\n\n\n/**\n * @enum {string}\n */\nconst TierSizeCalculation = {\n  DEFAULT: 'default',\n  TRUNCATED: 'truncated'\n};\n\n\n/**\n * @constructor\n * @extends {module:ol/ImageTile}\n * @param {module:ol/tilegrid/TileGrid} tileGrid TileGrid that the tile belongs to.\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/TileState} state State.\n * @param {string} src Image source URI.\n * @param {?string} crossOrigin Cross origin.\n * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.\n * @param {module:ol/Tile~Options=} opt_options Tile options.\n */\nexport const CustomTile = function(\n  tileGrid, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n\n  ImageTile.call(this, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options);\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n   */\n  this.zoomifyImage_ = null;\n\n  /**\n   * @private\n   * @type {module:ol/size~Size}\n   */\n  this.tileSize_ = toSize(tileGrid.getTileSize(tileCoord[0]));\n};\ninherits(CustomTile, ImageTile);\n\n\n/**\n * @inheritDoc\n */\nCustomTile.prototype.getImage = function() {\n  if (this.zoomifyImage_) {\n    return this.zoomifyImage_;\n  }\n  const image = ImageTile.prototype.getImage.call(this);\n  if (this.state == TileState.LOADED) {\n    const tileSize = this.tileSize_;\n    if (image.width == tileSize[0] && image.height == tileSize[1]) {\n      this.zoomifyImage_ = image;\n      return image;\n    } else {\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n      context.drawImage(image, 0, 0);\n      this.zoomifyImage_ = context.canvas;\n      return context.canvas;\n    }\n  } else {\n    return image;\n  }\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.\n * @property {module:ol/proj~ProjectionLike} [projection] Projection.\n * @property {boolean} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} [url] URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {module:ol/size~Size} [size] Size of the image.\n * @property {module:ol/extent~Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n */\n\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n *\n * @constructor\n * @extends {module:ol/source/TileImage}\n * @param {module:ol/source/Zoomify~Options=} opt_options Options.\n * @api\n */\nconst Zoomify = function(opt_options) {\n\n  const options = opt_options || {};\n\n  const size = options.size;\n  const tierSizeCalculation = options.tierSizeCalculation !== undefined ?\n    options.tierSizeCalculation :\n    TierSizeCalculation.DEFAULT;\n\n  const imageWidth = size[0];\n  const imageHeight = size[1];\n  const extent = options.extent || [0, -size[1], size[0], 0];\n  const tierSizeInTiles = [];\n  const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n  let tileSizeForTierSizeCalculation = tileSize;\n\n  switch (tierSizeCalculation) {\n    case TierSizeCalculation.DEFAULT:\n      while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n        tierSizeInTiles.push([\n          Math.ceil(imageWidth / tileSizeForTierSizeCalculation),\n          Math.ceil(imageHeight / tileSizeForTierSizeCalculation)\n        ]);\n        tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n      }\n      break;\n    case TierSizeCalculation.TRUNCATED:\n      let width = imageWidth;\n      let height = imageHeight;\n      while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n        tierSizeInTiles.push([\n          Math.ceil(width / tileSizeForTierSizeCalculation),\n          Math.ceil(height / tileSizeForTierSizeCalculation)\n        ]);\n        width >>= 1;\n        height >>= 1;\n      }\n      break;\n    default:\n      assert(false, 53); // Unknown `tierSizeCalculation` configured\n      break;\n  }\n\n  tierSizeInTiles.push([1, 1]);\n  tierSizeInTiles.reverse();\n\n  const resolutions = [1];\n  const tileCountUpToTier = [0];\n  for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n    resolutions.push(1 << i);\n    tileCountUpToTier.push(\n      tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +\n        tileCountUpToTier[i - 1]\n    );\n  }\n  resolutions.reverse();\n\n  const tileGrid = new TileGrid({\n    tileSize: tileSize,\n    extent: extent,\n    origin: getTopLeft(extent),\n    resolutions: resolutions\n  });\n\n  let url = options.url;\n  if (url && url.indexOf('{TileGroup}') == -1 && url.indexOf('{tileIndex}') == -1) {\n    url += '{TileGroup}/{z}-{x}-{y}.jpg';\n  }\n  const urls = expandUrl(url);\n\n  /**\n   * @param {string} template Template.\n   * @return {module:ol/Tile~UrlFunction} Tile URL function.\n   */\n  function createFromTemplate(template) {\n\n    return (\n      /**\n       * @param {module:ol/tilecoord~TileCoord} tileCoord Tile Coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {module:ol/proj/Projection} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function(tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        } else {\n          const tileCoordZ = tileCoord[0];\n          const tileCoordX = tileCoord[1];\n          const tileCoordY = -tileCoord[2] - 1;\n          const tileIndex =\n              tileCoordX +\n              tileCoordY * tierSizeInTiles[tileCoordZ][0];\n          const tileSize = tileGrid.getTileSize(tileCoordZ);\n          const tileGroup = ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileSize) | 0;\n          const localContext = {\n            'z': tileCoordZ,\n            'x': tileCoordX,\n            'y': tileCoordY,\n            'tileIndex': tileIndex,\n            'TileGroup': 'TileGroup' + tileGroup\n          };\n          return template.replace(/\\{(\\w+?)\\}/g, function(m, p) {\n            return localContext[p];\n          });\n        }\n      }\n    );\n  }\n\n  const tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n\n  const ZoomifyTileClass = CustomTile.bind(null, tileGrid);\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    projection: options.projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileClass: ZoomifyTileClass,\n    tileGrid: tileGrid,\n    tileUrlFunction: tileUrlFunction,\n    transition: options.transition\n  });\n\n};\n\ninherits(Zoomify, TileImage);\n\n\nexport default Zoomify;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport Zoomify from '../src/ol/source/Zoomify.js';\n\nconst imgWidth = 9911;\nconst imgHeight = 6100;\n\nconst zoomifyUrl = 'http://vips.vtech.fr/cgi-bin/iipsrv.fcgi?zoomify=' +\n    '/mnt/MD1/AD00/plan_CHU-4HD-01/FOND.TIF/';\nconst iipUrl = 'http://vips.vtech.fr/cgi-bin/iipsrv.fcgi?FIF=' + '/mnt/MD1/AD00/plan_CHU-4HD-01/FOND.TIF' +  '&JTL={z},{tileIndex}';\n\nconst layer = new TileLayer({\n  source: new Zoomify({\n    url: zoomifyUrl,\n    size: [imgWidth, imgHeight],\n    crossOrigin: 'anonymous'\n  })\n});\n\nconst extent = [0, -imgHeight, imgWidth, 0];\n\nconst map = new Map({\n  layers: [layer],\n  target: 'map',\n  view: new View({\n    // adjust zoom levels to those provided by the source\n    resolutions: layer.getSource().getTileGrid().getResolutions(),\n    // constrain the center: center cannot be set outside this extent\n    extent: extent\n  })\n});\nmap.getView().fit(extent);\n\nconst control = document.getElementById('zoomifyProtocol');\ncontrol.addEventListener('change', function(event) {\n  const value = event.currentTarget.value;\n  if (value === 'iip') {\n    layer.setSource(new Zoomify({\n      url: iipUrl,\n      size: [imgWidth, imgHeight],\n      crossOrigin: 'anonymous'\n    }));\n  } else if (value === 'zoomify') {\n    layer.setSource(new Zoomify({\n      url: zoomifyUrl,\n      size: [imgWidth, imgHeight],\n      crossOrigin: 'anonymous'\n    }));\n  }\n\n});\n"],"sourceRoot":""}