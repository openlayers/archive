{"version":3,"sources":["webpack:///./region-growing.js"],"names":["next4Edges","edge","const","x","y","coordinate","imagery","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_2__","source","_src_ol_source_BingMaps_js__WEBPACK_IMPORTED_MODULE_5__","key","imagerySet","raster","_src_ol_source_Raster_js__WEBPACK_IMPORTED_MODULE_6__","sources","getSource","operationType","operation","inputs","data","image","seed","pixel","delta","parseInt","map","Math","round","width","height","inputData","outputData","Uint8ClampedArray","seedIdx","seedR","seedG","seedB","length","newedge","i","ii","next","j","jj","s","t","ci","cr","cg","cb","abs","push","lib","rasterImage","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","opacity","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","Object","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_4__","zoom","on","event","changed","thresholdControl","document","getElementById","updateControlValue","innerText","value","getPixelFromCoordinate","addEventListener"],"mappings":"2JA+DA,SAASA,EAAWC,GAClBC,IAAMC,EAAIF,EAAK,GACTG,EAAIH,EAAK,GACf,QACGE,EAAI,EAAGC,IACPD,EAAI,EAAGC,IACPD,EAAGC,EAAI,IACPD,EAAGC,EAAI,IAIZF,IA+BIG,EA7BEC,EAAU,IAAIC,EAAA,GAClBC,OAAQ,IAAIC,EAAA,GAAUC,IAHZ,mEAGsBC,WAAY,aAGxCC,EAAS,IAAIC,EAAA,GACjBC,SAAUR,EAAQS,aAClBC,cAAe,QACfC,UA5EF,SAAoBC,EAAQC,GAC1BjB,IAAMkB,EAAQF,EAAO,GACjBG,EAAOF,EAAKG,MACVC,EAAQC,SAASL,EAAKI,OAC5B,IAAKF,EACH,OAAOD,EAGTC,EAAOA,EAAKI,IAAIC,KAAKC,OAUrB,IATAzB,IAAM0B,EAAQR,EAAMQ,MACdC,EAAST,EAAMS,OACfC,EAAYV,EAAMD,KAClBY,EAAa,IAAIC,kBAAkBF,GACnCG,EAAwC,GAA7BZ,EAAK,GAAKO,EAAQP,EAAK,IAClCa,EAAQJ,EAAUG,GAClBE,EAAQL,EAAUG,EAAU,GAC5BG,EAAQN,EAAUG,EAAU,GAC9BhC,GAAQoB,GACLpB,EAAKoC,QAAQ,CAElB,IADAnC,IAAMoC,KACGC,EAAI,EAAGC,EAAKvC,EAAKoC,OAAQE,EAAIC,EAAID,IAKxC,IADArC,IAAMuC,EAAOzC,EAAWC,EAAKsC,IACpBG,EAAI,EAAGC,EAAKF,EAAKJ,OAAQK,EAAIC,EAAID,IAAK,CAC7CxC,IAAM0C,EAAIH,EAAKC,GAAG,GACZG,EAAIJ,EAAKC,GAAG,GAClB,GAAIE,GAAK,GAAKA,EAAIhB,GAASiB,GAAK,GAAKA,EAAIhB,EAAQ,CAC/C3B,IAAM4C,EAAuB,GAAjBD,EAAIjB,EAAQgB,GAClBG,EAAKjB,EAAUgB,GACfE,EAAKlB,EAAUgB,EAAK,GACpBG,EAAKnB,EAAUgB,EAAK,GAG1B,GAAW,IAFAhB,EAAUgB,EAAK,GAGxB,SAEEpB,KAAKwB,IAAIhB,EAAQa,GAAMxB,GAASG,KAAKwB,IAAIf,EAAQa,GAAMzB,GACvDG,KAAKwB,IAAId,EAAQa,GAAM1B,IACzBQ,EAAWe,GAAM,IACjBf,EAAWe,EAAK,GAAK,EACrBf,EAAWe,EAAK,GAAK,EACrBf,EAAWe,EAAK,GAAK,IACrBR,EAAQa,MAAMP,EAAGC,KAGnBf,EAAUgB,EAAK,GAAK,GAI1B7C,EAAOqC,EAET,OAAQnB,KAAMY,EAAYH,MAAOA,EAAOC,OAAQA,IA0BhDuB,KACEpD,WAAYA,KAIVqD,EAAc,IAAIC,EAAA,GACtBC,QAAS,GACT/C,OAAQI,IAGJa,EAAM,IAAI+B,EAAA,GACdC,QAASnD,EAAS+C,GAClBK,OAAQ,MACRC,KAAM,IAAIC,EAAA,GACRC,OAAQC,OAAAC,EAAA,EAAAD,GAAa,OAAQ,QAC7BE,KAAM,OAMVvC,EAAIwC,GAAG,QAAS,SAASC,GACvB7D,EAAa6D,EAAM7D,WACnBO,EAAOuD,YAGTjE,IAAMkE,EAAmBC,SAASC,eAAe,aAWjD,SAASC,IACPF,SAASC,eAAe,mBAAmBE,UAAYJ,EAAiBK,MAV1E7D,EAAOqD,GAAG,mBAAoB,SAASC,GAErChE,IAAMiB,EAAO+C,EAAM/C,KACnBA,EAAKI,MAAQ6C,EAAiBK,MAC1BpE,IACFc,EAAKG,MAAQG,EAAIiD,uBAAuBrE,MAO5CkE,IAEAH,EAAiBO,iBAAiB,QAAS,WACzCJ,IACA3D,EAAOuD","file":"region-growing.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport RasterSource from '../src/ol/source/Raster.js';\n\nfunction growRegion(inputs, data) {\n  const image = inputs[0];\n  let seed = data.pixel;\n  const delta = parseInt(data.delta);\n  if (!seed) {\n    return image;\n  }\n\n  seed = seed.map(Math.round);\n  const width = image.width;\n  const height = image.height;\n  const inputData = image.data;\n  const outputData = new Uint8ClampedArray(inputData);\n  const seedIdx = (seed[1] * width + seed[0]) * 4;\n  const seedR = inputData[seedIdx];\n  const seedG = inputData[seedIdx + 1];\n  const seedB = inputData[seedIdx + 2];\n  let edge = [seed];\n  while (edge.length) {\n    const newedge = [];\n    for (let i = 0, ii = edge.length; i < ii; i++) {\n      // As noted in the Raster source constructor, this function is provided\n      // using the `lib` option. Other functions will NOT be visible unless\n      // provided using the `lib` option.\n      const next = next4Edges(edge[i]);\n      for (let j = 0, jj = next.length; j < jj; j++) {\n        const s = next[j][0];\n        const t = next[j][1];\n        if (s >= 0 && s < width && t >= 0 && t < height) {\n          const ci = (t * width + s) * 4;\n          const cr = inputData[ci];\n          const cg = inputData[ci + 1];\n          const cb = inputData[ci + 2];\n          const ca = inputData[ci + 3];\n          // if alpha is zero, carry on\n          if (ca === 0) {\n            continue;\n          }\n          if (Math.abs(seedR - cr) < delta && Math.abs(seedG - cg) < delta &&\n              Math.abs(seedB - cb) < delta) {\n            outputData[ci] = 255;\n            outputData[ci + 1] = 0;\n            outputData[ci + 2] = 0;\n            outputData[ci + 3] = 255;\n            newedge.push([s, t]);\n          }\n          // mark as visited\n          inputData[ci + 3] = 0;\n        }\n      }\n    }\n    edge = newedge;\n  }\n  return {data: outputData, width: width, height: height};\n}\n\nfunction next4Edges(edge) {\n  const x = edge[0];\n  const y = edge[1];\n  return [\n    [x + 1, y],\n    [x - 1, y],\n    [x, y + 1],\n    [x, y - 1]\n  ];\n}\n\nconst key = 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5';\n\nconst imagery = new TileLayer({\n  source: new BingMaps({key: key, imagerySet: 'Aerial'})\n});\n\nconst raster = new RasterSource({\n  sources: [imagery.getSource()],\n  operationType: 'image',\n  operation: growRegion,\n  // Functions in the `lib` object will be available to the operation run in\n  // the web worker.\n  lib: {\n    next4Edges: next4Edges\n  }\n});\n\nconst rasterImage = new ImageLayer({\n  opacity: 0.7,\n  source: raster\n});\n\nconst map = new Map({\n  layers: [imagery, rasterImage],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-119.07, 47.65]),\n    zoom: 11\n  })\n});\n\nlet coordinate;\n\nmap.on('click', function(event) {\n  coordinate = event.coordinate;\n  raster.changed();\n});\n\nconst thresholdControl = document.getElementById('threshold');\n\nraster.on('beforeoperations', function(event) {\n  // the event.data object will be passed to operations\n  const data = event.data;\n  data.delta = thresholdControl.value;\n  if (coordinate) {\n    data.pixel = map.getPixelFromCoordinate(coordinate);\n  }\n});\n\nfunction updateControlValue() {\n  document.getElementById('threshold-value').innerText = thresholdControl.value;\n}\nupdateControlValue();\n\nthresholdControl.addEventListener('input', function() {\n  updateControlValue();\n  raster.changed();\n});\n"],"sourceRoot":""}