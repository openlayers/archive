{"version":3,"sources":["webpack:///../src/ol/source/CartoDB.js","webpack:///./cartodb.js"],"names":["CartoDB","options","this","account_","account","mapId_","map","config_","config","templateCache_","XYZ","call","attributions","cacheSize","crossOrigin","maxZoom","undefined","minZoom","projection","state","State","LOADING","wrapX","initializeMap_","Object","util","prototype","getConfig","updateConfig","obj","setConfig","const","paramHash","JSON","stringify","applyTemplate_","let","mapUrl","client","XMLHttpRequest","addEventListener","handleInitResponse_","bind","handleInitError_","open","setRequestHeader","send","event","status","response","parse","responseText","err","setState","ERROR","READY","data","tilesUrl","cdn_url","https","layergroupid","setUrl","source_CartoDB","mapConfig","layers","type","cartocss_version","cartocss","sql","cartoDBSource","Map","Tile","source","OSM","target","view","View","center","zoom","document","getElementById","n","setArea","value"],"mappings":"2JA0CMA,EAAU,SAASC,GAMvBC,KAAKC,SAAWF,EAAQG,QAMxBF,KAAKG,OAASJ,EAAQK,KAAO,GAM7BJ,KAAKK,QAAUN,EAAQO,WAMvBN,KAAKO,kBAELC,EAAA,EAAIC,KAAKT,MACPU,aAAcX,EAAQW,aACtBC,UAAWZ,EAAQY,UACnBC,YAAab,EAAQa,YACrBC,aAA6BC,IAApBf,EAAQc,QAAwBd,EAAQc,QAAU,GAC3DE,QAAShB,EAAQgB,QACjBC,WAAYjB,EAAQiB,WACpBC,MAAOC,EAAA,EAAYC,QACnBC,MAAOrB,EAAQqB,QAEjBpB,KAAKqB,kBAGPC,OAAAC,EAAA,EAAAD,CAASxB,EAASU,EAAA,GAQlBV,EAAQ0B,UAAUC,UAAY,WAC5B,OAAOzB,KAAKK,SAUdP,EAAQ0B,UAAUE,aAAe,SAASpB,GACxCgB,OAAAK,EAAA,EAAAL,CAAOtB,KAAKK,QAASC,GACrBN,KAAKqB,kBAWPvB,EAAQ0B,UAAUI,UAAY,SAAStB,GACrCN,KAAKK,QAAUC,MACfN,KAAKqB,kBAQPvB,EAAQ0B,UAAUH,eAAiB,WACjCQ,IAAMC,EAAYC,KAAKC,UAAUhC,KAAKK,SACtC,GAAIL,KAAKO,eAAeuB,GACtB9B,KAAKiC,eAAejC,KAAKO,eAAeuB,QAD1C,CAIAI,IAAIC,EAAS,WAAanC,KAAKC,SAAW,wBAEtCD,KAAKG,SACPgC,GAAU,UAAYnC,KAAKG,QAG7B0B,IAAMO,EAAS,IAAIC,eACnBD,EAAOE,iBAAiB,OAAQtC,KAAKuC,oBAAoBC,KAAKxC,KAAM8B,IACpEM,EAAOE,iBAAiB,QAAStC,KAAKyC,iBAAiBD,KAAKxC,OAC5DoC,EAAOM,KAAK,OAAQP,GACpBC,EAAOO,iBAAiB,eAAgB,oBACxCP,EAAOQ,KAAKb,KAAKC,UAAUhC,KAAKK,YAWlCP,EAAQ0B,UAAUe,oBAAsB,SAAST,EAAWe,GAC1DhB,IAAMO,EAAwCS,EAAY,OAE1D,IAAKT,EAAOU,QAAUV,EAAOU,QAAU,KAAOV,EAAOU,OAAS,IAAK,CACjEZ,IAAIa,EACJ,IACEA,EAA2ChB,KAAKiB,MAAMZ,EAAOa,cAC7D,MAAOC,GAEP,YADAlD,KAAKmD,SAASjC,EAAA,EAAYkC,OAG5BpD,KAAKiC,eAAec,GACpB/C,KAAKO,eAAeuB,GAAaiB,EACjC/C,KAAKmD,SAASjC,EAAA,EAAYmC,YAE1BrD,KAAKmD,SAASjC,EAAA,EAAYkC,QAS9BtD,EAAQ0B,UAAUiB,iBAAmB,SAASI,GAC5C7C,KAAKmD,SAASjC,EAAA,EAAYkC,QAS5BtD,EAAQ0B,UAAUS,eAAiB,SAASqB,GAC1CzB,IAAM0B,EAAW,WAAaD,EAAKE,QAAQC,MAAQ,IAAMzD,KAAKC,SAC1D,eAAiBqD,EAAKI,aAAe,mBACzC1D,KAAK2D,OAAOJ,IAEd,IAAAK,EAAA,SCzLMC,GACJC,SACEC,KAAQ,UACRhE,SACEiE,iBAAoB,QACpBC,SAAY,iCACZC,IAAO,wDAKPC,EAAgB,IAAIP,GACxB1D,QAAS,gBACTI,OAAQuD,IAGE,IAAIO,EAAA,GACdN,QACE,IAAIO,EAAA,GACFC,OAAQ,IAAIC,EAAA,IAEd,IAAIF,EAAA,GACFC,OAAQH,KAGZK,OAAQ,MACRC,KAAM,IAAIC,EAAA,GACRC,QAAS,EAAG,GACZC,KAAM,MAWVC,SAASC,eAAe,gBAAgBxC,iBAAiB,SAAU,YAPnE,SAAiByC,GACflB,EAAUC,OAAO,GAAG/D,QAAQmE,IACxB,mDAAqDa,EACzDZ,EAAcvC,UAAUiC,GAKxBmB,CAAQhF,KAAKiF","file":"cartodb.js","sourcesContent":["/**\n * @module ol/source/CartoDB\n */\nimport {inherits} from '../util.js';\nimport {assign} from '../obj.js';\nimport SourceState from '../source/State.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.\n * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * {@link http://docs.cartodb.com/cartodb-platform/maps-api/anonymous-maps/}\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See {@link http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/}\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See {@link http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/}\n * for more detail.\n * @property {string} account If using named maps, this will be the name of the template to load.\n */\n\n\n/**\n * @classdesc\n * Layer source for the CartoDB Maps API.\n *\n * @constructor\n * @extends {module:ol/source/XYZ}\n * @param {module:ol/source/CartoDB~Options=} options CartoDB options.\n * @api\n */\nconst CartoDB = function(options) {\n\n  /**\n   * @type {string}\n   * @private\n   */\n  this.account_ = options.account;\n\n  /**\n   * @type {string}\n   * @private\n   */\n  this.mapId_ = options.map || '';\n\n  /**\n   * @type {!Object}\n   * @private\n   */\n  this.config_ = options.config || {};\n\n  /**\n   * @type {!Object.<string, CartoDBLayerInfo>}\n   * @private\n   */\n  this.templateCache_ = {};\n\n  XYZ.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n    minZoom: options.minZoom,\n    projection: options.projection,\n    state: SourceState.LOADING,\n    wrapX: options.wrapX\n  });\n  this.initializeMap_();\n};\n\ninherits(CartoDB, XYZ);\n\n\n/**\n * Returns the current config.\n * @return {!Object} The current configuration.\n * @api\n */\nCartoDB.prototype.getConfig = function() {\n  return this.config_;\n};\n\n\n/**\n * Updates the carto db config.\n * @param {Object} config a key-value lookup. Values will replace current values\n *     in the config.\n * @api\n */\nCartoDB.prototype.updateConfig = function(config) {\n  assign(this.config_, config);\n  this.initializeMap_();\n};\n\n\n/**\n * Sets the CartoDB config\n * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n *     object.\n * If using named maps, a key-value lookup with the template parameters.\n * @api\n */\nCartoDB.prototype.setConfig = function(config) {\n  this.config_ = config || {};\n  this.initializeMap_();\n};\n\n\n/**\n * Issue a request to initialize the CartoDB map.\n * @private\n */\nCartoDB.prototype.initializeMap_ = function() {\n  const paramHash = JSON.stringify(this.config_);\n  if (this.templateCache_[paramHash]) {\n    this.applyTemplate_(this.templateCache_[paramHash]);\n    return;\n  }\n  let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n\n  if (this.mapId_) {\n    mapUrl += '/named/' + this.mapId_;\n  }\n\n  const client = new XMLHttpRequest();\n  client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));\n  client.addEventListener('error', this.handleInitError_.bind(this));\n  client.open('POST', mapUrl);\n  client.setRequestHeader('Content-type', 'application/json');\n  client.send(JSON.stringify(this.config_));\n};\n\n\n/**\n * Handle map initialization response.\n * @param {string} paramHash a hash representing the parameter set that was used\n *     for the request\n * @param {Event} event Event.\n * @private\n */\nCartoDB.prototype.handleInitResponse_ = function(paramHash, event) {\n  const client = /** @type {XMLHttpRequest} */ (event.target);\n  // status will be 0 for file:// urls\n  if (!client.status || client.status >= 200 && client.status < 300) {\n    let response;\n    try {\n      response = /** @type {CartoDBLayerInfo} */(JSON.parse(client.responseText));\n    } catch (err) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n    this.applyTemplate_(response);\n    this.templateCache_[paramHash] = response;\n    this.setState(SourceState.READY);\n  } else {\n    this.setState(SourceState.ERROR);\n  }\n};\n\n\n/**\n * @private\n * @param {Event} event Event.\n */\nCartoDB.prototype.handleInitError_ = function(event) {\n  this.setState(SourceState.ERROR);\n};\n\n\n/**\n * Apply the new tile urls returned by carto db\n * @param {CartoDBLayerInfo} data Result of carto db call.\n * @private\n */\nCartoDB.prototype.applyTemplate_ = function(data) {\n  const tilesUrl = 'https://' + data.cdn_url.https + '/' + this.account_ +\n      '/api/v1/map/' + data.layergroupid + '/{z}/{x}/{y}.png';\n  this.setUrl(tilesUrl);\n};\nexport default CartoDB;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {CartoDB, OSM} from '../src/ol/source.js';\n\nconst mapConfig = {\n  'layers': [{\n    'type': 'cartodb',\n    'options': {\n      'cartocss_version': '2.1.1',\n      'cartocss': '#layer { polygon-fill: #F00; }',\n      'sql': 'select * from european_countries_e where area > 0'\n    }\n  }]\n};\n\nconst cartoDBSource = new CartoDB({\n  account: 'documentation',\n  config: mapConfig\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    new TileLayer({\n      source: cartoDBSource\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nfunction setArea(n) {\n  mapConfig.layers[0].options.sql =\n      'select * from european_countries_e where area > ' + n;\n  cartoDBSource.setConfig(mapConfig);\n}\n\n\ndocument.getElementById('country-area').addEventListener('change', function() {\n  setArea(this.value);\n});\n"],"sourceRoot":""}