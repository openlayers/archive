{"version":3,"sources":["webpack:///../src/ol/format/WMSGetFeatureInfo.js","webpack:///./getfeatureinfo-layers.js"],"names":["WMSGetFeatureInfo","opt_options","const","options","this","featureNS_","gmlFormat_","GML2","layers_","layers","XMLFeature","call","Object","util","prototype","getLayers","setLayers","readFeatures_","node","objectStack","setAttribute","localName","features","childNodes","length","let","i","ii","layer","nodeType","Node","ELEMENT_NODE","context","layerName","replace","array","featureType","parsers","xml","readFeatureElement","parsersNS","layerFeatures","gmlFeatures","FEATURE_COLLECTION_PARSERS","readFeatures","readFeaturesFromNode","obj","getReadOptions","writeFeatureNode","feature","writeFeaturesNode","writeGeometryNode","geometry","format_WMSGetFeatureInfo","fetch","then","response","text","allFeatures","document","getElementById","innerText","toString","hotelFeatures","restaurantFeatures"],"mappings":"sJA2BMA,EAAoB,SAASC,GAEjCC,IAAMC,EAAUF,MAMhBG,KAAKC,WAAa,yCAOlBD,KAAKE,WAAa,IAAIC,EAAA,EAOtBH,KAAKI,QAAUL,EAAQM,OAASN,EAAQM,OAAS,KAEjDC,EAAA,EAAWC,KAAKP,OAGlBQ,OAAAC,EAAA,EAAAD,CAASZ,EAAmBU,EAAA,GAoB5BV,EAAkBc,UAAUC,UAAY,WACtC,OAAOX,KAAKI,SAOdR,EAAkBc,UAAUE,UAAY,SAASP,GAC/CL,KAAKI,QAAUC,GAUjBT,EAAkBc,UAAUG,cAAgB,SAASC,EAAMC,GACzDD,EAAKE,aAAa,eAAgBhB,KAAKC,YACvCH,IAAMmB,EAAYH,EAAKG,UAEnBC,KACJ,GAA+B,IAA3BJ,EAAKK,WAAWC,OAClB,OAAOF,EAET,GAAiB,eAAbD,EACF,IAAKI,IAAIC,EAAI,EAAGC,EAAKT,EAAKK,WAAWC,OAAQE,EAAIC,EAAID,IAAK,CACxDxB,IAAM0B,EAAQV,EAAKK,WAAWG,GAC9B,GAAIE,EAAMC,WAAaC,KAAKC,aAA5B,CAGA7B,IAAM8B,EAAUb,EAAY,GAGtBc,EAAYL,EAAMP,UAAUa,QA1ChB,SA0CkC,IAEpD,SAAS1B,SAAYI,OAAAuB,EAAA,EAAAvB,MAAcJ,QAASyB,GAA5C,CAIA/B,IAAMkC,EAAcH,EAvDA,WA0DpBD,EAAqB,YAAII,EACzBJ,EAAmB,eAAS3B,WAE5BH,IAAMmC,KACNA,EAAQD,GAAexB,OAAA0B,EAAA,EAAA1B,MAChBN,WAAWiC,wBAAyBjC,YAC3CJ,IAAMsC,EAAY5B,OAAA0B,EAAA,EAAA1B,EACfoB,EAAmB,UAAG,MAAOK,GAChCT,EAAMR,aAAa,oBAAqBf,YACxCH,IAAMuC,EAAgB7B,OAAA0B,EAAA,EAAA1B,IAChB4B,EAAWZ,EAAOT,OAAkBb,YACtCmC,GACF7B,OAAAuB,EAAA,EAAAvB,CAAOU,EAAUmB,KAIvB,GAAiB,qBAAbpB,EAAkC,CACpCnB,IAAMwC,EAAc9B,OAAA0B,EAAA,EAAA1B,IAClBR,KAAKE,WAAWqC,2BAA4BzB,OACtCd,KAAKE,YACToC,IACFpB,EAAWoB,GAGf,OAAOpB,GAaTtB,EAAkBc,UAAU8B,aAM5B5C,EAAkBc,UAAU+B,qBAAuB,SAAS3B,EAAMjB,GAChEC,IAAMC,KAIN,OAHIF,GACFW,OAAAkC,EAAA,EAAAlC,CAAOT,EAASC,KAAK2C,eAAe7B,EAAMjB,IAErCG,KAAKa,cAAcC,GAAOf,KAQnCH,EAAkBc,UAAUkC,iBAAmB,SAASC,EAAShD,KAOjED,EAAkBc,UAAUoC,kBAAoB,SAAS5B,EAAUrB,KAOnED,EAAkBc,UAAUqC,kBAAoB,SAASC,EAAUnD,KACnE,IAAAoD,EAAA,EC5LAC,MAAM,mDAAmDC,KAAK,SAASC,GACrE,OAAOA,EAASC,SACfF,KAAK,SAASC,GAGftD,IAAMwD,GAAc,IAAIL,GAAoBT,aAAaY,GACzDG,SAASC,eAAe,OAAOC,UAAYH,EAAYlC,OAAOsC,WAI9D5D,IAAM6D,EAAgB,IAAIV,GACxB5C,QAAS,WACRmC,aAAaY,GAChBG,SAASC,eAAe,SAASC,UAAYE,EAAcvC,OAAOsC,WAElE5D,IAAM8D,EAAqB,IAAIX,GAC7B5C,QAAS,gBACRmC,aAAaY,GAChBG,SAASC,eAAe,cAAcC,UAAYG,EAAmBxC,OAAOsC","file":"getfeatureinfo-layers.js","sourcesContent":["/**\n * @module ol/format/WMSGetFeatureInfo\n */\nimport {inherits} from '../util.js';\nimport {extend, includes} from '../array.js';\nimport GML2 from '../format/GML2.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport {assign} from '../obj.js';\nimport {makeArrayPusher, makeStructureNS, pushParseAndPop} from '../xml.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {Array.<string>} [layers] If set, only features of the given layers will be returned by the format when read.\n */\n\n\n/**\n * @classdesc\n * Format for reading WMSGetFeatureInfo format. It uses\n * {@link module:ol/format/GML2~GML2} to read features.\n *\n * @constructor\n * @extends {module:ol/format/XMLFeature}\n * @param {module:ol/format/WMSGetFeatureInfo~Options=} opt_options Options.\n * @api\n */\nconst WMSGetFeatureInfo = function(opt_options) {\n\n  const options = opt_options ? opt_options : {};\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';\n\n\n  /**\n   * @private\n   * @type {module:ol/format/GML2}\n   */\n  this.gmlFormat_ = new GML2();\n\n\n  /**\n   * @private\n   * @type {Array.<string>}\n   */\n  this.layers_ = options.layers ? options.layers : null;\n\n  XMLFeature.call(this);\n};\n\ninherits(WMSGetFeatureInfo, XMLFeature);\n\n\n/**\n * @const\n * @type {string}\n */\nconst featureIdentifier = '_feature';\n\n\n/**\n * @const\n * @type {string}\n */\nconst layerIdentifier = '_layer';\n\n\n/**\n * @return {Array.<string>} layers\n */\nWMSGetFeatureInfo.prototype.getLayers = function() {\n  return this.layers_;\n};\n\n\n/**\n * @param {Array.<string>} layers Layers to parse.\n */\nWMSGetFeatureInfo.prototype.setLayers = function(layers) {\n  this.layers_ = layers;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Array.<module:ol/Feature>} Features.\n * @private\n */\nWMSGetFeatureInfo.prototype.readFeatures_ = function(node, objectStack) {\n  node.setAttribute('namespaceURI', this.featureNS_);\n  const localName = node.localName;\n  /** @type {Array.<module:ol/Feature>} */\n  let features = [];\n  if (node.childNodes.length === 0) {\n    return features;\n  }\n  if (localName == 'msGMLOutput') {\n    for (let i = 0, ii = node.childNodes.length; i < ii; i++) {\n      const layer = node.childNodes[i];\n      if (layer.nodeType !== Node.ELEMENT_NODE) {\n        continue;\n      }\n      const context = objectStack[0];\n\n      const toRemove = layerIdentifier;\n      const layerName = layer.localName.replace(toRemove, '');\n\n      if (this.layers_ && !includes(this.layers_, layerName)) {\n        continue;\n      }\n\n      const featureType = layerName +\n          featureIdentifier;\n\n      context['featureType'] = featureType;\n      context['featureNS'] = this.featureNS_;\n\n      const parsers = {};\n      parsers[featureType] = makeArrayPusher(\n        this.gmlFormat_.readFeatureElement, this.gmlFormat_);\n      const parsersNS = makeStructureNS(\n        [context['featureNS'], null], parsers);\n      layer.setAttribute('namespaceURI', this.featureNS_);\n      const layerFeatures = pushParseAndPop(\n        [], parsersNS, layer, objectStack, this.gmlFormat_);\n      if (layerFeatures) {\n        extend(features, layerFeatures);\n      }\n    }\n  }\n  if (localName == 'FeatureCollection') {\n    const gmlFeatures = pushParseAndPop([],\n      this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,\n      [{}], this.gmlFormat_);\n    if (gmlFeatures) {\n      features = gmlFeatures;\n    }\n  }\n  return features;\n};\n\n\n/**\n * Read all features from a WMSGetFeatureInfo response.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\nWMSGetFeatureInfo.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nWMSGetFeatureInfo.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const options = {};\n  if (opt_options) {\n    assign(options, this.getReadOptions(node, opt_options));\n  }\n  return this.readFeatures_(node, [options]);\n};\n\n\n/**\n * Not implemented.\n * @inheritDoc\n */\nWMSGetFeatureInfo.prototype.writeFeatureNode = function(feature, opt_options) {};\n\n\n/**\n * Not implemented.\n * @inheritDoc\n */\nWMSGetFeatureInfo.prototype.writeFeaturesNode = function(features, opt_options) {};\n\n\n/**\n * Not implemented.\n * @inheritDoc\n */\nWMSGetFeatureInfo.prototype.writeGeometryNode = function(geometry, opt_options) {};\nexport default WMSGetFeatureInfo;\n","import WMSGetFeatureInfo from '../src/ol/format/WMSGetFeatureInfo.js';\n\nfetch('data/wmsgetfeatureinfo/osm-restaurant-hotel.xml').then(function(response) {\n  return response.text();\n}).then(function(response) {\n\n  // this is the standard way to read the features\n  const allFeatures = new WMSGetFeatureInfo().readFeatures(response);\n  document.getElementById('all').innerText = allFeatures.length.toString();\n\n  // when specifying the 'layers' options, only the features of those\n  // layers are returned by the format\n  const hotelFeatures = new WMSGetFeatureInfo({\n    layers: ['hotel']\n  }).readFeatures(response);\n  document.getElementById('hotel').innerText = hotelFeatures.length.toString();\n\n  const restaurantFeatures = new WMSGetFeatureInfo({\n    layers: ['restaurant']\n  }).readFeatures(response);\n  document.getElementById('restaurant').innerText = restaurantFeatures.length.toString();\n\n});\n"],"sourceRoot":""}