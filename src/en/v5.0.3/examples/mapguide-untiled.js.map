{"version":3,"sources":["webpack:///../src/ol/source/ImageMapGuide.js","webpack:///./mapguide-untiled.js"],"names":["ImageMapGuide","options","source_Image","call","this","projection","resolutions","crossOrigin_","undefined","crossOrigin","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","Object","util","prototype","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","let","image","getRevision","getResolution","getPixelRatio","ol_extent","getExtent","slice","const","size","imageUrl","getUrl","ol_Image","events","EventType","CHANGE","handleImageChange","getImageLoadFunction","updateParams","obj","changed","baseUrl","scale","dpi","mcsW","mcsH","devW","devH","mpp","getScale","center","baseParams","OPERATION","VERSION","LOCALE","CLIENTAGENT","CLIP","SETDISPLAYDPI","SETDISPLAYWIDTH","Math","round","SETDISPLAYHEIGHT","SETVIEWSCALE","SETVIEWCENTERX","SETVIEWCENTERY","uri","setImageLoadFunction","source_ImageMapGuide","Map","layers","Image","source","MAPDEFINITION","FORMAT","USERNAME","PASSWORD","target","view","View","zoom"],"mappings":"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","file":"mapguide-untiled.js","sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\nimport {inherits} from '../util.js';\nimport ImageWrapper from '../Image.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getHeight, getWidth, scaleFromCenter} from '../extent.js';\nimport {assign} from '../obj.js';\nimport ImageSource, {defaultImageLoadFunction} from '../source/Image.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array.<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object} [params] Additional parameters.\n */\n\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @constructor\n * @fires ol/source/Image~ImageSourceEvent\n * @extends {module:ol/source/Image}\n * @param {module:ol/source/ImageMapGuide~Options=} options ImageMapGuide options.\n * @api\n */\nconst ImageMapGuide = function(options) {\n\n  ImageSource.call(this, {\n    projection: options.projection,\n    resolutions: options.resolutions\n  });\n\n  /**\n   * @private\n   * @type {?string}\n   */\n  this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.displayDpi_ = options.displayDpi !== undefined ?\n    options.displayDpi : 96;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = options.params || {};\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.url_ = options.url;\n\n  /**\n   * @private\n   * @type {module:ol/Image~LoadFunction}\n   */\n  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n    options.imageLoadFunction : defaultImageLoadFunction;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.metersPerUnit_ = options.metersPerUnit !== undefined ?\n    options.metersPerUnit : 1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.useOverlay_ = options.useOverlay !== undefined ?\n    options.useOverlay : false;\n\n  /**\n   * @private\n   * @type {module:ol/Image}\n   */\n  this.image_ = null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.renderedRevision_ = 0;\n\n};\n\ninherits(ImageMapGuide, ImageSource);\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nImageMapGuide.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @inheritDoc\n */\nImageMapGuide.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {\n  resolution = this.findNearestResolution(resolution);\n  pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n  let image = this.image_;\n  if (image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)) {\n    return image;\n  }\n\n  if (this.ratio_ != 1) {\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n  }\n  const width = getWidth(extent) / resolution;\n  const height = getHeight(extent) / resolution;\n  const size = [width * pixelRatio, height * pixelRatio];\n\n  if (this.url_ !== undefined) {\n    const imageUrl = this.getUrl(this.url_, this.params_, extent, size,\n      projection);\n    image = new ImageWrapper(extent, resolution, pixelRatio,\n      imageUrl, this.crossOrigin_,\n      this.imageLoadFunction_);\n    listen(image, EventType.CHANGE,\n      this.handleImageChange, this);\n  } else {\n    image = null;\n  }\n  this.image_ = image;\n  this.renderedRevision_ = this.getRevision();\n\n  return image;\n};\n\n\n/**\n * Return the image load function of the source.\n * @return {module:ol/Image~LoadFunction} The image load function.\n * @api\n */\nImageMapGuide.prototype.getImageLoadFunction = function() {\n  return this.imageLoadFunction_;\n};\n\n\n/**\n * @param {module:ol/extent~Extent} extent The map extents.\n * @param {module:ol/size~Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  } else {\n    return mcsH * metersPerUnit / (devH * mpp); // height limited\n  }\n}\n\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nImageMapGuide.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.changed();\n};\n\n\n/**\n * @param {string} baseUrl The mapagent url.\n * @param {Object.<string, string|number>} params Request parameters.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/size~Size} size Size.\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {string} The mapagent map image request URL.\n */\nImageMapGuide.prototype.getUrl = function(baseUrl, params, extent, size, projection) {\n  const scale = getScale(extent, size,\n    this.metersPerUnit_, this.displayDpi_);\n  const center = getCenter(extent);\n  const baseParams = {\n    'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n    'VERSION': '2.0.0',\n    'LOCALE': 'en',\n    'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n    'CLIP': '1',\n    'SETDISPLAYDPI': this.displayDpi_,\n    'SETDISPLAYWIDTH': Math.round(size[0]),\n    'SETDISPLAYHEIGHT': Math.round(size[1]),\n    'SETVIEWSCALE': scale,\n    'SETVIEWCENTERX': center[0],\n    'SETVIEWCENTERY': center[1]\n  };\n  assign(baseParams, params);\n  return appendParams(baseUrl, baseParams);\n};\n\n\n/**\n * Set the image load function of the MapGuide source.\n * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.\n * @api\n */\nImageMapGuide.prototype.setImageLoadFunction = function(imageLoadFunction) {\n  this.image_ = null;\n  this.imageLoadFunction_ = imageLoadFunction;\n  this.changed();\n};\nexport default ImageMapGuide;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ImageLayer from '../src/ol/layer/Image.js';\nimport ImageMapGuide from '../src/ol/source/ImageMapGuide.js';\n\nconst mdf = 'Library://Public/Samples/Sheboygan/Maps/Sheboygan.MapDefinition';\nconst agentUrl =\n    'http://www.buoyshark.com/mapguide/mapagent/mapagent.fcgi?';\nconst bounds = [\n  -87.865114442365922,\n  43.665065564837931,\n  -87.595394059497067,\n  43.823852564430069\n];\nconst map = new Map({\n  layers: [\n    new ImageLayer({\n      extent: bounds,\n      source: new ImageMapGuide({\n        projection: 'EPSG:4326',\n        url: agentUrl,\n        useOverlay: false,\n        metersPerUnit: 111319.4908, //value returned from mapguide\n        params: {\n          MAPDEFINITION: mdf,\n          FORMAT: 'PNG',\n          USERNAME: 'OpenLayers',\n          PASSWORD: 'OpenLayers'\n        },\n        ratio: 2\n      })\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [-87.7302542509315, 43.744459064634],\n    projection: 'EPSG:4326',\n    zoom: 12\n  })\n});\n"],"sourceRoot":""}