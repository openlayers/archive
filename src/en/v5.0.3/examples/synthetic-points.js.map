{"version":3,"sources":["webpack:///./synthetic-points.js"],"names":["features","Array","e","i","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","geometry","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_3__","Math","random","size","const","styles","10","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","image","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","radius","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","color","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_10__","width","20","vectorSource","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_6__","wrapX","vector","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_5__","source","style","feature","get","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","layers","target","document","getElementById","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","closestPoint","getGeometry","getClosestPoint","setCoordinates","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_4__","render","on","evt","dragging","getEventCoordinate","originalEvent","vectorContext","setStyle","drawGeometry","pixel","getEventPixel","hit","hasFeatureAtPixel","getTarget","cursor"],"mappings":"kGAYA,iGAFMA,EAAW,IAAIC,MADP,KAERC,EAAI,KACDC,EAAI,EAAGA,EAHF,MAGeA,EAC3BH,EAASG,GAAK,IAAIC,EAAA,GAChBC,SAAY,IAAIC,EAAA,GACb,EAAIJ,EAAIK,KAAKC,SAAWN,EAAG,EAAIA,EAAIK,KAAKC,SAAWN,IACtDC,EAAKA,EACLM,KAAQN,EAAI,EAAI,GAAK,KAIzBO,IAAMC,GACJC,GAAM,IAAIC,EAAA,GACRC,MAAO,IAAIC,EAAA,GACTC,OAAQ,EACRC,KAAM,IAAIC,EAAA,GAAMC,MAAO,YACvBC,OAAQ,IAAIC,EAAA,GAAQF,MAAO,UAAWG,MAAO,QAGjDC,GAAM,IAAIV,EAAA,GACRC,MAAO,IAAIC,EAAA,GACTC,OAAQ,GACRC,KAAM,IAAIC,EAAA,GAAMC,MAAO,YACvBC,OAAQ,IAAIC,EAAA,GAAQF,MAAO,UAAWG,MAAO,SAK7CE,EAAe,IAAIC,EAAA,GACvBzB,SAAUA,EACV0B,OAAO,IAEHC,EAAS,IAAIC,EAAA,GACjBC,OAAQL,EACRM,MAAO,SAASC,GACd,OAAOpB,EAAOoB,EAAQC,IAAI,YAIxBC,EAAM,IAAIC,EAAA,GACdC,QAASR,GACTS,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAIC,EAAA,GACRC,QAAS,EAAG,GACZC,KAAM,MAINC,EAAQ,KACRC,EAAO,KACLC,EAAc,SAASC,GAC3BpC,IAAMqC,EAAiBvB,EAAawB,8BAA8BF,GAClE,GAAuB,OAAnBC,EACFJ,EAAQ,KACRC,EAAO,SACF,CACLlC,IACMuC,EADWF,EAAeG,cACFC,gBAAgBL,GAChC,OAAVH,EACFA,EAAQ,IAAIrC,EAAA,EAAM2C,GAElBN,EAAMS,eAAeH,GAEV,OAATL,EACFA,EAAO,IAAIS,EAAA,GAAYP,EAAYG,IAEnCL,EAAKQ,gBAAgBN,EAAYG,IAGrChB,EAAIqB,UAGNrB,EAAIsB,GAAG,cAAe,SAASC,GAC7B,IAAIA,EAAIC,SAAR,CAGA/C,IAAMoC,EAAab,EAAIyB,mBAAmBF,EAAIG,eAC9Cd,EAAYC,MAGdb,EAAIsB,GAAG,QAAS,SAASC,GACvBX,EAAYW,EAAIV,cAGlBpC,IAAMU,EAAS,IAAIC,EAAA,GACjBF,MAAO,sBACPG,MAAO,IAEHQ,EAAQ,IAAIjB,EAAA,GAChBO,OAAQA,EACRN,MAAO,IAAIC,EAAA,GACTC,OAAQ,GACRI,OAAQA,MAIZa,EAAIsB,GAAG,cAAe,SAASC,GAC7B9C,IAAMkD,EAAgBJ,EAAII,cAC1BA,EAAcC,SAAS/B,GACT,OAAVa,GACFiB,EAAcE,aAAanB,GAEhB,OAATC,GACFgB,EAAcE,aAAalB,KAI/BX,EAAIsB,GAAG,cAAe,SAASC,GAC7B,IAAIA,EAAIC,SAAR,CAGA/C,IAAMqD,EAAQ9B,EAAI+B,cAAcR,EAAIG,eAC9BM,EAAMhC,EAAIiC,kBAAkBH,GAEhC9B,EAAIkC,YAAYrC,MAAMsC,OADpBH,EAC6B,UAEA","file":"synthetic-points.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {LineString, Point} from '../src/ol/geom.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\nconst count = 20000;\nconst features = new Array(count);\nconst e = 18000000;\nfor (let i = 0; i < count; ++i) {\n  features[i] = new Feature({\n    'geometry': new Point(\n      [2 * e * Math.random() - e, 2 * e * Math.random() - e]),\n    'i': i,\n    'size': i % 2 ? 10 : 20\n  });\n}\n\nconst styles = {\n  '10': new Style({\n    image: new CircleStyle({\n      radius: 5,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1})\n    })\n  }),\n  '20': new Style({\n    image: new CircleStyle({\n      radius: 10,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1})\n    })\n  })\n};\n\nconst vectorSource = new VectorSource({\n  features: features,\n  wrapX: false\n});\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function(feature) {\n    return styles[feature.get('size')];\n  }\n});\n\nconst map = new Map({\n  layers: [vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nlet point = null;\nlet line = null;\nconst displaySnap = function(coordinate) {\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\n  if (closestFeature === null) {\n    point = null;\n    line = null;\n  } else {\n    const geometry = closestFeature.getGeometry();\n    const closestPoint = geometry.getClosestPoint(coordinate);\n    if (point === null) {\n      point = new Point(closestPoint);\n    } else {\n      point.setCoordinates(closestPoint);\n    }\n    if (line === null) {\n      line = new LineString([coordinate, closestPoint]);\n    } else {\n      line.setCoordinates([coordinate, closestPoint]);\n    }\n  }\n  map.render();\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displaySnap(coordinate);\n});\n\nmap.on('click', function(evt) {\n  displaySnap(evt.coordinate);\n});\n\nconst stroke = new Stroke({\n  color: 'rgba(255,255,0,0.9)',\n  width: 3\n});\nconst style = new Style({\n  stroke: stroke,\n  image: new CircleStyle({\n    radius: 10,\n    stroke: stroke\n  })\n});\n\nmap.on('postcompose', function(evt) {\n  const vectorContext = evt.vectorContext;\n  vectorContext.setStyle(style);\n  if (point !== null) {\n    vectorContext.drawGeometry(point);\n  }\n  if (line !== null) {\n    vectorContext.drawGeometry(line);\n  }\n});\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const pixel = map.getEventPixel(evt.originalEvent);\n  const hit = map.hasFeatureAtPixel(pixel);\n  if (hit) {\n    map.getTarget().style.cursor = 'pointer';\n  } else {\n    map.getTarget().style.cursor = '';\n  }\n});\n"],"sourceRoot":""}