{"version":3,"sources":["webpack:///./measure.js"],"names":["sketch","helpTooltipElement","helpTooltip","measureTooltipElement","measureTooltip","raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_8__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_11__","vector","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_9__","style","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_12__","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","color","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_14__","width","image","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_15__","radius","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_4__","center","zoom","on","evt","dragging","let","helpMsg","const","geom","getGeometry","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_6__","innerHTML","setPosition","coordinate","classList","remove","getViewport","addEventListener","add","draw","typeSelect","document","getElementById","formatLength","line","length","Object","_src_ol_sphere_js__WEBPACK_IMPORTED_MODULE_3__","Math","round","formatArea","polygon","area","addInteraction","listener","type","value","_src_ol_interaction_Draw_js__WEBPACK_IMPORTED_MODULE_7__","lineDash","createMeasureTooltip","parentNode","removeChild","createElement","className","_src_ol_Overlay_js__WEBPACK_IMPORTED_MODULE_2__","element","offset","positioning","addOverlay","createHelpTooltip","feature","tooltipCoord","output","getInteriorPoint","getCoordinates","getLastCoordinate","this","setOffset","_src_ol_Observable_js__WEBPACK_IMPORTED_MODULE_1__","onchange","removeInteraction"],"mappings":"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","file":"measure.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport {unByKey} from '../src/ol/Observable.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport {getArea, getLength} from '../src/ol/sphere.js';\nimport View from '../src/ol/View.js';\nimport {LineString, Polygon} from '../src/ol/geom.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst source = new VectorSource();\n\nconst vector = new VectorLayer({\n  source: source,\n  style: new Style({\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 0.2)'\n    }),\n    stroke: new Stroke({\n      color: '#ffcc33',\n      width: 2\n    }),\n    image: new CircleStyle({\n      radius: 7,\n      fill: new Fill({\n        color: '#ffcc33'\n      })\n    })\n  })\n});\n\n\n/**\n * Currently drawn feature.\n * @type {module:ol/Feature~Feature}\n */\nlet sketch;\n\n\n/**\n * The help tooltip element.\n * @type {Element}\n */\nlet helpTooltipElement;\n\n\n/**\n * Overlay to show the help messages.\n * @type {module:ol/Overlay}\n */\nlet helpTooltip;\n\n\n/**\n * The measure tooltip element.\n * @type {Element}\n */\nlet measureTooltipElement;\n\n\n/**\n * Overlay to show the measurement.\n * @type {module:ol/Overlay}\n */\nlet measureTooltip;\n\n\n/**\n * Message to show when the user is drawing a polygon.\n * @type {string}\n */\nconst continuePolygonMsg = 'Click to continue drawing the polygon';\n\n\n/**\n * Message to show when the user is drawing a line.\n * @type {string}\n */\nconst continueLineMsg = 'Click to continue drawing the line';\n\n\n/**\n * Handle pointer move.\n * @param {module:ol/MapBrowserEvent~MapBrowserEvent} evt The event.\n */\nconst pointerMoveHandler = function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  /** @type {string} */\n  let helpMsg = 'Click to start drawing';\n\n  if (sketch) {\n    const geom = (sketch.getGeometry());\n    if (geom instanceof Polygon) {\n      helpMsg = continuePolygonMsg;\n    } else if (geom instanceof LineString) {\n      helpMsg = continueLineMsg;\n    }\n  }\n\n  helpTooltipElement.innerHTML = helpMsg;\n  helpTooltip.setPosition(evt.coordinate);\n\n  helpTooltipElement.classList.remove('hidden');\n};\n\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 15\n  })\n});\n\nmap.on('pointermove', pointerMoveHandler);\n\nmap.getViewport().addEventListener('mouseout', function() {\n  helpTooltipElement.classList.add('hidden');\n});\n\nconst typeSelect = document.getElementById('type');\n\nlet draw; // global so we can remove it later\n\n\n/**\n * Format length output.\n * @param {module:ol/geom/LineString~LineString} line The line.\n * @return {string} The formatted length.\n */\nconst formatLength = function(line) {\n  const length = getLength(line);\n  let output;\n  if (length > 100) {\n    output = (Math.round(length / 1000 * 100) / 100) +\n        ' ' + 'km';\n  } else {\n    output = (Math.round(length * 100) / 100) +\n        ' ' + 'm';\n  }\n  return output;\n};\n\n\n/**\n * Format area output.\n * @param {module:ol/geom/Polygon~Polygon} polygon The polygon.\n * @return {string} Formatted area.\n */\nconst formatArea = function(polygon) {\n  const area = getArea(polygon);\n  let output;\n  if (area > 10000) {\n    output = (Math.round(area / 1000000 * 100) / 100) +\n        ' ' + 'km<sup>2</sup>';\n  } else {\n    output = (Math.round(area * 100) / 100) +\n        ' ' + 'm<sup>2</sup>';\n  }\n  return output;\n};\n\nfunction addInteraction() {\n  const type = (typeSelect.value == 'area' ? 'Polygon' : 'LineString');\n  draw = new Draw({\n    source: source,\n    type: type,\n    style: new Style({\n      fill: new Fill({\n        color: 'rgba(255, 255, 255, 0.2)'\n      }),\n      stroke: new Stroke({\n        color: 'rgba(0, 0, 0, 0.5)',\n        lineDash: [10, 10],\n        width: 2\n      }),\n      image: new CircleStyle({\n        radius: 5,\n        stroke: new Stroke({\n          color: 'rgba(0, 0, 0, 0.7)'\n        }),\n        fill: new Fill({\n          color: 'rgba(255, 255, 255, 0.2)'\n        })\n      })\n    })\n  });\n  map.addInteraction(draw);\n\n  createMeasureTooltip();\n  createHelpTooltip();\n\n  let listener;\n  draw.on('drawstart',\n    function(evt) {\n      // set sketch\n      sketch = evt.feature;\n\n      /** @type {module:ol/coordinate~Coordinate|undefined} */\n      let tooltipCoord = evt.coordinate;\n\n      listener = sketch.getGeometry().on('change', function(evt) {\n        const geom = evt.target;\n        let output;\n        if (geom instanceof Polygon) {\n          output = formatArea(geom);\n          tooltipCoord = geom.getInteriorPoint().getCoordinates();\n        } else if (geom instanceof LineString) {\n          output = formatLength(geom);\n          tooltipCoord = geom.getLastCoordinate();\n        }\n        measureTooltipElement.innerHTML = output;\n        measureTooltip.setPosition(tooltipCoord);\n      });\n    }, this);\n\n  draw.on('drawend',\n    function() {\n      measureTooltipElement.className = 'tooltip tooltip-static';\n      measureTooltip.setOffset([0, -7]);\n      // unset sketch\n      sketch = null;\n      // unset tooltip so that a new one can be created\n      measureTooltipElement = null;\n      createMeasureTooltip();\n      unByKey(listener);\n    }, this);\n}\n\n\n/**\n * Creates a new help tooltip\n */\nfunction createHelpTooltip() {\n  if (helpTooltipElement) {\n    helpTooltipElement.parentNode.removeChild(helpTooltipElement);\n  }\n  helpTooltipElement = document.createElement('div');\n  helpTooltipElement.className = 'tooltip hidden';\n  helpTooltip = new Overlay({\n    element: helpTooltipElement,\n    offset: [15, 0],\n    positioning: 'center-left'\n  });\n  map.addOverlay(helpTooltip);\n}\n\n\n/**\n * Creates a new measure tooltip\n */\nfunction createMeasureTooltip() {\n  if (measureTooltipElement) {\n    measureTooltipElement.parentNode.removeChild(measureTooltipElement);\n  }\n  measureTooltipElement = document.createElement('div');\n  measureTooltipElement.className = 'tooltip tooltip-measure';\n  measureTooltip = new Overlay({\n    element: measureTooltipElement,\n    offset: [0, -15],\n    positioning: 'bottom-center'\n  });\n  map.addOverlay(measureTooltip);\n}\n\n\n/**\n * Let user change the geometry type.\n */\ntypeSelect.onchange = function() {\n  map.removeInteraction(draw);\n  addInteraction();\n};\n\naddInteraction();\n"],"sourceRoot":""}