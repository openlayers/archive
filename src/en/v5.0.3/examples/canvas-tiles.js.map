{"version":3,"sources":["webpack:///../src/ol/source/TileDebug.js","webpack:///./canvas-tiles.js"],"names":["LabeledTile","tileCoord","tileSize","text","ol_Tile","call","this","TileState","LOADED","tileSize_","text_","canvas_","Object","ol_util","prototype","getImage","const","context","dom","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","fillText","canvas","load","TileDebug","options","source_Tile","opaque","projection","tileGrid","wrapX","undefined","getTile","z","x","y","tileCoordKey","tilecoord","tileCache","containsKey","get","size","getTileSize","textTileCoord","getTileCoordForTileUrlFunction","toString","tile","set","source_TileDebug","osmSource","OSM","Map","layers","Tile","source","getTileGrid","target","controls","util","attributionOptions","collapsible","view","View","center","proj","zoom"],"mappings":"2MAmBMA,EAAc,SAASC,EAAWC,EAAUC,GAEhDC,EAAA,EAAKC,KAAKC,KAAML,EAAWM,EAAA,EAAUC,QAMrCF,KAAKG,UAAYP,EAMjBI,KAAKI,MAAQP,EAMbG,KAAKK,QAAU,MAGjBC,OAAAC,EAAA,EAAAD,CAASZ,EAAaI,EAAA,GAOtBJ,EAAYc,UAAUC,SAAW,WAC/B,GAAIT,KAAKK,QACP,OAAOL,KAAKK,QAEZK,IAAMd,EAAWI,KAAKG,UAChBQ,EAAUL,OAAAM,EAAA,EAAAN,CAAsBV,EAAS,GAAIA,EAAS,IAY5D,OAVAe,EAAQE,YAAc,QACtBF,EAAQG,WAAW,GAAK,GAAKlB,EAAS,GAAK,GAAKA,EAAS,GAAK,IAE9De,EAAQI,UAAY,QACpBJ,EAAQK,UAAY,SACpBL,EAAQM,aAAe,SACvBN,EAAQO,KAAO,kBACfP,EAAQQ,SAASnB,KAAKI,MAAOR,EAAS,GAAK,EAAGA,EAAS,GAAK,GAE5DI,KAAKK,QAAUM,EAAQS,OAChBT,EAAQS,QAQnB1B,EAAYc,UAAUa,KAAO,aAwB7BX,IAAMY,EAAY,SAASC,GAEzBC,EAAA,EAAWzB,KAAKC,MACdyB,QAAQ,EACRC,WAAYH,EAAQG,WACpBC,SAAUJ,EAAQI,SAClBC,WAAyBC,IAAlBN,EAAQK,OAAsBL,EAAQK,SAKjDtB,OAAAC,EAAA,EAAAD,CAASgB,EAAWE,EAAA,GAMpBF,EAAUd,UAAUsB,QAAU,SAASC,EAAGC,EAAGC,GAC3CvB,IAAMwB,EAAe5B,OAAA6B,EAAA,EAAA7B,CAAUyB,EAAGC,EAAGC,GACrC,GAAIjC,KAAKoC,UAAUC,YAAYH,GAC7B,OAA+DlC,KAAKoC,UAAUE,IAAIJ,GAElFxB,IAAMd,EAAWU,OAAAiC,EAAA,EAAAjC,CAAON,KAAK2B,SAASa,YAAYT,IAC5CpC,GAAaoC,EAAGC,EAAGC,GACnBQ,EAAgBzC,KAAK0C,+BAA+B/C,GACpDE,EAAQ4C,EACZzC,KAAK0C,+BAA+BD,GAAeE,WADvB,GAExBC,EAAO,IAAIlD,EAAYC,EAAWC,EAAUC,GAElD,OADAG,KAAKoC,UAAUS,IAAIX,EAAcU,GAC1BA,GAKX,IAAAE,EAAA,EC5HMC,EAAY,IAAIC,EAAA,EACV,IAAIC,EAAA,GACdC,QACE,IAAIC,EAAA,GACFC,OAAQL,IAEV,IAAII,EAAA,GACFC,OAAQ,IAAIN,GACVpB,WAAY,YACZC,SAAUoB,EAAUM,mBAI1BC,OAAQ,MACRC,SAAUjD,OAAAkD,EAAA,EAAAlD,EACRmD,oBACEC,aAAa,KAGjBC,KAAM,IAAIC,EAAA,GACRC,OAAQvD,OAAAwD,EAAA,EAAAxD,GAAa,MAAQ,YAC7ByD,KAAM","file":"canvas-tiles.js","sourcesContent":["/**\n * @module ol/source/TileDebug\n */\nimport {inherits} from '../util.js';\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {toSize} from '../size.js';\nimport TileSource from '../source/Tile.js';\nimport {getKeyZXY} from '../tilecoord.js';\n\n\n/**\n * @constructor\n * @extends {module:ol/Tile}\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/size~Size} tileSize Tile size.\n * @param {string} text Text.\n */\nconst LabeledTile = function(tileCoord, tileSize, text) {\n\n  Tile.call(this, tileCoord, TileState.LOADED);\n\n  /**\n   * @private\n   * @type {module:ol/size~Size}\n   */\n  this.tileSize_ = tileSize;\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.text_ = text;\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n  this.canvas_ = null;\n\n};\ninherits(LabeledTile, Tile);\n\n\n/**\n * Get the image element for this tile.\n * @return {HTMLCanvasElement} Image.\n */\nLabeledTile.prototype.getImage = function() {\n  if (this.canvas_) {\n    return this.canvas_;\n  } else {\n    const tileSize = this.tileSize_;\n    const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n\n    context.strokeStyle = 'black';\n    context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n\n    context.fillStyle = 'black';\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.font = '24px sans-serif';\n    context.fillText(this.text_, tileSize[0] / 2, tileSize[1] / 2);\n\n    this.canvas_ = context.canvas;\n    return context.canvas;\n  }\n};\n\n\n/**\n * @override\n */\nLabeledTile.prototype.load = function() {};\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n *\n * Uses Canvas context2d, so requires Canvas support.\n *\n * @constructor\n * @extends {module:ol/source/Tile}\n * @param {module:ol/source/TileDebug~Options=} options Debug tile options.\n * @api\n */\nconst TileDebug = function(options) {\n\n  TileSource.call(this, {\n    opaque: false,\n    projection: options.projection,\n    tileGrid: options.tileGrid,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true\n  });\n\n};\n\ninherits(TileDebug, TileSource);\n\n\n/**\n * @inheritDoc\n */\nTileDebug.prototype.getTile = function(z, x, y) {\n  const tileCoordKey = getKeyZXY(z, x, y);\n  if (this.tileCache.containsKey(tileCoordKey)) {\n    return /** @type {!module:ol/source/TileDebug~LabeledTile} */ (this.tileCache.get(tileCoordKey));\n  } else {\n    const tileSize = toSize(this.tileGrid.getTileSize(z));\n    const tileCoord = [z, x, y];\n    const textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\n    const text = !textTileCoord ? '' :\n      this.getTileCoordForTileUrlFunction(textTileCoord).toString();\n    const tile = new LabeledTile(tileCoord, tileSize, text);\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n};\n\n\nexport default TileDebug;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls} from '../src/ol/control.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport {OSM, TileDebug} from '../src/ol/source.js';\n\n\nconst osmSource = new OSM();\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: osmSource\n    }),\n    new TileLayer({\n      source: new TileDebug({\n        projection: 'EPSG:3857',\n        tileGrid: osmSource.getTileGrid()\n      })\n    })\n  ],\n  target: 'map',\n  controls: defaultControls({\n    attributionOptions: {\n      collapsible: false\n    }\n  }),\n  view: new View({\n    center: fromLonLat([-0.1275, 51.507222]),\n    zoom: 10\n  })\n});\n"],"sourceRoot":""}