{"version":3,"sources":["webpack:///../src/ol/format/OSMXML.js","webpack:///./vector-osm.js"],"names":["OSMXML","XMLFeature","call","this","dataProjection","Object","proj","ol_util","const","NAMESPACE_URIS","WAY_PARSERS","xml","nd","node","objectStack","length","ndrefs","push","getAttribute","tag","readTag","PARSERS","options","state","id","coordinates","parseFloat","nodes","values","tags","NODE_PARSERS","obj","geometry","Point","format_Feature","feature","Feature","setId","setProperties","features","way","ways","prototype","readFeatures","readFeaturesFromNode","opt_options","getReadOptions","localName","j","flatCoordinates","i","ii","point","array","let","Polygon","setFlatCoordinates","GeometryLayout","XY","LineString","readProjection","writeFeatureNode","writeFeaturesNode","writeGeometryNode","format_OSMXML","map","styles","amenity","parking","Style","stroke","Stroke","color","width","fill","Fill","building",".*","zIndex","highway","service","landuse","forest|grass|allotments","natural","tree","image","Circle","radius","vectorSource","source_Vector","format","loader","extent","resolution","projection","epsg4326Extent","client","XMLHttpRequest","open","addEventListener","responseText","featureProjection","getView","getProjection","addFeatures","query","send","strategy","loadingstrategy","vector","Vector","source","style","key","value","get","undefined","regexp","RegExp","test","raster","Tile","BingMaps","imagerySet","Map","layers","target","document","getElementById","controls","util","attributionOptions","collapsible","view","View","center","maxZoom","zoom"],"mappings":"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","file":"vector-osm.js","sourcesContent":["/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\nimport {inherits} from '../util.js';\nimport {extend} from '../array.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {pushParseAndPop, makeStructureNS} from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](http://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @constructor\n * @extends {module:ol/format/XMLFeature}\n * @api\n */\nconst OSMXML = function() {\n  XMLFeature.call(this);\n\n  /**\n   * @inheritDoc\n   */\n  this.dataProjection = getProjection('EPSG:4326');\n};\n\ninherits(OSMXML, XMLFeature);\n\n\n/**\n * @const\n * @type {Array.<null>}\n */\nconst NAMESPACE_URIS = [null];\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst WAY_PARSERS = makeStructureNS(\n  NAMESPACE_URIS, {\n    'nd': readNd,\n    'tag': readTag\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst PARSERS = makeStructureNS(\n  NAMESPACE_URIS, {\n    'node': readNode,\n    'way': readWay\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst NODE_PARSERS = makeStructureNS(\n  NAMESPACE_URIS, {\n    'tag': readTag\n  });\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n */\nfunction readNode(node, objectStack) {\n  const options = /** @type {module:ol/format/Feature~ReadOptions} */ (objectStack[0]);\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const id = node.getAttribute('id');\n  /** @type {module:ol/coordinate~Coordinate} */\n  const coordinates = [\n    parseFloat(node.getAttribute('lon')),\n    parseFloat(node.getAttribute('lat'))\n  ];\n  state.nodes[id] = coordinates;\n\n  const values = pushParseAndPop({\n    tags: {}\n  }, NODE_PARSERS, node, objectStack);\n  if (!isEmpty(values.tags)) {\n    const geometry = new Point(coordinates);\n    transformWithOptions(geometry, false, options);\n    const feature = new Feature(geometry);\n    feature.setId(id);\n    feature.setProperties(values.tags);\n    state.features.push(feature);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n */\nfunction readWay(node, objectStack) {\n  const id = node.getAttribute('id');\n  const values = pushParseAndPop({\n    id: id,\n    ndrefs: [],\n    tags: {}\n  }, WAY_PARSERS, node, objectStack);\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  state.ways.push(values);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n */\nfunction readNd(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.ndrefs.push(node.getAttribute('ref'));\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n */\nfunction readTag(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\n\n\n/**\n * Read all features from an OSM source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\nOSMXML.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nOSMXML.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const options = this.getReadOptions(node, opt_options);\n  if (node.localName == 'osm') {\n    const state = pushParseAndPop({\n      nodes: {},\n      ways: [],\n      features: []\n    }, PARSERS, node, [options]);\n    // parse nodes in ways\n    for (let j = 0; j < state.ways.length; j++) {\n      const values = /** @type {Object} */ (state.ways[j]);\n      /** @type {Array.<number>} */\n      const flatCoordinates = [];\n      for (let i = 0, ii = values.ndrefs.length; i < ii; i++) {\n        const point = state.nodes[values.ndrefs[i]];\n        extend(flatCoordinates, point);\n      }\n      let geometry;\n      if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n        // closed way\n        geometry = new Polygon(null);\n        geometry.setFlatCoordinates(GeometryLayout.XY, flatCoordinates,\n          [flatCoordinates.length]);\n      } else {\n        geometry = new LineString(null);\n        geometry.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n      }\n      transformWithOptions(geometry, false, options);\n      const feature = new Feature(geometry);\n      feature.setId(values.id);\n      feature.setProperties(values.tags);\n      state.features.push(feature);\n    }\n    if (state.features) {\n      return state.features;\n    }\n  }\n  return [];\n};\n\n\n/**\n * Read the projection from an OSM source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {module:ol/proj/Projection} Projection.\n * @api\n */\nOSMXML.prototype.readProjection;\n\n\n/**\n * Not implemented.\n * @inheritDoc\n */\nOSMXML.prototype.writeFeatureNode = function(feature, opt_options) {};\n\n\n/**\n * Not implemented.\n * @inheritDoc\n */\nOSMXML.prototype.writeFeaturesNode = function(features, opt_options) {};\n\n\n/**\n * Not implemented.\n * @inheritDoc\n */\nOSMXML.prototype.writeGeometryNode = function(geometry, opt_options) {};\nexport default OSMXML;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls} from '../src/ol/control.js';\nimport OSMXML from '../src/ol/format/OSMXML.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {bbox as bboxStrategy} from '../src/ol/loadingstrategy.js';\nimport {transformExtent} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\nlet map = null;\n\nconst styles = {\n  'amenity': {\n    'parking': new Style({\n      stroke: new Stroke({\n        color: 'rgba(170, 170, 170, 1.0)',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(170, 170, 170, 0.3)'\n      })\n    })\n  },\n  'building': {\n    '.*': new Style({\n      zIndex: 100,\n      stroke: new Stroke({\n        color: 'rgba(246, 99, 79, 1.0)',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(246, 99, 79, 0.3)'\n      })\n    })\n  },\n  'highway': {\n    'service': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 2\n      })\n    }),\n    '.*': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 3\n      })\n    })\n  },\n  'landuse': {\n    'forest|grass|allotments': new Style({\n      stroke: new Stroke({\n        color: 'rgba(140, 208, 95, 1.0)',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(140, 208, 95, 0.3)'\n      })\n    })\n  },\n  'natural': {\n    'tree': new Style({\n      image: new CircleStyle({\n        radius: 2,\n        fill: new Fill({\n          color: 'rgba(140, 208, 95, 1.0)'\n        }),\n        stroke: null\n      })\n    })\n  }\n};\n\nconst vectorSource = new VectorSource({\n  format: new OSMXML(),\n  loader: function(extent, resolution, projection) {\n    const epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n    const client = new XMLHttpRequest();\n    client.open('POST', 'https://overpass-api.de/api/interpreter');\n    client.addEventListener('load', function() {\n      const features = new OSMXML().readFeatures(client.responseText, {\n        featureProjection: map.getView().getProjection()\n      });\n      vectorSource.addFeatures(features);\n    });\n    const query = '(node(' +\n        epsg4326Extent[1] + ',' + epsg4326Extent[0] + ',' +\n        epsg4326Extent[3] + ',' + epsg4326Extent[2] +\n        ');rel(bn)->.foo;way(bn);node(w)->.foo;rel(bw););out meta;';\n    client.send(query);\n  },\n  strategy: bboxStrategy\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function(feature) {\n    for (const key in styles) {\n      const value = feature.get(key);\n      if (value !== undefined) {\n        for (const regexp in styles[key]) {\n          if (new RegExp(regexp).test(value)) {\n            return styles[key][regexp];\n          }\n        }\n      }\n    }\n    return null;\n  }\n});\n\nconst raster = new TileLayer({\n  source: new BingMaps({\n    imagerySet: 'Aerial',\n    key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5'\n  })\n});\n\nmap = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  controls: defaultControls({\n    attributionOptions: {\n      collapsible: false\n    }\n  }),\n  view: new View({\n    center: [739218, 5906096],\n    maxZoom: 19,\n    zoom: 17\n  })\n});\n"],"sourceRoot":""}