{"version":3,"sources":["webpack:///../src/ol/control/ZoomSlider.js","webpack:///./zoomslider.js"],"names":["Direction","ZoomSlider","opt_options","const","options","this","currentResolution_","undefined","direction_","dragging_","heightLimit_","widthLimit_","previousX_","previousY_","thumbSize_","sliderInitialized_","duration_","duration","className","thumbElement","document","createElement","setAttribute","css","containerElement","appendChild","dragger_","PointerEventHandler","Object","events","pointer_EventType","POINTERDOWN","handleDraggerStart_","POINTERMOVE","handleDraggerDrag_","POINTERUP","handleDraggerEnd_","EventType","CLICK","handleContainerClick_","Event","Control","call","element","render","mapEvent","frameState","initSlider_","res","viewState","resolution","setThumbPosition_","util","prototype","disposeInternal","dispose","setMap","map","container","containerSize","offsetWidth","offsetHeight","thumb","firstElementChild","computedStyle","getComputedStyle","thumbWidth","parseFloat","thumbHeight","event","view","getMap","getView","relativePosition","getRelativePosition_","offsetX","offsetY","getResolutionForPosition_","animate","constrainResolution","easing","originalEvent","target","setHint","ViewHint","INTERACTING","clientX","clientY","deltaX","parseInt","style","left","deltaY","top","setResolution","position","getPositionForResolution_","x","y","let","amount","math","getResolutionForValueFunction","fn","getValueForResolutionFunction","control_ZoomSlider","createMap","divId","source","OSM","layer","Tile","Map","layers","View","center","zoom","zoomslider","addControl"],"mappings":"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","file":"zoomslider.js","sourcesContent":["/**\n * @module ol/control/ZoomSlider\n */\nimport {inherits} from '../util.js';\nimport ViewHint from '../ViewHint.js';\nimport Control from '../control/Control.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {easeOut} from '../easing.js';\nimport {listen} from '../events.js';\nimport {stopPropagation} from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {clamp} from '../math.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport PointerEventHandler from '../pointer/PointerEventHandler.js';\n\n\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nconst Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(module:ol/MapEvent)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @constructor\n * @extends {module:ol/control/Control}\n * @param {module:ol/control/ZoomSlider~Options=} opt_options Zoom slider options.\n * @api\n */\nconst ZoomSlider = function(opt_options) {\n\n  const options = opt_options ? opt_options : {};\n\n  /**\n   * Will hold the current resolution of the view.\n   *\n   * @type {number|undefined}\n   * @private\n   */\n  this.currentResolution_ = undefined;\n\n  /**\n   * The direction of the slider. Will be determined from actual display of the\n   * container and defaults to Direction.VERTICAL.\n   *\n   * @type {Direction}\n   * @private\n   */\n  this.direction_ = Direction.VERTICAL;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.dragging_;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.heightLimit_ = 0;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.widthLimit_ = 0;\n\n  /**\n   * @type {number|undefined}\n   * @private\n   */\n  this.previousX_;\n\n  /**\n   * @type {number|undefined}\n   * @private\n   */\n  this.previousY_;\n\n  /**\n   * The calculated thumb size (border box plus margins).  Set when initSlider_\n   * is called.\n   * @type {module:ol/size~Size}\n   * @private\n   */\n  this.thumbSize_ = null;\n\n  /**\n   * Whether the slider is initialized.\n   * @type {boolean}\n   * @private\n   */\n  this.sliderInitialized_ = false;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.duration_ = options.duration !== undefined ? options.duration : 200;\n\n  const className = options.className !== undefined ? options.className : 'ol-zoomslider';\n  const thumbElement = document.createElement('button');\n  thumbElement.setAttribute('type', 'button');\n  thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n  const containerElement = document.createElement('div');\n  containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n  containerElement.appendChild(thumbElement);\n  /**\n   * @type {module:ol/pointer/PointerEventHandler}\n   * @private\n   */\n  this.dragger_ = new PointerEventHandler(containerElement);\n\n  listen(this.dragger_, PointerEventType.POINTERDOWN,\n    this.handleDraggerStart_, this);\n  listen(this.dragger_, PointerEventType.POINTERMOVE,\n    this.handleDraggerDrag_, this);\n  listen(this.dragger_, PointerEventType.POINTERUP,\n    this.handleDraggerEnd_, this);\n\n  listen(containerElement, EventType.CLICK, this.handleContainerClick_, this);\n  listen(thumbElement, EventType.CLICK, stopPropagation);\n\n  Control.call(this, {\n    element: containerElement,\n    render: options.render || render\n  });\n};\n\ninherits(ZoomSlider, Control);\n\n\n/**\n * @inheritDoc\n */\nZoomSlider.prototype.disposeInternal = function() {\n  this.dragger_.dispose();\n  Control.prototype.disposeInternal.call(this);\n};\n\n\n/**\n * @inheritDoc\n */\nZoomSlider.prototype.setMap = function(map) {\n  Control.prototype.setMap.call(this, map);\n  if (map) {\n    map.render();\n  }\n};\n\n\n/**\n * Initializes the slider element. This will determine and set this controls\n * direction_ and also constrain the dragging of the thumb to always be within\n * the bounds of the container.\n *\n * @private\n */\nZoomSlider.prototype.initSlider_ = function() {\n  const container = this.element;\n  const containerSize = {\n    width: container.offsetWidth, height: container.offsetHeight\n  };\n\n  const thumb = container.firstElementChild;\n  const computedStyle = getComputedStyle(thumb);\n  const thumbWidth = thumb.offsetWidth +\n      parseFloat(computedStyle['marginRight']) +\n      parseFloat(computedStyle['marginLeft']);\n  const thumbHeight = thumb.offsetHeight +\n      parseFloat(computedStyle['marginTop']) +\n      parseFloat(computedStyle['marginBottom']);\n  this.thumbSize_ = [thumbWidth, thumbHeight];\n\n  if (containerSize.width > containerSize.height) {\n    this.direction_ = Direction.HORIZONTAL;\n    this.widthLimit_ = containerSize.width - thumbWidth;\n  } else {\n    this.direction_ = Direction.VERTICAL;\n    this.heightLimit_ = containerSize.height - thumbHeight;\n  }\n  this.sliderInitialized_ = true;\n};\n\n\n/**\n * Update the zoomslider element.\n * @param {module:ol/MapEvent} mapEvent Map event.\n * @this {module:ol/control/ZoomSlider}\n * @api\n */\nexport function render(mapEvent) {\n  if (!mapEvent.frameState) {\n    return;\n  }\n  if (!this.sliderInitialized_) {\n    this.initSlider_();\n  }\n  const res = mapEvent.frameState.viewState.resolution;\n  if (res !== this.currentResolution_) {\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n  }\n}\n\n\n/**\n * @param {Event} event The browser event to handle.\n * @private\n */\nZoomSlider.prototype.handleContainerClick_ = function(event) {\n  const view = this.getMap().getView();\n\n  const relativePosition = this.getRelativePosition_(\n    event.offsetX - this.thumbSize_[0] / 2,\n    event.offsetY - this.thumbSize_[1] / 2);\n\n  const resolution = this.getResolutionForPosition_(relativePosition);\n\n  view.animate({\n    resolution: view.constrainResolution(resolution),\n    duration: this.duration_,\n    easing: easeOut\n  });\n};\n\n\n/**\n * Handle dragger start events.\n * @param {module:ol/pointer/PointerEvent} event The drag event.\n * @private\n */\nZoomSlider.prototype.handleDraggerStart_ = function(event) {\n  if (!this.dragging_ && event.originalEvent.target === this.element.firstElementChild) {\n    this.getMap().getView().setHint(ViewHint.INTERACTING, 1);\n    this.previousX_ = event.clientX;\n    this.previousY_ = event.clientY;\n    this.dragging_ = true;\n  }\n};\n\n\n/**\n * Handle dragger drag events.\n *\n * @param {module:ol/pointer/PointerEvent|Event} event The drag event.\n * @private\n */\nZoomSlider.prototype.handleDraggerDrag_ = function(event) {\n  if (this.dragging_) {\n    const element = this.element.firstElementChild;\n    const deltaX = event.clientX - this.previousX_ + parseInt(element.style.left, 10);\n    const deltaY = event.clientY - this.previousY_ + parseInt(element.style.top, 10);\n    const relativePosition = this.getRelativePosition_(deltaX, deltaY);\n    this.currentResolution_ = this.getResolutionForPosition_(relativePosition);\n    this.getMap().getView().setResolution(this.currentResolution_);\n    this.setThumbPosition_(this.currentResolution_);\n    this.previousX_ = event.clientX;\n    this.previousY_ = event.clientY;\n  }\n};\n\n\n/**\n * Handle dragger end events.\n * @param {module:ol/pointer/PointerEvent|Event} event The drag event.\n * @private\n */\nZoomSlider.prototype.handleDraggerEnd_ = function(event) {\n  if (this.dragging_) {\n    const view = this.getMap().getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n\n    view.animate({\n      resolution: view.constrainResolution(this.currentResolution_),\n      duration: this.duration_,\n      easing: easeOut\n    });\n\n    this.dragging_ = false;\n    this.previousX_ = undefined;\n    this.previousY_ = undefined;\n  }\n};\n\n\n/**\n * Positions the thumb inside its container according to the given resolution.\n *\n * @param {number} res The res.\n * @private\n */\nZoomSlider.prototype.setThumbPosition_ = function(res) {\n  const position = this.getPositionForResolution_(res);\n  const thumb = this.element.firstElementChild;\n\n  if (this.direction_ == Direction.HORIZONTAL) {\n    thumb.style.left = this.widthLimit_ * position + 'px';\n  } else {\n    thumb.style.top = this.heightLimit_ * position + 'px';\n  }\n};\n\n\n/**\n * Calculates the relative position of the thumb given x and y offsets.  The\n * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n * in pixel units within the dragger limits.\n *\n * @param {number} x Pixel position relative to the left of the slider.\n * @param {number} y Pixel position relative to the top of the slider.\n * @return {number} The relative position of the thumb.\n * @private\n */\nZoomSlider.prototype.getRelativePosition_ = function(x, y) {\n  let amount;\n  if (this.direction_ === Direction.HORIZONTAL) {\n    amount = x / this.widthLimit_;\n  } else {\n    amount = y / this.heightLimit_;\n  }\n  return clamp(amount, 0, 1);\n};\n\n\n/**\n * Calculates the corresponding resolution of the thumb given its relative\n * position (where 0 is the minimum and 1 is the maximum).\n *\n * @param {number} position The relative position of the thumb.\n * @return {number} The corresponding resolution.\n * @private\n */\nZoomSlider.prototype.getResolutionForPosition_ = function(position) {\n  const fn = this.getMap().getView().getResolutionForValueFunction();\n  return fn(1 - position);\n};\n\n\n/**\n * Determines the relative position of the slider for the given resolution.  A\n * relative position of 0 corresponds to the minimum view resolution.  A\n * relative position of 1 corresponds to the maximum view resolution.\n *\n * @param {number} res The resolution.\n * @return {number} The relative position value (between 0 and 1).\n * @private\n */\nZoomSlider.prototype.getPositionForResolution_ = function(res) {\n  const fn = this.getMap().getView().getValueForResolutionFunction();\n  return 1 - fn(res);\n};\n\nexport default ZoomSlider;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {ZoomSlider} from '../src/ol/control.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport OSM from '../src/ol/source/OSM.js';\n\n\n/**\n * Helper method for map-creation.\n *\n * @param {string} divId The id of the div for the map.\n * @return {module:ol/PluggableMap} The map instance.\n */\nfunction createMap(divId) {\n  const source = new OSM();\n  const layer = new TileLayer({\n    source: source\n  });\n  const map = new Map({\n    layers: [layer],\n    target: divId,\n    view: new View({\n      center: [0, 0],\n      zoom: 2\n    })\n  });\n  const zoomslider = new ZoomSlider();\n  map.addControl(zoomslider);\n  return map;\n}\n\nconst map1 = createMap('map1');\nconst map2 = createMap('map2');\nconst map3 = createMap('map3');\n"],"sourceRoot":""}