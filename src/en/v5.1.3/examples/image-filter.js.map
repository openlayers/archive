{"version":3,"sources":["webpack:///./image-filter.js"],"names":["imagery","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_2__","source","_src_ol_source_BingMaps_js__WEBPACK_IMPORTED_MODULE_4__","key","imagerySet","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","Object","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_3__","zoom","kernels","none","sharpen","sharpenless","blur","shadow","emboss","edge","normalize","kernel","const","i","len","length","normal","Array","sum","normalized","select","document","getElementById","selectedKernel","value","onchange","render","on","event","context","canvas","width","height","size","Math","sqrt","half","floor","inputData","getImageData","data","output","createImageData","outputData","pixelY","pixelsAbove","pixelX","let","r","g","b","a","kernelY","kernelX","weight","neighborY","min","max","neighborX","inputIndex","outputIndex","putImageData","convolve"],"mappings":"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","file":"image-filter.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\n\nconst key = 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5';\n\nconst imagery = new TileLayer({\n  source: new BingMaps({key: key, imagerySet: 'Aerial'})\n});\n\nconst map = new Map({\n  layers: [imagery],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-120, 50]),\n    zoom: 6\n  })\n});\n\nconst kernels = {\n  none: [\n    0, 0, 0,\n    0, 1, 0,\n    0, 0, 0\n  ],\n  sharpen: [\n    0, -1, 0,\n    -1, 5, -1,\n    0, -1, 0\n  ],\n  sharpenless: [\n    0, -1, 0,\n    -1, 10, -1,\n    0, -1, 0\n  ],\n  blur: [\n    1, 1, 1,\n    1, 1, 1,\n    1, 1, 1\n  ],\n  shadow: [\n    1, 2, 1,\n    0, 1, 0,\n    -1, -2, -1\n  ],\n  emboss: [\n    -2, 1, 0,\n    -1, 1, 1,\n    0, 1, 2\n  ],\n  edge: [\n    0, 1, 0,\n    1, -4, 1,\n    0, 1, 0\n  ]\n};\n\nfunction normalize(kernel) {\n  const len = kernel.length;\n  const normal = new Array(len);\n  let i, sum = 0;\n  for (i = 0; i < len; ++i) {\n    sum += kernel[i];\n  }\n  if (sum <= 0) {\n    normal.normalized = false;\n    sum = 1;\n  } else {\n    normal.normalized = true;\n  }\n  for (i = 0; i < len; ++i) {\n    normal[i] = kernel[i] / sum;\n  }\n  return normal;\n}\n\nconst select = document.getElementById('kernel');\nlet selectedKernel = normalize(kernels[select.value]);\n\n\n/**\n * Update the kernel and re-render on change.\n */\nselect.onchange = function() {\n  selectedKernel = normalize(kernels[select.value]);\n  map.render();\n};\n\n\n/**\n * Apply a filter on \"postcompose\" events.\n */\nimagery.on('postcompose', function(event) {\n  convolve(event.context, selectedKernel);\n});\n\n\n/**\n * Apply a convolution kernel to canvas.  This works for any size kernel, but\n * performance starts degrading above 3 x 3.\n * @param {CanvasRenderingContext2D} context Canvas 2d context.\n * @param {Array.<number>} kernel Kernel.\n */\nfunction convolve(context, kernel) {\n  const canvas = context.canvas;\n  const width = canvas.width;\n  const height = canvas.height;\n\n  const size = Math.sqrt(kernel.length);\n  const half = Math.floor(size / 2);\n\n  const inputData = context.getImageData(0, 0, width, height).data;\n\n  const output = context.createImageData(width, height);\n  const outputData = output.data;\n\n  for (let pixelY = 0; pixelY < height; ++pixelY) {\n    const pixelsAbove = pixelY * width;\n    for (let pixelX = 0; pixelX < width; ++pixelX) {\n      let r = 0, g = 0, b = 0, a = 0;\n      for (let kernelY = 0; kernelY < size; ++kernelY) {\n        for (let kernelX = 0; kernelX < size; ++kernelX) {\n          const weight = kernel[kernelY * size + kernelX];\n          const neighborY = Math.min(\n            height - 1, Math.max(0, pixelY + kernelY - half));\n          const neighborX = Math.min(\n            width - 1, Math.max(0, pixelX + kernelX - half));\n          const inputIndex = (neighborY * width + neighborX) * 4;\n          r += inputData[inputIndex] * weight;\n          g += inputData[inputIndex + 1] * weight;\n          b += inputData[inputIndex + 2] * weight;\n          a += inputData[inputIndex + 3] * weight;\n        }\n      }\n      const outputIndex = (pixelsAbove + pixelX) * 4;\n      outputData[outputIndex] = r;\n      outputData[outputIndex + 1] = g;\n      outputData[outputIndex + 2] = b;\n      outputData[outputIndex + 3] = kernel.normalized ? a : 255;\n    }\n  }\n  context.putImageData(output, 0, 0);\n}\n"],"sourceRoot":""}