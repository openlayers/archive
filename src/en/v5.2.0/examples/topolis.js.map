{"version":3,"sources":["webpack:///./topolis.js"],"names":["raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_8__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_10__","nodes","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_11__","wrapX","nodesLayer","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_9__","style","f","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_12__","image","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","radius","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_14__","color","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_15__","width","text","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_16__","get","id","toString","edges","edgesLayer","faces","facesLayer","font","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","center","zoom","topo","topolis","createTopology","removeElementFeature","element","const","feature","getFeatureById","removeFeature","createNode","coord","let","existingEdge","getEdgeByPoint","modEdgeSplit","addIsoNode","on","node","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","geometry","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_4__","coordinate","setId","addFeature","e","edge","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_3__","coordinates","setGeometry","face","getFaceGeometry","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_5__","draw","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_6__","type","start","end","edgeGeom","getGeometry","getCoordinates","startCoord","endCoord","length","getNodeByPoint","edgesAtStart","edgesAtEnd","crossing","getEdgesByLine","remEdgeNewFace","removeIsoNode","addEdgeNewFaces","toastr","warning","addInteraction","snap","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_7__","addControl","_src_ol_control_MousePosition_js__WEBPACK_IMPORTED_MODULE_17__"],"mappings":"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","file":"topolis.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Point, LineString, Polygon} from '../src/ol/geom.js';\nimport {Draw, Snap} from '../src/ol/interaction.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Fill, Circle as CircleStyle, Stroke, Style, Text} from '../src/ol/style.js';\nimport MousePosition from '../src/ol/control/MousePosition.js';\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst nodes = new VectorSource({wrapX: false});\nconst nodesLayer = new VectorLayer({\n  source: nodes,\n  style: function(f) {\n    const style = new Style({\n      image: new CircleStyle({\n        radius: 8,\n        fill: new Fill({color: 'rgba(255, 0, 0, 0.2)'}),\n        stroke: new Stroke({color: 'red', width: 1})\n      }),\n      text: new Text({\n        text: f.get('node').id.toString(),\n        fill: new Fill({color: 'red'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 3\n        })\n      })\n    });\n    return [style];\n  }\n});\n\nconst edges = new VectorSource({wrapX: false});\nconst edgesLayer = new VectorLayer({\n  source: edges,\n  style: function(f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'blue',\n        width: 1\n      }),\n      text: new Text({\n        text: f.get('edge').id.toString(),\n        fill: new Fill({color: 'blue'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    });\n    return [style];\n  }\n});\n\nconst faces = new VectorSource({wrapX: false});\nconst facesLayer = new VectorLayer({\n  source: faces,\n  style: function(f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(0, 255, 0, 0.2)'\n      }),\n      text: new Text({\n        font: 'bold 12px sans-serif',\n        text: f.get('face').id.toString(),\n        fill: new Fill({color: 'green'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    });\n    return [style];\n  }\n});\n\nconst map = new Map({\n  layers: [raster, facesLayer, edgesLayer, nodesLayer],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 16\n  })\n});\n\nconst topo = topolis.createTopology();\n\ntopo.on('addnode', nodeToFeature);\ntopo.on('removenode', function(e) {\n  removeElementFeature(nodes, e);\n});\ntopo.on('addedge', edgeToFeature);\ntopo.on('modedge', function(e) {\n  const feature = edges.getFeatureById(e.id);\n  feature.setGeometry(new LineString(e.coordinates));\n});\ntopo.on('removeedge', function(e) {\n  removeElementFeature(edges, e);\n});\ntopo.on('addface', faceToFeature);\ntopo.on('removeface', function(e) {\n  removeElementFeature(faces, e);\n});\n\nfunction removeElementFeature(source, element) {\n  const feature = source.getFeatureById(element.id);\n  source.removeFeature(feature);\n}\n\nfunction nodeToFeature(node) {\n  const feature = new Feature({\n    geometry: new Point(node.coordinate),\n    node: node\n  });\n  feature.setId(node.id);\n  nodes.addFeature(feature);\n}\n\nfunction edgeToFeature(edge) {\n  const feature = new Feature({\n    geometry: new LineString(edge.coordinates),\n    edge: edge\n  });\n  feature.setId(edge.id);\n  edges.addFeature(feature);\n}\n\nfunction faceToFeature(face) {\n  const coordinates = topo.getFaceGeometry(face);\n  const feature = new Feature({\n    geometry: new Polygon(coordinates),\n    face: face\n  });\n  feature.setId(face.id);\n  faces.addFeature(feature);\n}\n\nfunction createNode(topo, coord) {\n  let node;\n  const existingEdge = topo.getEdgeByPoint(coord, 5)[0];\n  if (existingEdge) {\n    node = topo.modEdgeSplit(existingEdge, coord);\n  } else {\n    node = topo.addIsoNode(coord);\n  }\n  return node;\n}\n\nfunction onDrawend(e) {\n  const edgeGeom = e.feature.getGeometry().getCoordinates();\n  const startCoord = edgeGeom[0];\n  const endCoord = edgeGeom[edgeGeom.length - 1];\n  let start, end;\n  try {\n    start = topo.getNodeByPoint(startCoord);\n    end = topo.getNodeByPoint(endCoord);\n    const edgesAtStart = topo.getEdgeByPoint(startCoord, 5);\n    const edgesAtEnd = topo.getEdgeByPoint(endCoord, 5);\n    const crossing = topo.getEdgesByLine(edgeGeom);\n    if (crossing.length === 1 && !start && !end && edgesAtStart.length === 0 && edgesAtEnd.length === 0) {\n      topo.remEdgeNewFace(crossing[0]);\n      start = crossing[0].start;\n      if (start.face) {\n        topo.removeIsoNode(start);\n      }\n      end = crossing[0].end;\n      if (end.face) {\n        topo.removeIsoNode(end);\n      }\n      return;\n    }\n    if (!start) {\n      start = createNode(topo, startCoord);\n      edgeGeom[0] = start.coordinate;\n    }\n    if (!end) {\n      end = createNode(topo, endCoord);\n      edgeGeom[edgeGeom.length - 1] = end.coordinate;\n    }\n    topo.addEdgeNewFaces(start, end, edgeGeom);\n  } catch (e) {\n    toastr.warning(e.toString());\n  }\n}\n\nconst draw = new Draw({\n  type: 'LineString'\n});\ndraw.on('drawend', onDrawend);\nmap.addInteraction(draw);\nconst snap = new Snap({\n  source: edges\n});\nmap.addInteraction(snap);\nmap.addControl(new MousePosition());\n"],"sourceRoot":""}