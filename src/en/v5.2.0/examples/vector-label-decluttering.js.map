{"version":3,"sources":["webpack:///./vector-label-decluttering.js"],"names":["map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","labelStyle","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","geometry","feature","let","getGeometry","getType","const","polygons","getPolygons","widest","i","ii","length","polygon","width","Object","_src_ol_extent_js__WEBPACK_IMPORTED_MODULE_2__","getExtent","text","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","font","overflow","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","color","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","style","vectorLayer","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__","source","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_5__","url","format","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_3__","getText","setText","get","declutter","addLayer"],"mappings":"oLAQMA,EAAM,IAAIC,EAAA,GACdC,OAAQ,MACRC,KAAM,IAAIC,EAAA,GACRC,QAAS,EAAG,GACZC,KAAM,MAIJC,EAAa,IAAIC,EAAA,GACrBC,SAAU,SAASC,GACjBC,IAAIF,EAAWC,EAAQE,cACvB,GAA0B,gBAAtBH,EAASI,UAIX,IAFAC,IAAMC,EAAWN,EAASO,cACtBC,EAAS,EACJC,EAAI,EAAGC,EAAKJ,EAASK,OAAQF,EAAIC,IAAMD,EAAG,CACjDJ,IAAMO,EAAUN,EAASG,GACnBI,EAAQC,OAAAC,EAAA,EAAAD,CAASF,EAAQI,aAC3BH,EAAQL,IACVA,EAASK,EACTb,EAAWY,GAIjB,OAAOZ,GAETiB,KAAM,IAAIC,EAAA,GACRC,KAAM,0BACNC,UAAU,EACVC,KAAM,IAAIC,EAAA,GACRC,MAAO,SAETC,OAAQ,IAAIC,EAAA,GACVF,MAAO,OACPV,MAAO,QAaPa,GATe,IAAI3B,EAAA,GACvBsB,KAAM,IAAIC,EAAA,GACRC,MAAO,6BAETC,OAAQ,IAAIC,EAAA,GACVF,MAAO,UACPV,MAAO,MAGkBf,GAEvB6B,EAAc,IAAIC,EAAA,GACtBC,OAAQ,IAAIC,EAAA,GACVC,IAAK,iCACLC,OAAQ,IAAIC,EAAA,IAEdP,MAAO,SAASzB,GAEd,OADAH,EAAWoC,UAAUC,QAAQlC,EAAQmC,IAAI,SAClCV,GAETW,WAAW,IAGb9C,EAAI+C,SAASX","file":"vector-label-decluttering.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {getWidth} from '../src/ol/extent.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Fill, Stroke, Style, Text} from '../src/ol/style.js';\n\nconst map = new Map({\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 1\n  })\n});\n\nconst labelStyle = new Style({\n  geometry: function(feature) {\n    let geometry = feature.getGeometry();\n    if (geometry.getType() == 'MultiPolygon') {\n      // Only render label for the widest polygon of a multipolygon\n      const polygons = geometry.getPolygons();\n      let widest = 0;\n      for (let i = 0, ii = polygons.length; i < ii; ++i) {\n        const polygon = polygons[i];\n        const width = getWidth(polygon.getExtent());\n        if (width > widest) {\n          widest = width;\n          geometry = polygon;\n        }\n      }\n    }\n    return geometry;\n  },\n  text: new Text({\n    font: '12px Calibri,sans-serif',\n    overflow: true,\n    fill: new Fill({\n      color: '#000'\n    }),\n    stroke: new Stroke({\n      color: '#fff',\n      width: 3\n    })\n  })\n});\nconst countryStyle = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.6)'\n  }),\n  stroke: new Stroke({\n    color: '#319FD3',\n    width: 1\n  })\n});\nconst style = [countryStyle, labelStyle];\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/countries.geojson',\n    format: new GeoJSON()\n  }),\n  style: function(feature) {\n    labelStyle.getText().setText(feature.get('name'));\n    return style;\n  },\n  declutter: true\n});\n\nmap.addLayer(vectorLayer);\n"],"sourceRoot":""}