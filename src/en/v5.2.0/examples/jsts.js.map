{"version":3,"sources":["webpack:///./jsts.js"],"names":["source","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_7__","fetch","then","response","json","const","features","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_2__","readFeatures","featureProjection","parser","jsts","io","OL3Parser","inject","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_geom_LinearRing_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_11__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_12__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_13__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_14__","let","i","length","feature","buffered","read","getGeometry","buffer","setGeometry","write","addFeatures","vectorLayer","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","rasterLayer","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_OSM_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","document","getElementById","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","Object","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_5__","zoom"],"mappings":"0NAUMA,EAAS,IAAIC,EAAA,EACnBC,MAAM,oCAAoCC,KAAK,SAASC,GACtD,OAAOA,EAASC,SACfF,KAAK,SAASE,GACfC,IACMC,GADS,IAAIC,EAAA,GACKC,aAAaJ,GAAOK,kBAAmB,cAEzDC,EAAS,IAAIC,KAAKC,GAAGC,UAC3BH,EAAOI,OAAOC,EAAA,EAAOC,EAAA,EAAYC,EAAA,EAAYC,EAAA,EAASC,EAAA,EAAYC,EAAA,EAAiBC,EAAA,GAEnF,IAAKC,IAAIC,EAAI,EAAGA,EAAIjB,EAASkB,OAAQD,IAAK,CACxClB,IAAMoB,EAAUnB,EAASiB,GAKnBG,EAHWhB,EAAOiB,KAAKF,EAAQG,eAGXC,OAAO,IAGjCJ,EAAQK,YAAYpB,EAAOqB,MAAML,IAGnC3B,EAAOiC,YAAY1B,KAErBD,IAAM4B,EAAc,IAAIC,EAAA,GACtBnC,OAAQA,IAGJoC,EAAc,IAAIC,EAAA,GACtBrC,OAAQ,IAAIsC,EAAA,IAGF,IAAIC,EAAA,GACdC,QAASJ,EAAaF,GACtBO,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAIC,EAAA,GACRC,OAAQC,OAAAC,EAAA,EAAAD,EAAY,WAAY,YAChCE,KAAM","file":"jsts.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport LinearRing from '../src/ol/geom/LinearRing.js';\nimport {Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon} from '../src/ol/geom.js';\n\nconst source = new VectorSource();\nfetch('data/geojson/roads-seoul.geojson').then(function(response) {\n  return response.json();\n}).then(function(json) {\n  const format = new GeoJSON();\n  const features = format.readFeatures(json, {featureProjection: 'EPSG:3857'});\n\n  const parser = new jsts.io.OL3Parser();\n  parser.inject(Point, LineString, LinearRing, Polygon, MultiPoint, MultiLineString, MultiPolygon);\n\n  for (let i = 0; i < features.length; i++) {\n    const feature = features[i];\n    // convert the OpenLayers geometry to a JSTS geometry\n    const jstsGeom = parser.read(feature.getGeometry());\n\n    // create a buffer of 40 meters around each line\n    const buffered = jstsGeom.buffer(40);\n\n    // convert back from JSTS and replace the geometry on the feature\n    feature.setGeometry(parser.write(buffered));\n  }\n\n  source.addFeatures(features);\n});\nconst vectorLayer = new VectorLayer({\n  source: source\n});\n\nconst rasterLayer = new TileLayer({\n  source: new OSM()\n});\n\nconst map = new Map({\n  layers: [rasterLayer, vectorLayer],\n  target: document.getElementById('map'),\n  view: new View({\n    center: fromLonLat([126.979293, 37.528787]),\n    zoom: 15\n  })\n});\n"],"sourceRoot":""}