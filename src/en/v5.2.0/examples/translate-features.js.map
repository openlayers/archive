{"version":3,"sources":["webpack:///../src/ol/interaction/Translate.js","webpack:///./translate-features.js"],"names":["_interaction_Property_js__WEBPACK_IMPORTED_MODULE_7__","__webpack_require__","TranslateEventType","TRANSLATESTART","TRANSLATING","TRANSLATEEND","TranslateEvent","Event","type","features","coordinate","super","this","prototype","constructor","_events_Event_js__WEBPACK_IMPORTED_MODULE_3__","Translate","PointerInteraction","opt_options","handleDownEvent","handleDragEvent","handleMoveEvent","handleUpEvent","const","layerFilter","options","lastCoordinate_","features_","undefined","layers","layer","Object","_array_js__WEBPACK_IMPORTED_MODULE_5__","_functions_js__WEBPACK_IMPORTED_MODULE_4__","layerFilter_","hitTolerance_","hitTolerance","lastFeature_","_events_js__WEBPACK_IMPORTED_MODULE_2__","_Object_js__WEBPACK_IMPORTED_MODULE_1__","ACTIVE","handleActiveChanged_","featuresAtPixel_","pixel","map","forEachFeatureAtPixel","feature","getArray","bind","getHitTolerance","setHitTolerance","setMap","oldMap","getMap","call","updateState_","let","active","getActive","getViewport","classList","remove","_interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_6__","event","_Collection_js__WEBPACK_IMPORTED_MODULE_0__","dispatchEvent","newCoordinate","deltaX","deltaY","forEach","geom","getGeometry","translate","setGeometry","elem","add","__webpack_exports__","raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_6__","source","_src_ol_source_OSM_js__WEBPACK_IMPORTED_MODULE_8__","vector","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_9__","url","format","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_2__","select","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_4__","getFeatures","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","interactions","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_5__","extend","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom"],"mappings":"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","file":"translate-features.js","sourcesContent":["/**\n * @module ol/interaction/Translate\n */\nimport Collection from '../Collection.js';\nimport {getChangeEventType} from '../Object.js';\nimport {listen} from '../events.js';\nimport Event from '../events/Event.js';\nimport {TRUE} from '../functions.js';\nimport {includes} from '../array.js';\nimport PointerInteraction from '../interaction/Pointer.js';\nimport InteractionProperty from '../interaction/Property.js';\n\n\n/**\n * @enum {string}\n */\nconst TranslateEventType = {\n  /**\n   * Triggered upon feature translation start.\n   * @event TranslateEvent#translatestart\n   * @api\n   */\n  TRANSLATESTART: 'translatestart',\n  /**\n   * Triggered upon feature translation.\n   * @event TranslateEvent#translating\n   * @api\n   */\n  TRANSLATING: 'translating',\n  /**\n   * Triggered upon feature translation end.\n   * @event TranslateEvent#translateend\n   * @api\n   */\n  TRANSLATEEND: 'translateend'\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/Collection<module:ol/Feature>} [features] Only features contained in this collection will be able to be translated. If\n * not specified, all features on the map will be able to be translated.\n * @property {Array<module:ol/layer/Layer>|function(module:ol/layer/Layer): boolean} [layers] A list of layers from which features should be\n * translated. Alternatively, a filter function can be provided. The\n * function will be called for each layer in the map and should return\n * `true` for layers that you want to be translatable. If the option is\n * absent, all visible layers will be considered translatable.\n * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position\n * will be checked for features. This only works for the canvas renderer and\n * not for WebGL.\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Translate~Translate} instances\n * are instances of this type.\n */\nexport class TranslateEvent extends Event {\n  /**\n   * @param {module:ol/interaction/Translate~TranslateEventType} type Type.\n   * @param {module:ol/Collection<module:ol/Feature>} features The features translated.\n   * @param {module:ol/coordinate~Coordinate} coordinate The event coordinate.\n   */\n  constructor(type, features, coordinate) {\n\n    super(type);\n\n    /**\n     * The features being translated.\n     * @type {module:ol/Collection<module:ol/Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {module:ol/coordinate~Coordinate}\n     * @api\n     */\n    this.coordinate = coordinate;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Interaction for translating (moving) features.\n *\n * @fires module:ol/interaction/Translate~TranslateEvent\n * @api\n */\nclass Translate extends PointerInteraction {\n  /**\n   * @param {module:ol/interaction/Translate~Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    super({\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleMoveEvent: handleMoveEvent,\n      handleUpEvent: handleUpEvent\n    });\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * The last position we translated to.\n     * @type {module:ol/coordinate~Coordinate}\n     * @private\n     */\n    this.lastCoordinate_ = null;\n\n\n    /**\n     * @type {module:ol/Collection<module:ol/Feature>}\n     * @private\n     */\n    this.features_ = options.features !== undefined ? options.features : null;\n\n    /** @type {function(module:ol/layer/Layer): boolean} */\n    let layerFilter;\n    if (options.layers) {\n      if (typeof options.layers === 'function') {\n        layerFilter = options.layers;\n      } else {\n        const layers = options.layers;\n        layerFilter = function(layer) {\n          return includes(layers, layer);\n        };\n      }\n    } else {\n      layerFilter = TRUE;\n    }\n\n    /**\n     * @private\n     * @type {function(module:ol/layer/Layer): boolean}\n     */\n    this.layerFilter_ = layerFilter;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;\n\n    /**\n     * @type {module:ol/Feature}\n     * @private\n     */\n    this.lastFeature_ = null;\n\n    listen(this,\n      getChangeEventType(InteractionProperty.ACTIVE),\n      this.handleActiveChanged_, this);\n\n  }\n\n  /**\n   * Tests to see if the given coordinates intersects any of our selected\n   * features.\n   * @param {module:ol/pixel~Pixel} pixel Pixel coordinate to test for intersection.\n   * @param {module:ol/PluggableMap} map Map to test the intersection on.\n   * @return {module:ol/Feature} Returns the feature found at the specified pixel\n   * coordinates.\n   * @private\n   */\n  featuresAtPixel_(pixel, map) {\n    return map.forEachFeatureAtPixel(pixel,\n      function(feature) {\n        if (!this.features_ || includes(this.features_.getArray(), feature)) {\n          return feature;\n        }\n      }.bind(this), {\n        layerFilter: this.layerFilter_,\n        hitTolerance: this.hitTolerance_\n      });\n  }\n\n  /**\n   * Returns the Hit-detection tolerance.\n   * @returns {number} Hit tolerance in pixels.\n   * @api\n   */\n  getHitTolerance() {\n    return this.hitTolerance_;\n  }\n\n  /**\n   * Hit-detection tolerance. Pixels inside the radius around the given position\n   * will be checked for features. This only works for the canvas renderer and\n   * not for WebGL.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @api\n   */\n  setHitTolerance(hitTolerance) {\n    this.hitTolerance_ = hitTolerance;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    super.setMap(map);\n    this.updateState_(oldMap);\n  }\n\n  /**\n   * @private\n   */\n  handleActiveChanged_() {\n    this.updateState_(null);\n  }\n\n  /**\n   * @param {module:ol/PluggableMap} oldMap Old map.\n   * @private\n   */\n  updateState_(oldMap) {\n    let map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      map = map || oldMap;\n      if (map) {\n        const elem = map.getViewport();\n        elem.classList.remove('ol-grab', 'ol-grabbing');\n      }\n    }\n  }\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} event Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/Translate}\n */\nfunction handleDownEvent(event) {\n  this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);\n  if (!this.lastCoordinate_ && this.lastFeature_) {\n    this.lastCoordinate_ = event.coordinate;\n    handleMoveEvent.call(this, event);\n\n    const features = this.features_ || new Collection([this.lastFeature_]);\n\n    this.dispatchEvent(\n      new TranslateEvent(\n        TranslateEventType.TRANSLATESTART, features,\n        event.coordinate));\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} event Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Translate}\n */\nfunction handleUpEvent(event) {\n  if (this.lastCoordinate_) {\n    this.lastCoordinate_ = null;\n    handleMoveEvent.call(this, event);\n\n    const features = this.features_ || new Collection([this.lastFeature_]);\n\n    this.dispatchEvent(\n      new TranslateEvent(\n        TranslateEventType.TRANSLATEEND, features,\n        event.coordinate));\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} event Event.\n * @this {module:ol/interaction/Translate}\n */\nfunction handleDragEvent(event) {\n  if (this.lastCoordinate_) {\n    const newCoordinate = event.coordinate;\n    const deltaX = newCoordinate[0] - this.lastCoordinate_[0];\n    const deltaY = newCoordinate[1] - this.lastCoordinate_[1];\n\n    const features = this.features_ || new Collection([this.lastFeature_]);\n\n    features.forEach(function(feature) {\n      const geom = feature.getGeometry();\n      geom.translate(deltaX, deltaY);\n      feature.setGeometry(geom);\n    });\n\n    this.lastCoordinate_ = newCoordinate;\n    this.dispatchEvent(\n      new TranslateEvent(\n        TranslateEventType.TRANSLATING, features,\n        newCoordinate));\n  }\n}\n\n\n/**\n * @param {module:ol/MapBrowserEvent} event Event.\n * @this {module:ol/interaction/Translate}\n */\nfunction handleMoveEvent(event) {\n  const elem = event.map.getViewport();\n\n  // Change the cursor to grab/grabbing if hovering any of the features managed\n  // by the interaction\n  if (this.featuresAtPixel_(event.pixel, event.map)) {\n    elem.classList.remove(this.lastCoordinate_ ? 'ol-grab' : 'ol-grabbing');\n    elem.classList.add(this.lastCoordinate_ ? 'ol-grabbing' : 'ol-grab');\n  } else {\n    elem.classList.remove('ol-grab', 'ol-grabbing');\n  }\n}\n\n\nexport default Translate;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport {defaults as defaultInteractions, Select, Translate} from '../src/ol/interaction.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\n\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst vector = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/countries.geojson',\n    format: new GeoJSON()\n  })\n});\n\nconst select = new Select();\n\nconst translate = new Translate({\n  features: select.getFeatures()\n});\n\nconst map = new Map({\n  interactions: defaultInteractions().extend([select, translate]),\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n"],"sourceRoot":""}