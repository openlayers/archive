{"version":3,"sources":["webpack:///../src/ol/source/UTFGrid.js","webpack:///./utfgrid.js"],"names":["UTFGrid_CustomTile","Tile","CustomTile","tileCoord","state","src","extent","preemptive","jsonp","super","this","src_","extent_","preemptive_","grid_","keys_","data_","jsonp_","getImage","getData","coordinate","const","xRelative","yRelative","row","Math","floor","length","let","code","charCodeAt","data","id","forDataAtCoordinate","callback","opt_this","opt_request","TileState","IDLE","Object","events","EventType","CHANGE","e","call","loadInternal_","setTimeout","bind","getKey","handleError_","ERROR","changed","handleLoad_","json","grid","keys","EMPTY","LOADING","net","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","event","status","response","JSON","parse","responseText","err","load","ol_Tile","source_UTFGrid","TileSource","UTFGrid","options","projection","proj","State","undefined","tileUrlFunction_","tileurlfunction","template_","url","handleTileJSONResponse","handleTileJSONError","tileJSON","asserts","getTemplate","forDataAtCoordinateAndResolution","resolution","tileGrid","getTileCoordForCoordAndResolution","getTile","getProjection","setState","epsg4326Projection","sourceProjection","bounds","transform","ol_extent","minZoom","minzoom","maxZoom","maxzoom","tilegrid","template","grids","attribution","attributionExtent","getExtent","setAttributions","frameState","READY","z","x","y","pixelRatio","tileCoordKey","tilecoord","tileCache","containsKey","get","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","getTileCoordExtent","set","useTile","source_Tile","key","mapLayer","layer_Tile","source","TileJSON","gridSource","gridLayer","view","View","center","zoom","mapElement","document","getElementById","map","Map","layers","target","infoElement","flagElement","nameElement","infoOverlay","Overlay","element","offset","stopEvent","addOverlay","displayCountryInfo","viewResolution","getResolution","style","cursor","innerHTML","setPosition","on","evt","dragging","getEventCoordinate","originalEvent"],"mappings":"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","file":"utfgrid.js","sourcesContent":["/**\n * @module ol/source/UTFGrid\n */\n\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport {createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport {assert} from '../asserts.js';\nimport {listenOnce} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {jsonp as requestJSONP} from '../net.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport SourceState from '../source/State.js';\nimport TileSource from '../source/Tile.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\n\nexport class CustomTile extends Tile {\n\n  /**\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n   * @param {module:ol/TileState} state State.\n   * @param {string} src Image source URI.\n   * @param {module:ol/extent~Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {module:ol/extent~Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative = (coordinate[0] - this.extent_[0]) /\n        (this.extent_[2] - this.extent_[0]);\n    const yRelative = (coordinate[1] - this.extent_[1]) /\n        (this.extent_[3] - this.extent_[1]);\n\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n   * @param {function(this: T, *)} callback Callback.\n   * @param {T=} opt_this The object to use as `this` in the callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @template T\n   */\n  forDataAtCoordinate(coordinate, callback, opt_this, opt_request) {\n    if (this.state == TileState.IDLE && opt_request === true) {\n      listenOnce(this, EventType.CHANGE, function(e) {\n        callback.call(opt_this, this.getData(coordinate));\n      }, this);\n      this.loadInternal_();\n    } else {\n      if (opt_request === true) {\n        setTimeout(function() {\n          callback.call(opt_this, this.getData(coordinate));\n        }.bind(this), 0);\n      } else {\n        callback.call(opt_this, this.getData(coordinate));\n      }\n    }\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  getKey() {\n    return this.src_;\n  }\n\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json.grid;\n    this.keys_ = json.keys;\n    this.data_ = json.data;\n\n    this.state = TileState.EMPTY;\n    this.changed();\n  }\n\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(this.src_, this.handleLoad_.bind(this),\n          this.handleError_.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */(JSON.parse(client.responseText));\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n\n  /**\n   * @override\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    }\n  }\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false`, you need to pass `true` as `opt_request`\n * to the `forDataAtCoordinateAndResolution` method otherwise no data\n * will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {tileJSON} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n */\n\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {module:ol/source/UTFGrid~Options=} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: SourceState.LOADING\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = options.preemptive !== undefined ?\n      options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!module:ol/Tile~UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n\n  }\n\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {TileJSON} */(JSON.parse(client.responseText));\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*)} callback Callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(\n    coordinate, resolution, callback, opt_request) {\n    if (this.tileGrid) {\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndResolution(\n        coordinate, resolution);\n      const tile = /** @type {!module:ol/source/UTFGrid~CustomTile} */(this.getTile(\n        tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection()));\n      tile.forDataAtCoordinate(coordinate, callback, null, opt_request);\n    } else {\n      if (opt_request === true) {\n        setTimeout(function() {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState(SourceState.ERROR);\n  }\n\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {TileJSON} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON.bounds !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON.bounds, transform);\n    }\n\n    const minZoom = tileJSON.minzoom || 0;\n    const maxZoom = tileJSON.maxzoom || 22;\n    const tileGrid = createXYZ({\n      extent: extentFromProjection(sourceProjection),\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n\n    this.template_ = tileJSON.template;\n\n    const grids = tileJSON.grids;\n    if (!grids) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON.attribution !== undefined) {\n      const attributionExtent = extent !== undefined ?\n        extent : epsg4326Projection.getExtent();\n\n      this.setAttributions(function(frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON.attribution];\n        }\n        return null;\n      });\n    }\n\n    this.setState(SourceState.READY);\n\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return (\n        /** @type {!module:ol/Tile} */ (this.tileCache.get(tileCoordKey))\n      );\n    } else {\n      const tileCoord = [z, x, y];\n      const urlTileCoord =\n          this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n      const tile = new CustomTile(\n        tileCoord,\n        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n        tileUrl !== undefined ? tileUrl : '',\n        this.tileGrid.getTileCoordExtent(tileCoord),\n        this.preemptive_,\n        this.jsonp_);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\n\nexport default UTFGrid;\n","import Map from '../src/ol/Map.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport TileJSON from '../src/ol/source/TileJSON.js';\nimport UTFGrid from '../src/ol/source/UTFGrid.js';\n\nconst key = 'pk.eyJ1IjoiYWhvY2V2YXIiLCJhIjoiY2pzbmg0Nmk5MGF5NzQzbzRnbDNoeHJrbiJ9.7_-_gL8ur7ZtEiNwRfCy7Q';\n\nconst mapLayer = new TileLayer({\n  source: new TileJSON({\n    url: 'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' + key\n  })\n});\n\n\nconst gridSource = new UTFGrid({\n  url: 'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' + key\n});\n\nconst gridLayer = new TileLayer({source: gridSource});\n\nconst view = new View({\n  center: [0, 0],\n  zoom: 1\n});\n\nconst mapElement = document.getElementById('map');\nconst map = new Map({\n  layers: [mapLayer, gridLayer],\n  target: mapElement,\n  view: view\n});\n\nconst infoElement = document.getElementById('country-info');\nconst flagElement = document.getElementById('country-flag');\nconst nameElement = document.getElementById('country-name');\n\nconst infoOverlay = new Overlay({\n  element: infoElement,\n  offset: [15, 15],\n  stopEvent: false\n});\nmap.addOverlay(infoOverlay);\n\nconst displayCountryInfo = function(coordinate) {\n  const viewResolution = /** @type {number} */ (view.getResolution());\n  gridSource.forDataAtCoordinateAndResolution(coordinate, viewResolution,\n    function(data) {\n      // If you want to use the template from the TileJSON,\n      //  load the mustache.js library separately and call\n      //  info.innerHTML = Mustache.render(gridSource.getTemplate(), data);\n      mapElement.style.cursor = data ? 'pointer' : '';\n      if (data) {\n        flagElement.src = 'data:image/png;base64,' + data['flag_png'];\n        nameElement.innerHTML = data['admin'];\n      }\n      infoOverlay.setPosition(data ? coordinate : undefined);\n    });\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displayCountryInfo(coordinate);\n});\n\nmap.on('click', function(evt) {\n  displayCountryInfo(evt.coordinate);\n});\n"],"sourceRoot":""}