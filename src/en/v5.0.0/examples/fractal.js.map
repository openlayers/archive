{"version":3,"sources":["webpack:///./fractal.js"],"names":["cos30","Math","cos","PI","rise","sin","run","triangle","_src_ol_geom_LineString_js__WEBPACK_IMPORTED_MODULE_3__","feature","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","layer","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__","source","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_5__","features","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","center","zoom","injectNodes","startNode","endNode","next","start","point","end","dx","dy","firstNode","r","sqrt","a","atan2","secondNode","thirdNode","depthInput","document","getElementById","update","depth","geometry","clone","graph","coordinates","length","level","node","coordsToGraph","getCoordinates","i","graphToCoords","innerHTML","setCoordinates","setGeometry","makeFractal","Number","value","updateTimer","onchange","window","clearTimeout","setTimeout"],"mappings":"qJAOA,MACAA,EAAAC,KAAAC,IAAAD,KAAAE,GAAA,GAEAC,EAHA,IAEAH,KAAAI,IAAAJ,KAAAE,GAAA,GAEAG,EAJA,IAIAN,EAEAO,EAAA,IAAAC,EAAA,IACA,EAPA,MAOAF,GAAAF,KAAAE,GAAAF,IAAA,EAPA,OAUAK,EAAA,IAAAC,EAAA,EAAAH,GAEAI,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAC,UAAAN,OAIA,IAAAO,EAAA,GACAC,QAAAN,GACAO,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,QAAA,KACAC,KAAA,MAqBA,SAAAC,EAAAC,GACA,MAAAC,EAAAD,EAAAE,KAEAC,EAAAH,EAAAI,MACAC,EAAAL,EAAAE,KAAAE,MACAE,EAAAD,EAAA,GAAAF,EAAA,GACAI,EAAAF,EAAA,GAAAF,EAAA,GAGAK,GACAJ,OAAAD,EAAA,GAAAG,EAAA,EAAAH,EAAA,GAAAI,EAAA,IAIAE,EAAAhC,KAAAiC,KAAAJ,IAAAC,MAAA,EAAA/B,GACAmC,EAAAlC,KAAAmC,MAAAL,EAAAD,GAAA7B,KAAAE,GAAA,EACAkC,GACAT,OAAAD,EAAA,GAAAM,EAAAhC,KAAAC,IAAAiC,GAAAR,EAAA,GAAAM,EAAAhC,KAAAI,IAAA8B,KAIAG,GACAV,OAAAC,EAAA,GAAAC,EAAA,EAAAD,EAAA,GAAAE,EAAA,IAGAP,EAAAE,KAAAM,EACAA,EAAAN,KAAAW,EACAA,EAAAX,KAAAY,EACAA,EAAAZ,KAAAD,EA0BA,MAAAc,EAAAC,SAAAC,eAAA,SAEA,SAAAC,KAzEA,SAAAC,GACA,MAAAC,EAAArC,EAAAsC,QACAC,EA+CA,SAAAC,GACA,MAAAD,GACAlB,MAAAmB,EAAA,IAEAC,EAAAD,EAAAC,OACA,QAAAC,EAAA,EAAAC,EAAAJ,EAAmCG,EAAAD,EAAA,IAAoBC,EACvDC,EAAAxB,MACAE,MAAAmB,EAAAE,EAAA,IAEAC,IAAAxB,KAEA,OAAAoB,EA1DAK,CAAAP,EAAAQ,kBACA,QAAAC,EAAA,EAAiBA,EAAAV,IAAWU,EAAA,CAC5B,IAAAH,EAAAJ,EACA,KAAAI,EAAAxB,MAAA,CACA,MAAAA,EAAAwB,EAAAxB,KACAH,EAAA2B,GACAA,EAAAxB,GAGA,MAAAqB,EAoDA,SAAAD,GACA,MAAAC,GAAAD,EAAAlB,OACA,QAAAsB,EAAAJ,EAAAO,EAAA,EAA+BH,EAAAxB,KAAWwB,IAAAxB,OAAA2B,EAC1CN,EAAAM,GAAAH,EAAAxB,KAAAE,MAEA,OAAAmB,EAzDAO,CAAAR,GACAN,SAAAC,eAAA,SAAAc,UAAAR,EAAAC,OACAJ,EAAAY,eAAAT,GACAtC,EAAAgD,YAAAb,GA4DAc,CAAAC,OAAApB,EAAAqB,QAGA,IAAAC,EAOAtB,EAAAuB,SAAA,WACAC,OAAAC,aAAAH,GACAA,EAAAE,OAAAE,WAAAvB,EAAA,MAGAA","file":"fractal.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\n\nconst radius = 10e6;\nconst cos30 = Math.cos(Math.PI / 6);\nconst sin30 = Math.sin(Math.PI / 6);\nconst rise = radius * sin30;\nconst run = radius * cos30;\n\nconst triangle = new LineString([\n  [0, radius], [run, -rise], [-run, -rise], [0, radius]\n]);\n\nconst feature = new Feature(triangle);\n\nconst layer = new VectorLayer({\n  source: new VectorSource({\n    features: [feature]\n  })\n});\n\nconst map = new Map({\n  layers: [layer],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 1\n  })\n});\n\nfunction makeFractal(depth) {\n  const geometry = triangle.clone();\n  const graph = coordsToGraph(geometry.getCoordinates());\n  for (let i = 0; i < depth; ++i) {\n    let node = graph;\n    while (node.next) {\n      const next = node.next;\n      injectNodes(node);\n      node = next;\n    }\n  }\n  const coordinates = graphToCoords(graph);\n  document.getElementById('count').innerHTML = coordinates.length;\n  geometry.setCoordinates(coordinates);\n  feature.setGeometry(geometry);\n}\n\nfunction injectNodes(startNode) {\n  const endNode = startNode.next;\n\n  const start = startNode.point;\n  const end = startNode.next.point;\n  const dx = end[0] - start[0];\n  const dy = end[1] - start[1];\n\n  // first point at 1/3 along the segment\n  const firstNode = {\n    point: [start[0] + dx / 3, start[1] + dy / 3]\n  };\n\n  // second point at peak of _/\\_\n  const r = Math.sqrt(dx * dx + dy * dy) / (2 * cos30);\n  const a = Math.atan2(dy, dx) + Math.PI / 6;\n  const secondNode = {\n    point: [start[0] + r * Math.cos(a), start[1] + r * Math.sin(a)]\n  };\n\n  // third point at 2/3 along the segment\n  const thirdNode = {\n    point: [end[0] - dx / 3, end[1] - dy / 3]\n  };\n\n  startNode.next = firstNode;\n  firstNode.next = secondNode;\n  secondNode.next = thirdNode;\n  thirdNode.next = endNode;\n}\n\n\nfunction coordsToGraph(coordinates) {\n  const graph = {\n    point: coordinates[0]\n  };\n  const length = coordinates.length;\n  for (let level = 0, node = graph; level < length - 1; ++level) {\n    node.next = {\n      point: coordinates[level + 1]\n    };\n    node = node.next;\n  }\n  return graph;\n}\n\nfunction graphToCoords(graph) {\n  const coordinates = [graph.point];\n  for (let node = graph, i = 1; node.next; node = node.next, ++i) {\n    coordinates[i] = node.next.point;\n  }\n  return coordinates;\n}\n\nconst depthInput = document.getElementById('depth');\n\nfunction update() {\n  makeFractal(Number(depthInput.value));\n}\n\nlet updateTimer;\n\n\n/**\n * Regenerate fractal on depth change.  Change events are debounced so updates\n * only occur every 200ms.\n */\ndepthInput.onchange = function() {\n  window.clearTimeout(updateTimer);\n  updateTimer = window.setTimeout(update, 200);\n};\n\nupdate();\n"],"sourceRoot":""}