{"version":3,"sources":["webpack:///./igc.js"],"names":["colors","Clement Latour","Damien de Baesnt","Sylvain Dhonneur","Tom Payne","Ulrich Prinz","styleCache","vectorSource","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_8__","igcUrls","get","url","callback","client","XMLHttpRequest","open","onload","responseText","send","igcFormat","_src_ol_format_IGC_js__WEBPACK_IMPORTED_MODULE_4__","i","length","data","features","readFeatures","featureProjection","addFeatures","time","start","Infinity","stop","duration","on","event","geometry","feature","getGeometry","Math","min","getFirstCoordinate","max","getLastCoordinate","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","layers","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_6__","source","_src_ol_source_OSM_js__WEBPACK_IMPORTED_MODULE_7__","attributions","style","color","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","stroke","width","target","controls","Object","_src_ol_control_js__WEBPACK_IMPORTED_MODULE_3__","attributionOptions","collapsible","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","info","document","getElementById","innerHTML","closestPoint","getClosestPoint","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_5__","setCoordinates","date","Date","toUTCString","coordinates","render","evt","dragging","getEventCoordinate","originalEvent","image","radius","fill","vectorContext","setStyle","drawGeometry","featureOverlay","addEventListener","value","parseInt","this","m","forEachFeature","getCoordinateAtM","highlight","undefined","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","set","getSource","addFeature"],"mappings":"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","file":"igc.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls} from '../src/ol/control.js';\nimport IGC from '../src/ol/format/IGC.js';\nimport {LineString, Point} from '../src/ol/geom.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport OSM, {ATTRIBUTION} from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\nconst colors = {\n  'Clement Latour': 'rgba(0, 0, 255, 0.7)',\n  'Damien de Baesnt': 'rgba(0, 215, 255, 0.7)',\n  'Sylvain Dhonneur': 'rgba(0, 165, 255, 0.7)',\n  'Tom Payne': 'rgba(0, 255, 255, 0.7)',\n  'Ulrich Prinz': 'rgba(0, 215, 255, 0.7)'\n};\n\nconst styleCache = {};\nconst styleFunction = function(feature) {\n  const color = colors[feature.get('PLT')];\n  let style = styleCache[color];\n  if (!style) {\n    style = new Style({\n      stroke: new Stroke({\n        color: color,\n        width: 3\n      })\n    });\n    styleCache[color] = style;\n  }\n  return style;\n};\n\nconst vectorSource = new VectorSource();\n\nconst igcUrls = [\n  'data/igc/Clement-Latour.igc',\n  'data/igc/Damien-de-Baenst.igc',\n  'data/igc/Sylvain-Dhonneur.igc',\n  'data/igc/Tom-Payne.igc',\n  'data/igc/Ulrich-Prinz.igc'\n];\n\nfunction get(url, callback) {\n  const client = new XMLHttpRequest();\n  client.open('GET', url);\n  client.onload = function() {\n    callback(client.responseText);\n  };\n  client.send();\n}\n\nconst igcFormat = new IGC();\nfor (let i = 0; i < igcUrls.length; ++i) {\n  get(igcUrls[i], function(data) {\n    const features = igcFormat.readFeatures(data,\n      {featureProjection: 'EPSG:3857'});\n    vectorSource.addFeatures(features);\n  });\n}\n\nconst time = {\n  start: Infinity,\n  stop: -Infinity,\n  duration: 0\n};\nvectorSource.on('addfeature', function(event) {\n  const geometry = event.feature.getGeometry();\n  time.start = Math.min(time.start, geometry.getFirstCoordinate()[2]);\n  time.stop = Math.max(time.stop, geometry.getLastCoordinate()[2]);\n  time.duration = time.stop - time.start;\n});\n\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM({\n        attributions: [\n          'All maps Â© <a href=\"https://www.opencyclemap.org/\">OpenCycleMap</a>',\n          ATTRIBUTION\n        ],\n        url: 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +\n            '?apikey=0e6fc415256d4fbb9b5166a718591d71'\n      })\n    }),\n    new VectorLayer({\n      source: vectorSource,\n      style: styleFunction\n    })\n  ],\n  target: 'map',\n  controls: defaultControls({\n    attributionOptions: {\n      collapsible: false\n    }\n  }),\n  view: new View({\n    center: [703365.7089403362, 5714629.865071137],\n    zoom: 9\n  })\n});\n\n\nlet point = null;\nlet line = null;\nconst displaySnap = function(coordinate) {\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\n  const info = document.getElementById('info');\n  if (closestFeature === null) {\n    point = null;\n    line = null;\n    info.innerHTML = '&nbsp;';\n  } else {\n    const geometry = closestFeature.getGeometry();\n    const closestPoint = geometry.getClosestPoint(coordinate);\n    if (point === null) {\n      point = new Point(closestPoint);\n    } else {\n      point.setCoordinates(closestPoint);\n    }\n    const date = new Date(closestPoint[2] * 1000);\n    info.innerHTML =\n        closestFeature.get('PLT') + ' (' + date.toUTCString() + ')';\n    const coordinates = [coordinate, [closestPoint[0], closestPoint[1]]];\n    if (line === null) {\n      line = new LineString(coordinates);\n    } else {\n      line.setCoordinates(coordinates);\n    }\n  }\n  map.render();\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displaySnap(coordinate);\n});\n\nmap.on('click', function(evt) {\n  displaySnap(evt.coordinate);\n});\n\nconst stroke = new Stroke({\n  color: 'rgba(255,0,0,0.9)',\n  width: 1\n});\nconst style = new Style({\n  stroke: stroke,\n  image: new CircleStyle({\n    radius: 5,\n    fill: null,\n    stroke: stroke\n  })\n});\nmap.on('postcompose', function(evt) {\n  const vectorContext = evt.vectorContext;\n  vectorContext.setStyle(style);\n  if (point !== null) {\n    vectorContext.drawGeometry(point);\n  }\n  if (line !== null) {\n    vectorContext.drawGeometry(line);\n  }\n});\n\nconst featureOverlay = new VectorLayer({\n  source: new VectorSource(),\n  map: map,\n  style: new Style({\n    image: new CircleStyle({\n      radius: 5,\n      fill: new Fill({\n        color: 'rgba(255,0,0,0.9)'\n      })\n    })\n  })\n});\n\ndocument.getElementById('time').addEventListener('input', function() {\n  const value = parseInt(this.value, 10) / 100;\n  const m = time.start + (time.duration * value);\n  vectorSource.forEachFeature(function(feature) {\n    const geometry = /** @type {module:ol/geom/LineString~LineString} */ (feature.getGeometry());\n    const coordinate = geometry.getCoordinateAtM(m, true);\n    let highlight = feature.get('highlight');\n    if (highlight === undefined) {\n      highlight = new Feature(new Point(coordinate));\n      feature.set('highlight', highlight);\n      featureOverlay.getSource().addFeature(highlight);\n    } else {\n      highlight.getGeometry().setCoordinates(coordinate);\n    }\n  });\n  map.render();\n});\n"],"sourceRoot":""}