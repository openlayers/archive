{"version":3,"sources":["webpack:///./vector-wfs-getfeature.js"],"names":["vectorSource","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_6__","vector","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","source","style","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","stroke","color","width","raster","_src_ol_source_BingMaps_js__WEBPACK_IMPORTED_MODULE_5__","imagerySet","key","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","document","getElementById","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","maxZoom","zoom","featureRequest","_src_ol_format_js__WEBPACK_IMPORTED_MODULE_3__","writeGetFeature","srsName","featureNS","featurePrefix","featureTypes","outputFormat","filter","Object","_src_ol_format_filter_js__WEBPACK_IMPORTED_MODULE_2__","fetch","method","body","XMLSerializer","serializeToString","then","response","json","features","readFeatures","addFeatures","getView","fit","getExtent"],"mappings":"qKAcA,MAAAA,EAAA,IAAAC,EAAA,EACAC,EAAA,IAAAC,EAAA,GACAC,OAAAJ,EACAK,MAAA,IAAAC,EAAA,GACAC,OAAA,IAAAD,EAAA,GACAE,MAAA,uBACAC,MAAA,QAKAC,EAAA,IAAAP,EAAA,GACAC,OAAA,IAAAO,EAAA,GACAC,WAAA,SACAC,IAAA,uEAIAC,EAAA,IAAAC,EAAA,GACAC,QAAAN,EAAAR,GACAe,OAAAC,SAAAC,eAAA,OACAC,KAAA,IAAAC,EAAA,GACAC,SAAA,qCACAC,QAAA,GACAC,KAAA,OAKAC,GAAA,IAAAC,EAAA,GAAAC,iBACAC,QAAA,YACAC,UAAA,0BACAC,cAAA,MACAC,cAAA,eACAC,aAAA,mBACAC,OAAAC,OAAAC,EAAA,EAAAD,CACAA,OAAAC,EAAA,EAAAD,CAAA,uBACAA,OAAAC,EAAA,EAAAD,CAAA,2BAKAE,MAAA,sCACAC,OAAA,OACAC,MAAA,IAAAC,eAAAC,kBAAAf,KACCgB,KAAA,SAAAC,GACD,OAAAA,EAAAC,SACCF,KAAA,SAAAE,GACD,MAAAC,GAAA,IAAAlB,EAAA,GAAAmB,aAAAF,GACA3C,EAAA8C,YAAAF,GACA9B,EAAAiC,UAAAC,IAAAhD,EAAAiD","file":"vector-wfs-getfeature.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {\n  equalTo as equalToFilter,\n  like as likeFilter,\n  and as andFilter\n} from '../src/ol/format/filter.js';\nimport {WFS, GeoJSON} from '../src/ol/format.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Stroke, Style} from '../src/ol/style.js';\n\n\nconst vectorSource = new VectorSource();\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2\n    })\n  })\n});\n\nconst raster = new TileLayer({\n  source: new BingMaps({\n    imagerySet: 'Aerial',\n    key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [-8908887.277395891, 5381918.072437216],\n    maxZoom: 19,\n    zoom: 12\n  })\n});\n\n// generate a GetFeature request\nconst featureRequest = new WFS().writeGetFeature({\n  srsName: 'EPSG:3857',\n  featureNS: 'http://openstreemap.org',\n  featurePrefix: 'osm',\n  featureTypes: ['water_areas'],\n  outputFormat: 'application/json',\n  filter: andFilter(\n    likeFilter('name', 'Mississippi*'),\n    equalToFilter('waterway', 'riverbank')\n  )\n});\n\n// then post the request and add the received features to a layer\nfetch('https://ahocevar.com/geoserver/wfs', {\n  method: 'POST',\n  body: new XMLSerializer().serializeToString(featureRequest)\n}).then(function(response) {\n  return response.json();\n}).then(function(json) {\n  const features = new GeoJSON().readFeatures(json);\n  vectorSource.addFeatures(features);\n  map.getView().fit(vectorSource.getExtent());\n});\n"],"sourceRoot":""}