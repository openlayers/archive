{"version":3,"sources":["webpack:///./line-arrows.js"],"names":["raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_5__","vector","style","feature","geometry","getGeometry","styles","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","stroke","color","width","forEachSegment","start","end","dx","dy","rotation","Math","atan2","push","_src_ol_geom_Point_js__WEBPACK_IMPORTED_MODULE_2__","image","src","anchor","rotateWithView","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","addInteraction","_src_ol_interaction_Draw_js__WEBPACK_IMPORTED_MODULE_3__","type"],"mappings":"4JAQA,MAAAA,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,IAGAD,EAAA,IAAAC,EAAA,EAgCAC,EAAA,IAAAH,EAAA,GACAC,SACAG,MAhCA,SAAAC,GACA,MAAAC,EAAAD,EAAAE,cACAC,GAEA,IAAAC,EAAA,GACAC,OAAA,IAAAD,EAAA,GACAE,MAAA,UACAC,MAAA,OAqBA,OAhBAN,EAAAO,eAAA,SAAAC,EAAAC,GACA,MAAAC,EAAAD,EAAA,GAAAD,EAAA,GACAG,EAAAF,EAAA,GAAAD,EAAA,GACAI,EAAAC,KAAAC,MAAAH,EAAAD,GAEAR,EAAAa,KAAA,IAAAZ,EAAA,GACAH,SAAA,IAAAgB,EAAA,EAAAP,GACAQ,MAAA,IAAAd,EAAA,GACAe,IAAA,iBACAC,QAAA,QACAC,gBAAA,EACAR,mBAKAV,KAOA,IAAAmB,EAAA,GACAC,QAAA7B,EAAAI,GACA0B,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,SAAA,WACAC,KAAA,MAIAC,eAAA,IAAAC,EAAA,GACAlC,SACAmC,KAAA","file":"line-arrows.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Point from '../src/ol/geom/Point.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Icon, Stroke, Style} from '../src/ol/style.js';\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst source = new VectorSource();\n\nconst styleFunction = function(feature) {\n  const geometry = feature.getGeometry();\n  const styles = [\n    // linestring\n    new Style({\n      stroke: new Stroke({\n        color: '#ffcc33',\n        width: 2\n      })\n    })\n  ];\n\n  geometry.forEachSegment(function(start, end) {\n    const dx = end[0] - start[0];\n    const dy = end[1] - start[1];\n    const rotation = Math.atan2(dy, dx);\n    // arrows\n    styles.push(new Style({\n      geometry: new Point(end),\n      image: new Icon({\n        src: 'data/arrow.png',\n        anchor: [0.75, 0.5],\n        rotateWithView: true,\n        rotation: -rotation\n      })\n    }));\n  });\n\n  return styles;\n};\nconst vector = new VectorLayer({\n  source: source,\n  style: styleFunction\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 4\n  })\n});\n\nmap.addInteraction(new Draw({\n  source: source,\n  type: 'LineString'\n}));\n"],"sourceRoot":""}