{"version":3,"sources":["webpack:///./topolis.js"],"names":["raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_6__","nodes","wrapX","nodesLayer","style","f","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","image","radius","fill","color","stroke","width","text","get","id","toString","edges","edgesLayer","faces","facesLayer","font","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","center","zoom","topo","topolis","createTopology","removeElementFeature","element","feature","getFeatureById","removeFeature","createNode","coord","node","existingEdge","getEdgeByPoint","modEdgeSplit","addIsoNode","on","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","geometry","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_3__","coordinate","setId","addFeature","e","edge","coordinates","setGeometry","face","getFaceGeometry","draw","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_4__","type","edgeGeom","getGeometry","getCoordinates","startCoord","endCoord","length","start","end","getNodeByPoint","edgesAtStart","edgesAtEnd","crossing","getEdgesByLine","remEdgeNewFace","removeIsoNode","addEdgeNewFaces","toastr","warning","addInteraction","snap","addControl","_src_ol_control_MousePosition_js__WEBPACK_IMPORTED_MODULE_8__"],"mappings":"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","file":"topolis.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Point, LineString, Polygon} from '../src/ol/geom.js';\nimport {Draw, Snap} from '../src/ol/interaction.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Fill, Circle as CircleStyle, Stroke, Style, Text} from '../src/ol/style.js';\nimport MousePosition from '../src/ol/control/MousePosition.js';\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst nodes = new VectorSource({wrapX: false});\nconst nodesLayer = new VectorLayer({\n  source: nodes,\n  style: function(f) {\n    const style = new Style({\n      image: new CircleStyle({\n        radius: 8,\n        fill: new Fill({color: 'rgba(255, 0, 0, 0.2)'}),\n        stroke: new Stroke({color: 'red', width: 1})\n      }),\n      text: new Text({\n        text: f.get('node').id.toString(),\n        fill: new Fill({color: 'red'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 3\n        })\n      })\n    });\n    return [style];\n  }\n});\n\nconst edges = new VectorSource({wrapX: false});\nconst edgesLayer = new VectorLayer({\n  source: edges,\n  style: function(f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'blue',\n        width: 1\n      }),\n      text: new Text({\n        text: f.get('edge').id.toString(),\n        fill: new Fill({color: 'blue'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    });\n    return [style];\n  }\n});\n\nconst faces = new VectorSource({wrapX: false});\nconst facesLayer = new VectorLayer({\n  source: faces,\n  style: function(f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(0, 255, 0, 0.2)'\n      }),\n      text: new Text({\n        font: 'bold 12px sans-serif',\n        text: f.get('face').id.toString(),\n        fill: new Fill({color: 'green'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    });\n    return [style];\n  }\n});\n\nconst map = new Map({\n  layers: [raster, facesLayer, edgesLayer, nodesLayer],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 16\n  })\n});\n\nconst topo = topolis.createTopology();\n\ntopo.on('addnode', nodeToFeature);\ntopo.on('removenode', function(e) {\n  removeElementFeature(nodes, e);\n});\ntopo.on('addedge', edgeToFeature);\ntopo.on('modedge', function(e) {\n  const feature = edges.getFeatureById(e.id);\n  feature.setGeometry(new LineString(e.coordinates));\n});\ntopo.on('removeedge', function(e) {\n  removeElementFeature(edges, e);\n});\ntopo.on('addface', faceToFeature);\ntopo.on('removeface', function(e) {\n  removeElementFeature(faces, e);\n});\n\nfunction removeElementFeature(source, element) {\n  const feature = source.getFeatureById(element.id);\n  source.removeFeature(feature);\n}\n\nfunction nodeToFeature(node) {\n  const feature = new Feature({\n    geometry: new Point(node.coordinate),\n    node: node\n  });\n  feature.setId(node.id);\n  nodes.addFeature(feature);\n}\n\nfunction edgeToFeature(edge) {\n  const feature = new Feature({\n    geometry: new LineString(edge.coordinates),\n    edge: edge\n  });\n  feature.setId(edge.id);\n  edges.addFeature(feature);\n}\n\nfunction faceToFeature(face) {\n  const coordinates = topo.getFaceGeometry(face);\n  const feature = new Feature({\n    geometry: new Polygon(coordinates),\n    face: face\n  });\n  feature.setId(face.id);\n  faces.addFeature(feature);\n}\n\nfunction createNode(topo, coord) {\n  let node;\n  const existingEdge = topo.getEdgeByPoint(coord, 5)[0];\n  if (existingEdge) {\n    node = topo.modEdgeSplit(existingEdge, coord);\n  } else {\n    node = topo.addIsoNode(coord);\n  }\n  return node;\n}\n\nfunction onDrawend(e) {\n  const edgeGeom = e.feature.getGeometry().getCoordinates();\n  const startCoord = edgeGeom[0];\n  const endCoord = edgeGeom[edgeGeom.length - 1];\n  let start, end;\n  try {\n    start = topo.getNodeByPoint(startCoord);\n    end = topo.getNodeByPoint(endCoord);\n    const edgesAtStart = topo.getEdgeByPoint(startCoord, 5);\n    const edgesAtEnd = topo.getEdgeByPoint(endCoord, 5);\n    const crossing = topo.getEdgesByLine(edgeGeom);\n    if (crossing.length === 1 && !start && !end && edgesAtStart.length === 0 && edgesAtEnd.length === 0) {\n      topo.remEdgeNewFace(crossing[0]);\n      start = crossing[0].start;\n      if (start.face) {\n        topo.removeIsoNode(start);\n      }\n      end = crossing[0].end;\n      if (end.face) {\n        topo.removeIsoNode(end);\n      }\n      return;\n    }\n    if (!start) {\n      start = createNode(topo, startCoord);\n      edgeGeom[0] = start.coordinate;\n    }\n    if (!end) {\n      end = createNode(topo, endCoord);\n      edgeGeom[edgeGeom.length - 1] = end.coordinate;\n    }\n    topo.addEdgeNewFaces(start, end, edgeGeom);\n  } catch (e) {\n    toastr.warning(e.toString());\n  }\n}\n\nconst draw = new Draw({\n  type: 'LineString'\n});\ndraw.on('drawend', onDrawend);\nmap.addInteraction(draw);\nconst snap = new Snap({\n  source: edges\n});\nmap.addInteraction(snap);\nmap.addControl(new MousePosition());\n"],"sourceRoot":""}