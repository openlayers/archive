{"version":3,"sources":["webpack:///./vector-label-decluttering.js"],"names":["map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","labelStyle","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","geometry","feature","getGeometry","getType","polygons","getPolygons","widest","i","ii","length","polygon","width","Object","_src_ol_extent_js__WEBPACK_IMPORTED_MODULE_2__","getExtent","text","font","overflow","fill","color","stroke","style","vectorLayer","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__","source","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_5__","url","format","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_3__","getText","setText","get","declutter","addLayer"],"mappings":"0JAQA,MAAAA,EAAA,IAAAC,EAAA,GACAC,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,QAAA,KACAC,KAAA,MAIAC,EAAA,IAAAC,EAAA,GACAC,SAAA,SAAAC,GACA,IAAAD,EAAAC,EAAAC,cACA,mBAAAF,EAAAG,UAAA,CAEA,MAAAC,EAAAJ,EAAAK,cACA,IAAAC,EAAA,EACA,QAAAC,EAAA,EAAAC,EAAAJ,EAAAK,OAA2CF,EAAAC,IAAQD,EAAA,CACnD,MAAAG,EAAAN,EAAAG,GACAI,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAAI,aACAH,EAAAL,IACAA,EAAAK,EACAX,EAAAU,IAIA,OAAAV,GAEAe,KAAA,IAAAhB,EAAA,GACAiB,KAAA,0BACAC,UAAA,EACAC,KAAA,IAAAnB,EAAA,GACAoB,MAAA,SAEAC,OAAA,IAAArB,EAAA,GACAoB,MAAA,OACAR,MAAA,QAaAU,GATA,IAAAtB,EAAA,GACAmB,KAAA,IAAAnB,EAAA,GACAoB,MAAA,6BAEAC,OAAA,IAAArB,EAAA,GACAoB,MAAA,UACAR,MAAA,MAGAb,GAEAwB,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAC,IAAA,iCACAC,OAAA,IAAAC,EAAA,IAEAP,MAAA,SAAApB,GAEA,OADAH,EAAA+B,UAAAC,QAAA7B,EAAA8B,IAAA,SACAV,GAEAW,WAAA,IAGAzC,EAAA0C,SAAAX","file":"vector-label-decluttering.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {getWidth} from '../src/ol/extent.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Fill, Stroke, Style, Text} from '../src/ol/style.js';\n\nconst map = new Map({\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 1\n  })\n});\n\nconst labelStyle = new Style({\n  geometry: function(feature) {\n    let geometry = feature.getGeometry();\n    if (geometry.getType() == 'MultiPolygon') {\n      // Only render label for the widest polygon of a multipolygon\n      const polygons = geometry.getPolygons();\n      let widest = 0;\n      for (let i = 0, ii = polygons.length; i < ii; ++i) {\n        const polygon = polygons[i];\n        const width = getWidth(polygon.getExtent());\n        if (width > widest) {\n          widest = width;\n          geometry = polygon;\n        }\n      }\n    }\n    return geometry;\n  },\n  text: new Text({\n    font: '12px Calibri,sans-serif',\n    overflow: true,\n    fill: new Fill({\n      color: '#000'\n    }),\n    stroke: new Stroke({\n      color: '#fff',\n      width: 3\n    })\n  })\n});\nconst countryStyle = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.6)'\n  }),\n  stroke: new Stroke({\n    color: '#319FD3',\n    width: 1\n  })\n});\nconst style = [countryStyle, labelStyle];\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/countries.geojson',\n    format: new GeoJSON()\n  }),\n  style: function(feature) {\n    labelStyle.getText().setText(feature.get('name'));\n    return style;\n  },\n  declutter: true\n});\n\nmap.addLayer(vectorLayer);\n"],"sourceRoot":""}