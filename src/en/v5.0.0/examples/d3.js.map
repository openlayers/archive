{"version":3,"sources":["webpack:///./d3.js"],"names":["map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_5__","layer","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","Object","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_4__","zoom","d3","json","error","us","features","topojson","feature","objects","counties","canvasFunction","extent","resolution","pixelRatio","size","projection","canvasWidth","canvasHeight","canvas","select","document","createElement","attr","context","node","getContext","d3Projection","geoMercator","scale","translate","d3Path","geoPath","pixelBounds","bounds","pixelBoundsWidth","pixelBoundsHeight","geoBounds","geoBoundsLeftBottom","geoBoundsRightTop","geoBoundsWidth","_src_ol_extent_js__WEBPACK_IMPORTED_MODULE_2__","getExtent","widthResolution","heightResolution","Math","max","stroke","addLayer"],"mappings":"mJAQA,MAAAA,EAAA,IAAAC,EAAA,GACAC,QACA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAC,MAAA,kBAIAC,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,OAAAC,OAAAC,EAAA,EAAAD,GAAA,QACAE,KAAA,MAQAC,GAAAC,KAAA,iCAAAC,EAAAC,GACA,MAAAC,EAAAC,SAAAC,QAAAH,IAAAI,QAAAC,UAmDAhB,EAAA,IAAAH,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAkB,eA1CA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,MAAAC,EAAAF,EAAA,GACAG,EAAAH,EAAA,GAEAI,EAAAjB,GAAAkB,OAAAC,SAAAC,cAAA,WACAH,EAAAI,KAAA,QAAAN,GAAAM,KAAA,SAAAL,GAEA,MAAAM,EAAAL,EAAAM,OAAAC,WAAA,MAEAC,EAAAzB,GAAA0B,cAAAC,MAAA,GAAAC,WAAA,MACA,IAAAC,EAAA7B,GAAA8B,UAAAhB,WAAAW,GAEA,MAAAM,EAAAF,EAAAG,OAAA5B,GACA6B,EAAAF,EAAA,MAAAA,EAAA,MACAG,EAAAH,EAAA,MAAAA,EAAA,MAEAI,EAAAnC,GAAAmC,UAAA/B,GACAgC,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAAArB,GACAuB,EAAAxC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAAArB,GACA,IAAAwB,EAAAD,EAAA,GAAAD,EAAA,GACAE,EAAA,IACAA,GAAAzC,OAAA0C,EAAA,EAAA1C,CAAAiB,EAAA0B,cAEA,MAEAC,EAAAH,EAAAL,EACAS,GAHAL,EAAA,GAAAD,EAAA,IAGAF,EAEAP,EADAgB,KAAAC,IAAAH,EAAAC,IACA/B,EAAAC,GAEAhB,EAAAC,OAAAC,EAAA,EAAAD,QAAA0C,EAAA,EAAA1C,CAAAa,GAAAI,GAOA,OANAW,EAAAE,SAAA/B,UACAgC,WAAAb,EAAA,EAAAC,EAAA,KACAa,IAAAf,WAAAW,GAAAH,YACAlB,GACAkB,EAAAuB,SAEA5B,EAAAM,QAMAT,WAAA,gBAGA5B,EAAA4D,SAAAtD","file":"d3.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {getWidth, getCenter} from '../src/ol/extent.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport {fromLonLat, toLonLat} from '../src/ol/proj.js';\nimport {ImageCanvas as ImageCanvasSource, Stamen} from '../src/ol/source.js';\n\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new Stamen({\n        layer: 'watercolor'\n      })\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-97, 38]),\n    zoom: 4\n  })\n});\n\n\n/**\n * Load the topojson data and create an ol/layer/Image for that data.\n */\nd3.json('data/topojson/us.json', function(error, us) {\n  const features = topojson.feature(us, us.objects.counties);\n\n  /**\n   * This function uses d3 to render the topojson features to a canvas.\n   * @param {module:ol/extent~Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/size~Size} size Size.\n   * @param {module:ol/proj/Projection~Projection} projection Projection.\n   * @return {HTMLCanvasElement} A canvas element.\n   */\n  const canvasFunction = function(extent, resolution, pixelRatio, size, projection) {\n    const canvasWidth = size[0];\n    const canvasHeight = size[1];\n\n    const canvas = d3.select(document.createElement('canvas'));\n    canvas.attr('width', canvasWidth).attr('height', canvasHeight);\n\n    const context = canvas.node().getContext('2d');\n\n    const d3Projection = d3.geoMercator().scale(1).translate([0, 0]);\n    let d3Path = d3.geoPath().projection(d3Projection);\n\n    const pixelBounds = d3Path.bounds(features);\n    const pixelBoundsWidth = pixelBounds[1][0] - pixelBounds[0][0];\n    const pixelBoundsHeight = pixelBounds[1][1] - pixelBounds[0][1];\n\n    const geoBounds = d3.geoBounds(features);\n    const geoBoundsLeftBottom = fromLonLat(geoBounds[0], projection);\n    const geoBoundsRightTop = fromLonLat(geoBounds[1], projection);\n    let geoBoundsWidth = geoBoundsRightTop[0] - geoBoundsLeftBottom[0];\n    if (geoBoundsWidth < 0) {\n      geoBoundsWidth += getWidth(projection.getExtent());\n    }\n    const geoBoundsHeight = geoBoundsRightTop[1] - geoBoundsLeftBottom[1];\n\n    const widthResolution = geoBoundsWidth / pixelBoundsWidth;\n    const heightResolution = geoBoundsHeight / pixelBoundsHeight;\n    const r = Math.max(widthResolution, heightResolution);\n    const scale = r / (resolution / pixelRatio);\n\n    const center = toLonLat(getCenter(extent), projection);\n    d3Projection.scale(scale).center(center)\n      .translate([canvasWidth / 2, canvasHeight / 2]);\n    d3Path = d3Path.projection(d3Projection).context(context);\n    d3Path(features);\n    context.stroke();\n\n    return canvas.node();\n  };\n\n  const layer = new ImageLayer({\n    source: new ImageCanvasSource({\n      canvasFunction: canvasFunction,\n      projection: 'EPSG:3857'\n    })\n  });\n  map.addLayer(layer);\n});\n"],"sourceRoot":""}