{"version":3,"sources":["webpack:///./utfgrid.js"],"names":["key","mapLayer","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_3__","source","_src_ol_source_TileJSON_js__WEBPACK_IMPORTED_MODULE_4__","url","gridSource","_src_ol_source_UTFGrid_js__WEBPACK_IMPORTED_MODULE_5__","gridLayer","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","center","zoom","mapElement","document","getElementById","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","infoElement","flagElement","nameElement","infoOverlay","_src_ol_Overlay_js__WEBPACK_IMPORTED_MODULE_1__","element","offset","stopEvent","addOverlay","displayCountryInfo","coordinate","viewResolution","getResolution","forDataAtCoordinateAndResolution","data","style","cursor","src","innerHTML","setPosition","undefined","on","evt","dragging","getEventCoordinate","originalEvent"],"mappings":"qJAOA,MAAAA,EAAA,qEAEAC,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAC,IAAA,mFAAAL,MAKAM,EAAA,IAAAC,EAAA,GACAF,IAAA,mFAAAL,IAGAQ,EAAA,IAAAN,EAAA,GAAiCC,OAAAG,IAEjCG,EAAA,IAAAC,EAAA,GACAC,QAAA,KACAC,KAAA,IAGAC,EAAAC,SAAAC,eAAA,OACAC,EAAA,IAAAC,EAAA,GACAC,QAAAjB,EAAAO,GACAW,OAAAN,EACAJ,SAGAW,EAAAN,SAAAC,eAAA,gBACAM,EAAAP,SAAAC,eAAA,gBACAO,EAAAR,SAAAC,eAAA,gBAEAQ,EAAA,IAAAC,EAAA,GACAC,QAAAL,EACAM,QAAA,OACAC,WAAA,IAEAX,EAAAY,WAAAL,GAEA,MAAAM,EAAA,SAAAC,GACA,MAAAC,EAA2CtB,EAAAuB,gBAC3C1B,EAAA2B,iCAAAH,EAAAC,EACA,SAAAG,GAIArB,EAAAsB,MAAAC,OAAAF,EAAA,aACAA,IACAb,EAAAgB,IAAA,yBAA0CH,EAAA,SAC1CZ,EAAAgB,UAAAJ,EAAA,OAEAX,EAAAgB,YAAAL,EAAAJ,OAAAU,MAIAxB,EAAAyB,GAAA,uBAAAC,GACA,GAAAA,EAAAC,SACA,OAEA,MAAAb,EAAAd,EAAA4B,mBAAAF,EAAAG,eACAhB,EAAAC,KAGAd,EAAAyB,GAAA,iBAAAC,GACAb,EAAAa,EAAAZ","file":"utfgrid.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport TileJSON from '../src/ol/source/TileJSON.js';\nimport UTFGrid from '../src/ol/source/UTFGrid.js';\n\nconst key = 'pk.eyJ1IjoiYWhvY2V2YXIiLCJhIjoiY2pzbmg0Nmk5MGF5NzQzbzRnbDNoeHJrbiJ9.7_-_gL8ur7ZtEiNwRfCy7Q';\n\nconst mapLayer = new TileLayer({\n  source: new TileJSON({\n    url: 'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' + key\n  })\n});\n\n\nconst gridSource = new UTFGrid({\n  url: 'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' + key\n});\n\nconst gridLayer = new TileLayer({source: gridSource});\n\nconst view = new View({\n  center: [0, 0],\n  zoom: 1\n});\n\nconst mapElement = document.getElementById('map');\nconst map = new Map({\n  layers: [mapLayer, gridLayer],\n  target: mapElement,\n  view: view\n});\n\nconst infoElement = document.getElementById('country-info');\nconst flagElement = document.getElementById('country-flag');\nconst nameElement = document.getElementById('country-name');\n\nconst infoOverlay = new Overlay({\n  element: infoElement,\n  offset: [15, 15],\n  stopEvent: false\n});\nmap.addOverlay(infoOverlay);\n\nconst displayCountryInfo = function(coordinate) {\n  const viewResolution = /** @type {number} */ (view.getResolution());\n  gridSource.forDataAtCoordinateAndResolution(coordinate, viewResolution,\n    function(data) {\n      // If you want to use the template from the TileJSON,\n      //  load the mustache.js library separately and call\n      //  info.innerHTML = Mustache.render(gridSource.getTemplate(), data);\n      mapElement.style.cursor = data ? 'pointer' : '';\n      if (data) {\n        flagElement.src = 'data:image/png;base64,' + data['flag_png'];\n        nameElement.innerHTML = data['admin'];\n      }\n      infoOverlay.setPosition(data ? coordinate : undefined);\n    });\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displayCountryInfo(coordinate);\n});\n\nmap.on('click', function(evt) {\n  displayCountryInfo(evt.coordinate);\n});\n"],"sourceRoot":""}