{"version":3,"sources":["webpack:///./snap.js"],"names":["raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_4__","vector","style","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_5__","fill","color","stroke","width","image","radius","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","ExampleModify","init","this","select","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_2__","addInteraction","modify","features","getFeatures","setEvents","selectedFeatures","on","forEach","remove","setActive","active","optionsForm","document","getElementById","ExampleDraw","Point","LineString","Polygon","Circle","getSource","type","getActive","activeType","elements","value","onchange","e","getAttribute","snap"],"mappings":"mJAOA,MAAAA,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,IAGAC,EAAA,IAAAH,EAAA,GACAC,OAAA,IAAAC,EAAA,EACAE,MAAA,IAAAC,EAAA,GACAC,KAAA,IAAAD,EAAA,GACAE,MAAA,6BAEAC,OAAA,IAAAH,EAAA,GACAE,MAAA,UACAE,MAAA,IAEAC,MAAA,IAAAL,EAAA,GACAM,OAAA,EACAL,KAAA,IAAAD,EAAA,GACAE,MAAA,kBAMAK,EAAA,IAAAC,EAAA,GACAC,QAAAf,EAAAI,GACAY,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,SAAA,WACAC,KAAA,MAIAC,GACAC,KAAA,WACAC,KAAAC,OAAA,IAAAC,EAAA,EACAZ,EAAAa,eAAAH,KAAAC,QAEAD,KAAAI,OAAA,IAAAF,EAAA,GACAG,SAAAL,KAAAC,OAAAK,gBAEAhB,EAAAa,eAAAH,KAAAI,QAEAJ,KAAAO,aAEAA,UAAA,WACA,MAAAC,EAAAR,KAAAC,OAAAK,cAEAN,KAAAC,OAAAQ,GAAA,2BACAD,EAAAE,QAAAF,EAAAG,OAAAH,MAGAI,UAAA,SAAAC,GACAb,KAAAC,OAAAW,UAAAC,GACAb,KAAAI,OAAAQ,UAAAC,KAGAf,EAAAC,OAEA,MAAAe,EAAAC,SAAAC,eAAA,gBAEAC,GACAlB,KAAA,WACAT,EAAAa,eAAAH,KAAAkB,OACAlB,KAAAkB,MAAAN,WAAA,GACAtB,EAAAa,eAAAH,KAAAmB,YACAnB,KAAAmB,WAAAP,WAAA,GACAtB,EAAAa,eAAAH,KAAAoB,SACApB,KAAAoB,QAAAR,WAAA,GACAtB,EAAAa,eAAAH,KAAAqB,QACArB,KAAAqB,OAAAT,WAAA,IAEAM,MAAA,IAAAhB,EAAA,GACAvB,OAAAE,EAAAyC,YACAC,KAAA,UAEAJ,WAAA,IAAAjB,EAAA,GACAvB,OAAAE,EAAAyC,YACAC,KAAA,eAEAH,QAAA,IAAAlB,EAAA,GACAvB,OAAAE,EAAAyC,YACAC,KAAA,YAEAF,OAAA,IAAAnB,EAAA,GACAvB,OAAAE,EAAAyC,YACAC,KAAA,WAEAC,UAAA,WACA,QAAAxB,KAAAyB,YAAAzB,UAAAyB,YAAAD,aAEAZ,UAAA,SAAAC,GACA,MAAAU,EAAAT,EAAAY,SAAA,aAAAC,MACAd,GACAb,KAAAyB,YAAAzB,UAAAyB,YAAAb,WAAA,GACAZ,KAAAuB,GAAAX,WAAA,GACAZ,KAAAyB,WAAAF,IAEAvB,KAAAyB,YAAAzB,UAAAyB,YAAAb,WAAA,GACAZ,KAAAyB,WAAA,QAIAR,EAAAlB,OAOAe,EAAAc,SAAA,SAAAC,GACA,MAAAN,EAAAM,EAAApC,OAAAqC,aAAA,QACAH,EAAAE,EAAApC,OAAAkC,MACA,aAAAJ,EACAN,EAAAO,aAAAP,EAAAL,WAAA,GACG,eAAAW,IACH,UAAAI,GACAV,EAAAL,WAAA,GACAd,EAAAc,WAAA,IACK,QAAAe,IACLV,EAAAL,WAAA,GACAd,EAAAc,WAAA,MAKAK,EAAAL,WAAA,GACAd,EAAAc,WAAA,GAKA,MAAAmB,EAAA,IAAA7B,EAAA,GACAvB,OAAAE,EAAAyC,cAEAhC,EAAAa,eAAA4B","file":"snap.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Draw, Modify, Select, Snap} from '../src/ol/interaction.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst vector = new VectorLayer({\n  source: new VectorSource(),\n  style: new Style({\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 0.2)'\n    }),\n    stroke: new Stroke({\n      color: '#ffcc33',\n      width: 2\n    }),\n    image: new CircleStyle({\n      radius: 7,\n      fill: new Fill({\n        color: '#ffcc33'\n      })\n    })\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 4\n  })\n});\n\nconst ExampleModify = {\n  init: function() {\n    this.select = new Select();\n    map.addInteraction(this.select);\n\n    this.modify = new Modify({\n      features: this.select.getFeatures()\n    });\n    map.addInteraction(this.modify);\n\n    this.setEvents();\n  },\n  setEvents: function() {\n    const selectedFeatures = this.select.getFeatures();\n\n    this.select.on('change:active', function() {\n      selectedFeatures.forEach(selectedFeatures.remove, selectedFeatures);\n    });\n  },\n  setActive: function(active) {\n    this.select.setActive(active);\n    this.modify.setActive(active);\n  }\n};\nExampleModify.init();\n\nconst optionsForm = document.getElementById('options-form');\n\nconst ExampleDraw = {\n  init: function() {\n    map.addInteraction(this.Point);\n    this.Point.setActive(false);\n    map.addInteraction(this.LineString);\n    this.LineString.setActive(false);\n    map.addInteraction(this.Polygon);\n    this.Polygon.setActive(false);\n    map.addInteraction(this.Circle);\n    this.Circle.setActive(false);\n  },\n  Point: new Draw({\n    source: vector.getSource(),\n    type: 'Point'\n  }),\n  LineString: new Draw({\n    source: vector.getSource(),\n    type: 'LineString'\n  }),\n  Polygon: new Draw({\n    source: vector.getSource(),\n    type: 'Polygon'\n  }),\n  Circle: new Draw({\n    source: vector.getSource(),\n    type: 'Circle'\n  }),\n  getActive: function() {\n    return this.activeType ? this[this.activeType].getActive() : false;\n  },\n  setActive: function(active) {\n    const type = optionsForm.elements['draw-type'].value;\n    if (active) {\n      this.activeType && this[this.activeType].setActive(false);\n      this[type].setActive(true);\n      this.activeType = type;\n    } else {\n      this.activeType && this[this.activeType].setActive(false);\n      this.activeType = null;\n    }\n  }\n};\nExampleDraw.init();\n\n\n/**\n * Let user change the geometry type.\n * @param {Event} e Change event.\n */\noptionsForm.onchange = function(e) {\n  const type = e.target.getAttribute('name');\n  const value = e.target.value;\n  if (type == 'draw-type') {\n    ExampleDraw.getActive() && ExampleDraw.setActive(true);\n  } else if (type == 'interaction') {\n    if (value == 'modify') {\n      ExampleDraw.setActive(false);\n      ExampleModify.setActive(true);\n    } else if (value == 'draw') {\n      ExampleDraw.setActive(true);\n      ExampleModify.setActive(false);\n    }\n  }\n};\n\nExampleDraw.setActive(true);\nExampleModify.setActive(false);\n\n// The snap interaction must be added after the Modify and Draw interactions\n// in order for its map browser event handlers to be fired first. Its handlers\n// are responsible of doing the snapping.\nconst snap = new Snap({\n  source: vector.getSource()\n});\nmap.addInteraction(snap);\n"],"sourceRoot":""}