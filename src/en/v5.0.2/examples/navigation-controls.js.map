{"version":3,"sources":["webpack:///../src/ol/control/ZoomToExtent.js","webpack:///./navigation-controls.js"],"names":["ZoomToExtent","opt_options","options","this","extent","className","undefined","label","tipLabel","button","document","createElement","setAttribute","title","appendChild","createTextNode","Object","events","EventType","CLICK","handleClick_","cssClasses","css","element","Control","call","target","ol_util","prototype","event","preventDefault","handleZoomToExtent","view","getMap","getView","getProjection","getExtent","fit","control_ZoomToExtent","Map","controls","util","attributionOptions","collapsible","extend","layers","Tile","source","OSM","View","center","zoom"],"mappings":"mKAiCA,MAAAA,EAAA,SAAAC,GACA,MAAAC,EAAAD,MAMAE,KAAAC,OAAAF,EAAAE,OAAAF,EAAAE,OAAA,KAEA,MAAAC,OAAAC,IAAAJ,EAAAG,UAAAH,EAAAG,UAAA,iBAEAE,OAAAD,IAAAJ,EAAAK,MAAAL,EAAAK,MAAA,IACAC,OAAAF,IAAAJ,EAAAM,SAAAN,EAAAM,SAAA,gBACAC,EAAAC,SAAAC,cAAA,UACAF,EAAAG,aAAA,iBACAH,EAAAI,MAAAL,EACAC,EAAAK,YACA,iBAAAP,EAAAG,SAAAK,eAAAR,MAGAS,OAAAC,EAAA,EAAAD,CAAAP,EAAAS,EAAA,EAAAC,MAAAhB,KAAAiB,aAAAjB,MAEA,MAAAkB,EAAAhB,EAAA,IAAAiB,EAAA,MAAAA,EAAA,EACAC,EAAAb,SAAAC,cAAA,OACAY,EAAAlB,UAAAgB,EACAE,EAAAT,YAAAL,GAEAe,EAAA,EAAAC,KAAAtB,MACAoB,UACAG,OAAAxB,EAAAwB,UAIAV,OAAAW,EAAA,EAAAX,CAAAhB,EAAAwB,EAAA,GAOAxB,EAAA4B,UAAAR,aAAA,SAAAS,GACAA,EAAAC,iBACA3B,KAAA4B,sBAOA/B,EAAA4B,UAAAG,mBAAA,WACA,MACAC,EADA7B,KAAA8B,SACAC,UACA9B,EAAAD,KAAAC,OAAAD,KAAAC,OAAA4B,EAAAG,gBAAAC,YACAJ,EAAAK,IAAAjC,IAEA,IAAAkC,EAAA,gBCjFA,IAAAC,EAAA,GACAC,SAAAxB,OAAAyB,EAAA,EAAAzB,EACA0B,oBACAC,aAAA,KAEGC,QACH,IAAAN,GACAlC,QACA,oCACA,yCAIAyC,QACA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,KAGAtB,OAAA,MACAM,KAAA,IAAAiB,EAAA,GACAC,QAAA,KACAC,KAAA","file":"navigation-controls.js","sourcesContent":["/**\n * @module ol/control/ZoomToExtent\n */\nimport {inherits} from '../util.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport Control from '../control/Control.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {Element|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|Element} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {module:ol/extent~Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @constructor\n * @extends {module:ol/control/Control}\n * @param {module:ol/control/ZoomToExtent~Options=} opt_options Options.\n * @api\n */\nconst ZoomToExtent = function(opt_options) {\n  const options = opt_options ? opt_options : {};\n\n  /**\n   * @type {module:ol/extent~Extent}\n   * @protected\n   */\n  this.extent = options.extent ? options.extent : null;\n\n  const className = options.className !== undefined ? options.className : 'ol-zoom-extent';\n\n  const label = options.label !== undefined ? options.label : 'E';\n  const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n  const button = document.createElement('button');\n  button.setAttribute('type', 'button');\n  button.title = tipLabel;\n  button.appendChild(\n    typeof label === 'string' ? document.createTextNode(label) : label\n  );\n\n  listen(button, EventType.CLICK, this.handleClick_, this);\n\n  const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n  const element = document.createElement('div');\n  element.className = cssClasses;\n  element.appendChild(button);\n\n  Control.call(this, {\n    element: element,\n    target: options.target\n  });\n};\n\ninherits(ZoomToExtent, Control);\n\n\n/**\n * @param {Event} event The event to handle\n * @private\n */\nZoomToExtent.prototype.handleClick_ = function(event) {\n  event.preventDefault();\n  this.handleZoomToExtent();\n};\n\n\n/**\n * @protected\n */\nZoomToExtent.prototype.handleZoomToExtent = function() {\n  const map = this.getMap();\n  const view = map.getView();\n  const extent = !this.extent ? view.getProjection().getExtent() : this.extent;\n  view.fit(extent);\n};\nexport default ZoomToExtent;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls, ZoomToExtent} from '../src/ol/control.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport OSM from '../src/ol/source/OSM.js';\n\n\nconst map = new Map({\n  controls: defaultControls({\n    attributionOptions: {\n      collapsible: false\n    }\n  }).extend([\n    new ZoomToExtent({\n      extent: [\n        813079.7791264898, 5929220.284081122,\n        848966.9639063801, 5936863.986909639\n      ]\n    })\n  ]),\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n"],"sourceRoot":""}