{"version":3,"sources":["webpack:///./snap.js"],"names":["raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_7__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_9__","vector","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_10__","style","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_11__","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_12__","color","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","width","image","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_14__","radius","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","ExampleModify","init","this","select","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_3__","addInteraction","modify","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_4__","features","getFeatures","setEvents","selectedFeatures","on","forEach","remove","setActive","active","optionsForm","document","getElementById","ExampleDraw","Point","LineString","Polygon","Circle","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_5__","getSource","type","getActive","activeType","elements","value","onchange","e","getAttribute","snap","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_6__"],"mappings":"gOAOA,MAAAA,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,IAGAC,EAAA,IAAAC,EAAA,GACAH,OAAA,IAAAI,EAAA,EACAC,MAAA,IAAAC,EAAA,GACAC,KAAA,IAAAC,EAAA,GACAC,MAAA,6BAEAC,OAAA,IAAAC,EAAA,GACAF,MAAA,UACAG,MAAA,IAEAC,MAAA,IAAAC,EAAA,GACAC,OAAA,EACAR,KAAA,IAAAC,EAAA,GACAC,MAAA,kBAMAO,EAAA,IAAAC,EAAA,GACAC,QAAApB,EAAAI,GACAiB,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,SAAA,WACAC,KAAA,MAIAC,GACAC,KAAA,WACAC,KAAAC,OAAA,IAAAC,EAAA,EACAZ,EAAAa,eAAAH,KAAAC,QAEAD,KAAAI,OAAA,IAAAC,EAAA,GACAC,SAAAN,KAAAC,OAAAM,gBAEAjB,EAAAa,eAAAH,KAAAI,QAEAJ,KAAAQ,aAEAA,UAAA,WACA,MAAAC,EAAAT,KAAAC,OAAAM,cAEAP,KAAAC,OAAAS,GAAA,2BACAD,EAAAE,QAAAF,EAAAG,OAAAH,MAGAI,UAAA,SAAAC,GACAd,KAAAC,OAAAY,UAAAC,GACAd,KAAAI,OAAAS,UAAAC,KAGAhB,EAAAC,OAEA,MAAAgB,EAAAC,SAAAC,eAAA,gBAEAC,GACAnB,KAAA,WACAT,EAAAa,eAAAH,KAAAmB,OACAnB,KAAAmB,MAAAN,WAAA,GACAvB,EAAAa,eAAAH,KAAAoB,YACApB,KAAAoB,WAAAP,WAAA,GACAvB,EAAAa,eAAAH,KAAAqB,SACArB,KAAAqB,QAAAR,WAAA,GACAvB,EAAAa,eAAAH,KAAAsB,QACAtB,KAAAsB,OAAAT,WAAA,IAEAM,MAAA,IAAAI,EAAA,GACAjD,OAAAE,EAAAgD,YACAC,KAAA,UAEAL,WAAA,IAAAG,EAAA,GACAjD,OAAAE,EAAAgD,YACAC,KAAA,eAEAJ,QAAA,IAAAE,EAAA,GACAjD,OAAAE,EAAAgD,YACAC,KAAA,YAEAH,OAAA,IAAAC,EAAA,GACAjD,OAAAE,EAAAgD,YACAC,KAAA,WAEAC,UAAA,WACA,QAAA1B,KAAA2B,YAAA3B,UAAA2B,YAAAD,aAEAb,UAAA,SAAAC,GACA,MAAAW,EAAAV,EAAAa,SAAA,aAAAC,MACAf,GACAd,KAAA2B,YAAA3B,UAAA2B,YAAAd,WAAA,GACAb,KAAAyB,GAAAZ,WAAA,GACAb,KAAA2B,WAAAF,IAEAzB,KAAA2B,YAAA3B,UAAA2B,YAAAd,WAAA,GACAb,KAAA2B,WAAA,QAIAT,EAAAnB,OAOAgB,EAAAe,SAAA,SAAAC,GACA,MAAAN,EAAAM,EAAAtC,OAAAuC,aAAA,QACAH,EAAAE,EAAAtC,OAAAoC,MACA,aAAAJ,EACAP,EAAAQ,aAAAR,EAAAL,WAAA,GACG,eAAAY,IACH,UAAAI,GACAX,EAAAL,WAAA,GACAf,EAAAe,WAAA,IACK,QAAAgB,IACLX,EAAAL,WAAA,GACAf,EAAAe,WAAA,MAKAK,EAAAL,WAAA,GACAf,EAAAe,WAAA,GAKA,MAAAoB,EAAA,IAAAC,EAAA,GACA5D,OAAAE,EAAAgD,cAEAlC,EAAAa,eAAA8B","file":"snap.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Draw, Modify, Select, Snap} from '../src/ol/interaction.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst vector = new VectorLayer({\n  source: new VectorSource(),\n  style: new Style({\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 0.2)'\n    }),\n    stroke: new Stroke({\n      color: '#ffcc33',\n      width: 2\n    }),\n    image: new CircleStyle({\n      radius: 7,\n      fill: new Fill({\n        color: '#ffcc33'\n      })\n    })\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 4\n  })\n});\n\nconst ExampleModify = {\n  init: function() {\n    this.select = new Select();\n    map.addInteraction(this.select);\n\n    this.modify = new Modify({\n      features: this.select.getFeatures()\n    });\n    map.addInteraction(this.modify);\n\n    this.setEvents();\n  },\n  setEvents: function() {\n    const selectedFeatures = this.select.getFeatures();\n\n    this.select.on('change:active', function() {\n      selectedFeatures.forEach(selectedFeatures.remove, selectedFeatures);\n    });\n  },\n  setActive: function(active) {\n    this.select.setActive(active);\n    this.modify.setActive(active);\n  }\n};\nExampleModify.init();\n\nconst optionsForm = document.getElementById('options-form');\n\nconst ExampleDraw = {\n  init: function() {\n    map.addInteraction(this.Point);\n    this.Point.setActive(false);\n    map.addInteraction(this.LineString);\n    this.LineString.setActive(false);\n    map.addInteraction(this.Polygon);\n    this.Polygon.setActive(false);\n    map.addInteraction(this.Circle);\n    this.Circle.setActive(false);\n  },\n  Point: new Draw({\n    source: vector.getSource(),\n    type: 'Point'\n  }),\n  LineString: new Draw({\n    source: vector.getSource(),\n    type: 'LineString'\n  }),\n  Polygon: new Draw({\n    source: vector.getSource(),\n    type: 'Polygon'\n  }),\n  Circle: new Draw({\n    source: vector.getSource(),\n    type: 'Circle'\n  }),\n  getActive: function() {\n    return this.activeType ? this[this.activeType].getActive() : false;\n  },\n  setActive: function(active) {\n    const type = optionsForm.elements['draw-type'].value;\n    if (active) {\n      this.activeType && this[this.activeType].setActive(false);\n      this[type].setActive(true);\n      this.activeType = type;\n    } else {\n      this.activeType && this[this.activeType].setActive(false);\n      this.activeType = null;\n    }\n  }\n};\nExampleDraw.init();\n\n\n/**\n * Let user change the geometry type.\n * @param {Event} e Change event.\n */\noptionsForm.onchange = function(e) {\n  const type = e.target.getAttribute('name');\n  const value = e.target.value;\n  if (type == 'draw-type') {\n    ExampleDraw.getActive() && ExampleDraw.setActive(true);\n  } else if (type == 'interaction') {\n    if (value == 'modify') {\n      ExampleDraw.setActive(false);\n      ExampleModify.setActive(true);\n    } else if (value == 'draw') {\n      ExampleDraw.setActive(true);\n      ExampleModify.setActive(false);\n    }\n  }\n};\n\nExampleDraw.setActive(true);\nExampleModify.setActive(false);\n\n// The snap interaction must be added after the Modify and Draw interactions\n// in order for its map browser event handlers to be fired first. Its handlers\n// are responsible of doing the snapping.\nconst snap = new Snap({\n  source: vector.getSource()\n});\nmap.addInteraction(snap);\n"],"sourceRoot":""}