{"version":3,"sources":["webpack:///../src/ol/source/ImageArcGISRest.js","webpack:///./arcgis-image.js"],"names":["ImageArcGISRest","opt_options","options","source_Image","call","this","attributions","projection","resolutions","crossOrigin_","undefined","crossOrigin","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","Object","util","prototype","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","ol_extent","getExtent","F","FORMAT","TRANSPARENT","obj","centerX","slice","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","ol_Image","events","EventType","CHANGE","handleImageChange","getImageLoadFunction","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","asserts","uri","getUrl","setImageLoadFunction","changed","setUrl","updateParams","source_ImageArcGISRest","arcgis_image_layers","Tile","source","OSM","Image","Map","layers","target","view","View","center","zoom"],"mappings":"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","file":"arcgis-image.js","sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\nimport {inherits} from '../util.js';\nimport ImageWrapper from '../Image.js';\nimport {assert} from '../asserts.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\nimport {assign} from '../obj.js';\nimport ImageSource, {defaultImageLoadFunction} from '../source/Image.js';\nimport {appendParams} from '../uri.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {Object.<string,*>} params ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}\n * for further reference.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array.<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest} data source.\n *\n * @constructor\n * @fires ol/source/Image~ImageSourceEvent\n * @extends {module:ol/source/Image}\n * @param {module:ol/source/ImageArcGISRest~Options=} opt_options Image ArcGIS Rest Options.\n * @api\n */\nconst ImageArcGISRest = function(opt_options) {\n\n  const options = opt_options || {};\n\n  ImageSource.call(this, {\n    attributions: options.attributions,\n    projection: options.projection,\n    resolutions: options.resolutions\n  });\n\n  /**\n   * @private\n   * @type {?string}\n   */\n  this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.url_ = options.url;\n\n  /**\n   * @private\n   * @type {module:ol/Image~LoadFunction}\n   */\n  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n    options.imageLoadFunction : defaultImageLoadFunction;\n\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = options.params || {};\n\n  /**\n   * @private\n   * @type {module:ol/Image}\n   */\n  this.image_ = null;\n\n  /**\n   * @private\n   * @type {module:ol/size~Size}\n   */\n  this.imageSize_ = [0, 0];\n\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.renderedRevision_ = 0;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n};\n\ninherits(ImageArcGISRest, ImageSource);\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nImageArcGISRest.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @inheritDoc\n */\nImageArcGISRest.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {\n\n  if (this.url_ === undefined) {\n    return null;\n  }\n\n  resolution = this.findNearestResolution(resolution);\n  pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n  const image = this.image_;\n  if (image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)) {\n    return image;\n  }\n\n  const params = {\n    'F': 'image',\n    'FORMAT': 'PNG32',\n    'TRANSPARENT': true\n  };\n  assign(params, this.params_);\n\n  extent = extent.slice();\n  const centerX = (extent[0] + extent[2]) / 2;\n  const centerY = (extent[1] + extent[3]) / 2;\n  if (this.ratio_ != 1) {\n    const halfWidth = this.ratio_ * getWidth(extent) / 2;\n    const halfHeight = this.ratio_ * getHeight(extent) / 2;\n    extent[0] = centerX - halfWidth;\n    extent[1] = centerY - halfHeight;\n    extent[2] = centerX + halfWidth;\n    extent[3] = centerY + halfHeight;\n  }\n\n  const imageResolution = resolution / pixelRatio;\n\n  // Compute an integer width and height.\n  const width = Math.ceil(getWidth(extent) / imageResolution);\n  const height = Math.ceil(getHeight(extent) / imageResolution);\n\n  // Modify the extent to match the integer width and height.\n  extent[0] = centerX - imageResolution * width / 2;\n  extent[2] = centerX + imageResolution * width / 2;\n  extent[1] = centerY - imageResolution * height / 2;\n  extent[3] = centerY + imageResolution * height / 2;\n\n  this.imageSize_[0] = width;\n  this.imageSize_[1] = height;\n\n  const url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio,\n    projection, params);\n\n  this.image_ = new ImageWrapper(extent, resolution, pixelRatio,\n    url, this.crossOrigin_, this.imageLoadFunction_);\n\n  this.renderedRevision_ = this.getRevision();\n\n  listen(this.image_, EventType.CHANGE,\n    this.handleImageChange, this);\n\n  return this.image_;\n\n};\n\n\n/**\n * Return the image load function of the source.\n * @return {module:ol/Image~LoadFunction} The image load function.\n * @api\n */\nImageArcGISRest.prototype.getImageLoadFunction = function() {\n  return this.imageLoadFunction_;\n};\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/size~Size} size Size.\n * @param {number} pixelRatio Pixel ratio.\n * @param {module:ol/proj/Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string} Request URL.\n * @private\n */\nImageArcGISRest.prototype.getRequestUrl_ = function(extent, size, pixelRatio, projection, params) {\n  // ArcGIS Server only wants the numeric portion of the projection ID.\n  const srid = projection.getCode().split(':').pop();\n\n  params['SIZE'] = size[0] + ',' + size[1];\n  params['BBOX'] = extent.join(',');\n  params['BBOXSR'] = srid;\n  params['IMAGESR'] = srid;\n  params['DPI'] = Math.round(90 * pixelRatio);\n\n  const url = this.url_;\n\n  const modifiedUrl = url\n    .replace(/MapServer\\/?$/, 'MapServer/export')\n    .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n  if (modifiedUrl == url) {\n    assert(false, 50); // `options.featureTypes` should be an Array\n  }\n  return appendParams(modifiedUrl, params);\n};\n\n\n/**\n * Return the URL used for this ArcGIS source.\n * @return {string|undefined} URL.\n * @api\n */\nImageArcGISRest.prototype.getUrl = function() {\n  return this.url_;\n};\n\n\n/**\n * Set the image load function of the source.\n * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.\n * @api\n */\nImageArcGISRest.prototype.setImageLoadFunction = function(imageLoadFunction) {\n  this.image_ = null;\n  this.imageLoadFunction_ = imageLoadFunction;\n  this.changed();\n};\n\n\n/**\n * Set the URL to use for requests.\n * @param {string|undefined} url URL.\n * @api\n */\nImageArcGISRest.prototype.setUrl = function(url) {\n  if (url != this.url_) {\n    this.url_ = url;\n    this.image_ = null;\n    this.changed();\n  }\n};\n\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nImageArcGISRest.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.image_ = null;\n  this.changed();\n};\nexport default ImageArcGISRest;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Tile as TileLayer, Image as ImageLayer} from '../src/ol/layer.js';\nimport {OSM, ImageArcGISRest} from '../src/ol/source.js';\n\nconst url = 'https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/' +\n    'Specialty/ESRI_StateCityHighway_USA/MapServer';\n\nconst layers = [\n  new TileLayer({\n    source: new OSM()\n  }),\n  new ImageLayer({\n    source: new ImageArcGISRest({\n      ratio: 1,\n      params: {},\n      url: url\n    })\n  })\n];\nconst map = new Map({\n  layers: layers,\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4\n  })\n});\n"],"sourceRoot":""}