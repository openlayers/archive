{"version":3,"sources":["webpack:///./osm-vector-tiles.js"],"names":["roadStyleCache","roadColor","major_road","minor_road","highway","buildingStyle","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","color","opacity","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","width","waterStyle","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","_src_ol_layer_VectorTile_js__WEBPACK_IMPORTED_MODULE_3__","source","_src_ol_source_VectorTile_js__WEBPACK_IMPORTED_MODULE_5__","attributions","format","_src_ol_format_TopoJSON_js__WEBPACK_IMPORTED_MODULE_2__","layerName","maxZoom","url","style","feature","resolution","get","kind","railway","sort_key","styleKey","zIndex","roadStyle","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","Object","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_4__","zoom"],"mappings":"gLAQA,MAEAA,KACAC,GACAC,WAAA,OACAC,WAAA,OACAC,QAAA,QAEAC,EAAA,IAAAC,EAAA,GACAC,KAAA,IAAAC,EAAA,GACAC,MAAA,OACAC,QAAA,KAEAC,OAAA,IAAAC,EAAA,GACAH,MAAA,OACAI,MAAA,MAGAC,EAAA,IAAAR,EAAA,GACAC,KAAA,IAAAC,EAAA,GACAC,MAAA,cA8BA,IAAAM,EAAA,GACAC,QACA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAC,aAAA,8FAEAC,OAAA,IAAAC,EAAA,GACAC,UAAA,QACAP,QAAA,+BAEAQ,QAAA,GACAC,IAAA,mGAEAC,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAE,IAAA,UACA,mBAAAf,EACA,mBA3CA,SAAAa,GACA,MAAAG,EAAAH,EAAAE,IAAA,QACAE,EAAAJ,EAAAE,IAAA,WACAG,EAAAL,EAAAE,IAAA,YACAI,EAAAH,EAAA,IAAAC,EAAA,IAAAC,EACA,IAAAN,EAAA1B,EAAAiC,GACA,IAAAP,EAAA,CACA,IAAAjB,EAAAI,EACAkB,GACAtB,EAAA,OACAI,EAAA,IAEAJ,EAAAR,EAAA6B,GACAjB,EAAA,WAAAiB,EAAA,OAEAJ,EAAA,IAAApB,EAAA,GACAK,OAAA,IAAAC,EAAA,GACAH,QACAI,UAEAqB,OAAAF,IAEAhC,EAAAiC,GAAAP,EAEA,OAAAA,EAmBAS,CAAAR,GACA,uBAAAC,EAAA,GAAAvB,EAAA,KACA,yBAKA+B,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,OAAAC,OAAAC,EAAA,EAAAD,GAAA,kBACAhB,QAAA,GACAkB,KAAA","file":"osm-vector-tiles.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TopoJSON from '../src/ol/format/TopoJSON.js';\nimport VectorTileLayer from '../src/ol/layer/VectorTile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport VectorTileSource from '../src/ol/source/VectorTile.js';\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\n\nconst key = 'vector-tiles-5eJz6JX';\n\nconst roadStyleCache = {};\nconst roadColor = {\n  'major_road': '#776',\n  'minor_road': '#ccb',\n  'highway': '#f39'\n};\nconst buildingStyle = new Style({\n  fill: new Fill({\n    color: '#666',\n    opacity: 0.4\n  }),\n  stroke: new Stroke({\n    color: '#444',\n    width: 1\n  })\n});\nconst waterStyle = new Style({\n  fill: new Fill({\n    color: '#9db9e8'\n  })\n});\nconst roadStyle = function(feature) {\n  const kind = feature.get('kind');\n  const railway = feature.get('railway');\n  const sort_key = feature.get('sort_key');\n  const styleKey = kind + '/' + railway + '/' + sort_key;\n  let style = roadStyleCache[styleKey];\n  if (!style) {\n    let color, width;\n    if (railway) {\n      color = '#7de';\n      width = 1;\n    } else {\n      color = roadColor[kind];\n      width = kind == 'highway' ? 1.5 : 1;\n    }\n    style = new Style({\n      stroke: new Stroke({\n        color: color,\n        width: width\n      }),\n      zIndex: sort_key\n    });\n    roadStyleCache[styleKey] = style;\n  }\n  return style;\n};\n\nconst map = new Map({\n  layers: [\n    new VectorTileLayer({\n      source: new VectorTileSource({\n        attributions: '&copy; OpenStreetMap contributors, Whoâ€™s On First, ' +\n            'Natural Earth, and openstreetmapdata.com',\n        format: new TopoJSON({\n          layerName: 'layer',\n          layers: ['water', 'roads', 'buildings']\n        }),\n        maxZoom: 19,\n        url: 'https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson?api_key=' + key\n      }),\n      style: function(feature, resolution) {\n        switch (feature.get('layer')) {\n          case 'water': return waterStyle;\n          case 'roads': return roadStyle(feature);\n          case 'buildings': return (resolution < 10) ? buildingStyle : null;\n          default: return null;\n        }\n      }\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-74.0064, 40.7142]),\n    maxZoom: 19,\n    zoom: 15\n  })\n});\n"],"sourceRoot":""}