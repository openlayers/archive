{"version":3,"sources":["webpack:///./layer-spy.js"],"names":["key","roads","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_2__","source","_src_ol_source_BingMaps_js__WEBPACK_IMPORTED_MODULE_4__","imagerySet","imagery","container","document","getElementById","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","Object","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_3__","zoom","radius","addEventListener","evt","which","Math","min","render","preventDefault","max","mousePosition","event","getEventPixel","on","ctx","context","pixelRatio","frameState","save","beginPath","arc","PI","lineWidth","strokeStyle","stroke","clip","restore"],"mappings":"0IAMA,MAAAA,EAAA,mEAEAC,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GAAwBJ,MAAAK,WAAA,WAGxBC,EAAA,IAAAJ,EAAA,GACAC,OAAA,IAAAC,EAAA,GAAwBJ,MAAAK,WAAA,aAGxBE,EAAAC,SAAAC,eAAA,OAEAC,EAAA,IAAAC,EAAA,GACAC,QAAAX,EAAAK,GACAO,OAAAN,EACAO,KAAA,IAAAC,EAAA,GACAC,OAAAC,OAAAC,EAAA,EAAAD,GAAA,WACAE,KAAA,MAIA,IAAAC,EAAA,GACAZ,SAAAa,iBAAA,mBAAAC,GACA,KAAAA,EAAAC,OACAH,EAAAI,KAAAC,IAAAL,EAAA,OACAV,EAAAgB,SACAJ,EAAAK,kBACG,KAAAL,EAAAC,QACHH,EAAAI,KAAAI,IAAAR,EAAA,MACAV,EAAAgB,SACAJ,EAAAK,oBAKA,IAAAE,EAAA,KAEAtB,EAAAc,iBAAA,qBAAAS,GACAD,EAAAnB,EAAAqB,cAAAD,GACApB,EAAAgB,WAGAnB,EAAAc,iBAAA,sBACAQ,EAAA,KACAnB,EAAAgB,WAIApB,EAAA0B,GAAA,sBAAAF,GACA,MAAAG,EAAAH,EAAAI,QACAC,EAAAL,EAAAM,WAAAD,WACAF,EAAAI,OACAJ,EAAAK,YACAT,IAEAI,EAAAM,IAAAV,EAAA,GAAAM,EAAAN,EAAA,GAAAM,EACAf,EAAAe,EAAA,IAAAX,KAAAgB,IACAP,EAAAQ,UAAA,EAAAN,EACAF,EAAAS,YAAA,kBACAT,EAAAU,UAEAV,EAAAW,SAIAtC,EAAA0B,GAAA,uBAAAF,GACAA,EAAAI,QACAW","file":"layer-spy.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\n\nconst key = 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5';\n\nconst roads = new TileLayer({\n  source: new BingMaps({key: key, imagerySet: 'Road'})\n});\n\nconst imagery = new TileLayer({\n  source: new BingMaps({key: key, imagerySet: 'Aerial'})\n});\n\nconst container = document.getElementById('map');\n\nconst map = new Map({\n  layers: [roads, imagery],\n  target: container,\n  view: new View({\n    center: fromLonLat([-109, 46.5]),\n    zoom: 6\n  })\n});\n\nlet radius = 75;\ndocument.addEventListener('keydown', function(evt) {\n  if (evt.which === 38) {\n    radius = Math.min(radius + 5, 150);\n    map.render();\n    evt.preventDefault();\n  } else if (evt.which === 40) {\n    radius = Math.max(radius - 5, 25);\n    map.render();\n    evt.preventDefault();\n  }\n});\n\n// get the pixel position with every move\nlet mousePosition = null;\n\ncontainer.addEventListener('mousemove', function(event) {\n  mousePosition = map.getEventPixel(event);\n  map.render();\n});\n\ncontainer.addEventListener('mouseout', function() {\n  mousePosition = null;\n  map.render();\n});\n\n// before rendering the layer, do some clipping\nimagery.on('precompose', function(event) {\n  const ctx = event.context;\n  const pixelRatio = event.frameState.pixelRatio;\n  ctx.save();\n  ctx.beginPath();\n  if (mousePosition) {\n    // only show a circle around the mouse\n    ctx.arc(mousePosition[0] * pixelRatio, mousePosition[1] * pixelRatio,\n      radius * pixelRatio, 0, 2 * Math.PI);\n    ctx.lineWidth = 5 * pixelRatio;\n    ctx.strokeStyle = 'rgba(0,0,0,0.5)';\n    ctx.stroke();\n  }\n  ctx.clip();\n});\n\n// after rendering the layer, restore the canvas context\nimagery.on('postcompose', function(event) {\n  const ctx = event.context;\n  ctx.restore();\n});\n"],"sourceRoot":""}