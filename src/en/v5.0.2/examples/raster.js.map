{"version":3,"sources":["webpack:///./raster.js"],"names":["vgi","pixel","r","g","b","summarize","value","counts","min","max","num","values","length","index","Math","floor","delta","bing","_src_ol_source_BingMaps_js__WEBPACK_IMPORTED_MODULE_4__","key","imagerySet","raster","_src_ol_source_Raster_js__WEBPACK_IMPORTED_MODULE_5__","sources","operation","pixels","data","threshold","lib","set","on","event","Array","i","createCounts","get","resolution","timer","clearTimeout","setTimeout","yScale","d3","scaleLinear","domain","range","plotHeight","bar","chart","selectAll","enter","append","attr","count","barWidth","transition","changed","area","tip","html","toFixed","replace","message","style","left","chartRect","top","y","opacity","each","bind","schedulePlot","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_2__","source","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","minZoom","maxZoom","select","node","getBoundingClientRect","document","body"],"mappings":"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","file":"raster.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport RasterSource from '../src/ol/source/Raster.js';\n\nconst minVgi = 0;\nconst maxVgi = 0.25;\nconst bins = 10;\n\n\n/**\n * Calculate the Vegetation Greenness Index (VGI) from an input pixel.  This\n * is a rough estimate assuming that pixel values correspond to reflectance.\n * @param {Array.<number>} pixel An array of [R, G, B, A] values.\n * @return {number} The VGI value for the given pixel.\n */\nfunction vgi(pixel) {\n  const r = pixel[0] / 255;\n  const g = pixel[1] / 255;\n  const b = pixel[2] / 255;\n  return (2 * g - r - b) / (2 * g + r + b);\n}\n\n\n/**\n * Summarize values for a histogram.\n * @param {numver} value A VGI value.\n * @param {Object} counts An object for keeping track of VGI counts.\n */\nfunction summarize(value, counts) {\n  const min = counts.min;\n  const max = counts.max;\n  const num = counts.values.length;\n  if (value < min) {\n    // do nothing\n  } else if (value >= max) {\n    counts.values[num - 1] += 1;\n  } else {\n    const index = Math.floor((value - min) / counts.delta);\n    counts.values[index] += 1;\n  }\n}\n\n\n/**\n * Use aerial imagery as the input data for the raster source.\n */\nconst bing = new BingMaps({\n  key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5',\n  imagerySet: 'Aerial'\n});\n\n\n/**\n * Create a raster source where pixels with VGI values above a threshold will\n * be colored green.\n */\nconst raster = new RasterSource({\n  sources: [bing],\n  /**\n   * Run calculations on pixel data.\n   * @param {Array} pixels List of pixels (one per source).\n   * @param {Object} data User data object.\n   * @return {Array} The output pixel.\n   */\n  operation: function(pixels, data) {\n    const pixel = pixels[0];\n    const value = vgi(pixel);\n    summarize(value, data.counts);\n    if (value >= data.threshold) {\n      pixel[0] = 0;\n      pixel[1] = 255;\n      pixel[2] = 0;\n      pixel[3] = 128;\n    } else {\n      pixel[3] = 0;\n    }\n    return pixel;\n  },\n  lib: {\n    vgi: vgi,\n    summarize: summarize\n  }\n});\nraster.set('threshold', 0.1);\n\nfunction createCounts(min, max, num) {\n  const values = new Array(num);\n  for (let i = 0; i < num; ++i) {\n    values[i] = 0;\n  }\n  return {\n    min: min,\n    max: max,\n    values: values,\n    delta: (max - min) / num\n  };\n}\n\nraster.on('beforeoperations', function(event) {\n  event.data.counts = createCounts(minVgi, maxVgi, bins);\n  event.data.threshold = raster.get('threshold');\n});\n\nraster.on('afteroperations', function(event) {\n  schedulePlot(event.resolution, event.data.counts, event.data.threshold);\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: bing\n    }),\n    new ImageLayer({\n      source: raster\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [-9651695, 4937351],\n    zoom: 13,\n    minZoom: 12,\n    maxZoom: 19\n  })\n});\n\n\nlet timer = null;\nfunction schedulePlot(resolution, counts, threshold) {\n  if (timer) {\n    clearTimeout(timer);\n    timer = null;\n  }\n  timer = setTimeout(plot.bind(null, resolution, counts, threshold), 1000 / 60);\n}\n\nconst barWidth = 15;\nconst plotHeight = 150;\nconst chart = d3.select('#plot').append('svg')\n  .attr('width', barWidth * bins)\n  .attr('height', plotHeight);\n\nconst chartRect = chart.node().getBoundingClientRect();\n\nconst tip = d3.select(document.body).append('div')\n  .attr('class', 'tip');\n\nfunction plot(resolution, counts, threshold) {\n  const yScale = d3.scaleLinear()\n    .domain([0, d3.max(counts.values)])\n    .range([0, plotHeight]);\n\n  const bar = chart.selectAll('rect').data(counts.values);\n\n  bar.enter().append('rect');\n\n  bar.attr('class', function(count, index) {\n    const value = counts.min + (index * counts.delta);\n    return 'bar' + (value >= threshold ? ' selected' : '');\n  })\n    .attr('width', barWidth - 2);\n\n  bar.transition().attr('transform', function(value, index) {\n    return 'translate(' + (index * barWidth) + ', ' +\n        (plotHeight - yScale(value)) + ')';\n  })\n    .attr('height', yScale);\n\n  bar.on('mousemove', function(count, index) {\n    const threshold = counts.min + (index * counts.delta);\n    if (raster.get('threshold') !== threshold) {\n      raster.set('threshold', threshold);\n      raster.changed();\n    }\n  });\n\n  bar.on('mouseover', function(count, index) {\n    let area = 0;\n    for (let i = counts.values.length - 1; i >= index; --i) {\n      area += resolution * resolution * counts.values[i];\n    }\n    tip.html(message(counts.min + (index * counts.delta), area));\n    tip.style('display', 'block');\n    tip.transition().style({\n      left: (chartRect.left + (index * barWidth) + (barWidth / 2)) + 'px',\n      top: (d3.event.y - 60) + 'px',\n      opacity: 1\n    });\n  });\n\n  bar.on('mouseout', function() {\n    tip.transition().style('opacity', 0).each('end', function() {\n      tip.style('display', 'none');\n    });\n  });\n\n}\n\nfunction message(value, area) {\n  const acres = (area / 4046.86).toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return acres + ' acres at<br>' + value.toFixed(2) + ' VGI or above';\n}\n"],"sourceRoot":""}