{"version":3,"sources":["webpack:///../src/ol/geom/flat/flip.js","webpack:///../src/ol/format/Polyline.js","webpack:///./feature-move-animation.js"],"names":["flipXY","flatCoordinates","offset","end","stride","opt_dest","opt_destOffset","dest","destOffset","undefined","j","x","k","length","Polyline","opt_options","options","TextFeature","call","this","dataProjection","Object","proj","factor_","factor","geometryLayout_","geometryLayout","GeometryLayout","XY","encodeDeltas","numbers","opt_factor","d","lastNumbers","Array","i","ii","num","delta","Math","round","encoded","encodeUnsignedInteger","encodeUnsignedIntegers","encodeSignedIntegers","encodeFloats","decodeDeltas","current","shift","b","charCodeAt","push","decodeUnsignedIntegers","decodeSignedIntegers","decodeFloats","value","String","fromCharCode","util","prototype","readFeature","readFeatureFromText","text","geometry","readGeometryFromText","Feature","readFeatures","readFeaturesFromText","readGeometry","SimpleGeometry","coordinates","inflate","format_Feature","LineString","adaptOptions","readProjection","writeFeatureText","feature","getGeometry","writeGeometryText","asserts","writeFeaturesText","features","writeGeometry","getFlatCoordinates","getStride","format_Polyline","polyline","join","route","featureProjection","routeCoords","getCoordinates","routeLength","routeFeature","type","geoMarker","Point","startMarker","endMarker","styles","Style","stroke","Stroke","width","color","icon","image","Icon","anchor","src","Circle","radius","snapToPixel","fill","Fill","speed","now","animating","speedInput","document","getElementById","startButton","vectorLayer","Vector","source","source_Vector","style","get","center","map","Map","target","loadTilesWhileAnimating","view","View","zoom","minZoom","maxZoom","layers","Tile","BingMaps","imagerySet","key","moveFeature","event","vectorContext","frameState","elapsedTime","time","index","stopAnimation","currentPoint","drawFeature","render","ended","textContent","coord","setCoordinates","un","addEventListener","Date","getTime","setStyle","getView","setCenter","on"],"mappings":"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","file":"feature-move-animation.js","sourcesContent":["/**\n * @module ol/geom/flat/flip\n */\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array.<number>=} opt_dest Destination.\n * @param {number=} opt_destOffset Destination offset.\n * @return {Array.<number>} Flat coordinates.\n */\nexport function flipXY(flatCoordinates, offset, end, stride, opt_dest, opt_destOffset) {\n  let dest, destOffset;\n  if (opt_dest !== undefined) {\n    dest = opt_dest;\n    destOffset = opt_destOffset !== undefined ? opt_destOffset : 0;\n  } else {\n    dest = [];\n    destOffset = 0;\n  }\n  let j = offset;\n  while (j < end) {\n    const x = flatCoordinates[j++];\n    dest[destOffset++] = flatCoordinates[j++];\n    dest[destOffset++] = x;\n    for (let k = 2; k < stride; ++k) {\n      dest[destOffset++] = flatCoordinates[j++];\n    }\n  }\n  dest.length = destOffset;\n  return dest;\n}\n","/**\n * @module ol/format/Polyline\n */\nimport {inherits} from '../util.js';\nimport {assert} from '../asserts.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport TextFeature from '../format/TextFeature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\nimport {flipXY} from '../geom/flat/flip.js';\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\nimport {get as getProjection} from '../proj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.\n * @property {module:ol/geom/GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the format reader.\n */\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the Encoded\n * Polyline Algorithm Format.\n *\n * @constructor\n * @extends {module:ol/format/TextFeature}\n * @param {module:ol/format/Polyline~Options=} opt_options Optional configuration object.\n * @api\n */\nconst Polyline = function(opt_options) {\n\n  const options = opt_options ? opt_options : {};\n\n  TextFeature.call(this);\n\n  /**\n   * @inheritDoc\n   */\n  this.dataProjection = getProjection('EPSG:4326');\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.factor_ = options.factor ? options.factor : 1e5;\n\n  /**\n   * @private\n   * @type {module:ol/geom/GeometryLayout}\n   */\n  this.geometryLayout_ = options.geometryLayout ?\n    options.geometryLayout : GeometryLayout.XY;\n};\n\ninherits(Polyline, TextFeature);\n\n\n/**\n * Encode a list of n-dimensional points and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array.<number>} numbers A list of n-dimensional points.\n * @param {number} stride The number of dimension of the points in the list.\n * @param {number=} opt_factor The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\nexport function encodeDeltas(numbers, stride, opt_factor) {\n  const factor = opt_factor ? opt_factor : 1e5;\n  let d;\n\n  const lastNumbers = new Array(stride);\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  for (let i = 0, ii = numbers.length; i < ii;) {\n    for (d = 0; d < stride; ++d, ++i) {\n      const num = numbers[i];\n      const delta = num - lastNumbers[d];\n      lastNumbers[d] = num;\n\n      numbers[i] = delta;\n    }\n  }\n\n  return encodeFloats(numbers, factor);\n}\n\n\n/**\n * Decode a list of n-dimensional points from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} stride The number of dimension of the points in the\n *     encoded string.\n * @param {number=} opt_factor The factor by which the resulting numbers will\n *     be divided. Default is `1e5`.\n * @return {Array.<number>} A list of n-dimensional points.\n * @api\n */\nexport function decodeDeltas(encoded, stride, opt_factor) {\n  const factor = opt_factor ? opt_factor : 1e5;\n  let d;\n\n  /** @type {Array.<number>} */\n  const lastNumbers = new Array(stride);\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  const numbers = decodeFloats(encoded, factor);\n\n  for (let i = 0, ii = numbers.length; i < ii;) {\n    for (d = 0; d < stride; ++d, ++i) {\n      lastNumbers[d] += numbers[i];\n\n      numbers[i] = lastNumbers[d];\n    }\n  }\n\n  return numbers;\n}\n\n\n/**\n * Encode a list of floating point numbers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array.<number>} numbers A list of floating point numbers.\n * @param {number=} opt_factor The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\nexport function encodeFloats(numbers, opt_factor) {\n  const factor = opt_factor ? opt_factor : 1e5;\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] = Math.round(numbers[i] * factor);\n  }\n\n  return encodeSignedIntegers(numbers);\n}\n\n\n/**\n * Decode a list of floating point numbers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number=} opt_factor The factor by which the result will be divided.\n *     Default is `1e5`.\n * @return {Array.<number>} A list of floating point numbers.\n * @api\n */\nexport function decodeFloats(encoded, opt_factor) {\n  const factor = opt_factor ? opt_factor : 1e5;\n  const numbers = decodeSignedIntegers(encoded);\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] /= factor;\n  }\n  return numbers;\n}\n\n\n/**\n * Encode a list of signed integers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array.<number>} numbers A list of signed integers.\n * @return {string} The encoded string.\n */\nexport function encodeSignedIntegers(numbers) {\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    const num = numbers[i];\n    numbers[i] = (num < 0) ? ~(num << 1) : (num << 1);\n  }\n  return encodeUnsignedIntegers(numbers);\n}\n\n\n/**\n * Decode a list of signed integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array.<number>} A list of signed integers.\n */\nexport function decodeSignedIntegers(encoded) {\n  const numbers = decodeUnsignedIntegers(encoded);\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    const num = numbers[i];\n    numbers[i] = (num & 1) ? ~(num >> 1) : (num >> 1);\n  }\n  return numbers;\n}\n\n\n/**\n * Encode a list of unsigned integers and return an encoded string\n *\n * @param {Array.<number>} numbers A list of unsigned integers.\n * @return {string} The encoded string.\n */\nexport function encodeUnsignedIntegers(numbers) {\n  let encoded = '';\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    encoded += encodeUnsignedInteger(numbers[i]);\n  }\n  return encoded;\n}\n\n\n/**\n * Decode a list of unsigned integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array.<number>} A list of unsigned integers.\n */\nexport function decodeUnsignedIntegers(encoded) {\n  const numbers = [];\n  let current = 0;\n  let shift = 0;\n  for (let i = 0, ii = encoded.length; i < ii; ++i) {\n    const b = encoded.charCodeAt(i) - 63;\n    current |= (b & 0x1f) << shift;\n    if (b < 0x20) {\n      numbers.push(current);\n      current = 0;\n      shift = 0;\n    } else {\n      shift += 5;\n    }\n  }\n  return numbers;\n}\n\n\n/**\n * Encode one single unsigned integer and return an encoded string\n *\n * @param {number} num Unsigned integer that should be encoded.\n * @return {string} The encoded string.\n */\nexport function encodeUnsignedInteger(num) {\n  let value, encoded = '';\n  while (num >= 0x20) {\n    value = (0x20 | (num & 0x1f)) + 63;\n    encoded += String.fromCharCode(value);\n    num >>= 5;\n  }\n  value = num + 63;\n  encoded += String.fromCharCode(value);\n  return encoded;\n}\n\n\n/**\n * Read the feature from the Polyline source. The coordinates are assumed to be\n * in two dimensions and in latitude, longitude order.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {module:ol/Feature} Feature.\n * @api\n */\nPolyline.prototype.readFeature;\n\n\n/**\n * @inheritDoc\n */\nPolyline.prototype.readFeatureFromText = function(text, opt_options) {\n  const geometry = this.readGeometryFromText(text, opt_options);\n  return new Feature(geometry);\n};\n\n\n/**\n * Read the feature from the source. As Polyline sources contain a single\n * feature, this will return the feature in an array.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\nPolyline.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nPolyline.prototype.readFeaturesFromText = function(text, opt_options) {\n  const feature = this.readFeatureFromText(text, opt_options);\n  return [feature];\n};\n\n\n/**\n * Read the geometry from the source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {module:ol/geom/Geometry} Geometry.\n * @api\n */\nPolyline.prototype.readGeometry;\n\n\n/**\n * @inheritDoc\n */\nPolyline.prototype.readGeometryFromText = function(text, opt_options) {\n  const stride = getStrideForLayout(this.geometryLayout_);\n  const flatCoordinates = decodeDeltas(text, stride, this.factor_);\n  flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n  const coordinates = inflateCoordinates(flatCoordinates, 0, flatCoordinates.length, stride);\n\n  return (\n    /** @type {module:ol/geom/Geometry} */ (transformWithOptions(\n      new LineString(coordinates, this.geometryLayout_),\n      false,\n      this.adaptOptions(opt_options)\n    ))\n  );\n};\n\n\n/**\n * Read the projection from a Polyline source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {module:ol/proj/Projection} Projection.\n * @api\n */\nPolyline.prototype.readProjection;\n\n\n/**\n * @inheritDoc\n */\nPolyline.prototype.writeFeatureText = function(feature, opt_options) {\n  const geometry = feature.getGeometry();\n  if (geometry) {\n    return this.writeGeometryText(geometry, opt_options);\n  } else {\n    assert(false, 40); // Expected `feature` to have a geometry\n    return '';\n  }\n};\n\n\n/**\n * @inheritDoc\n */\nPolyline.prototype.writeFeaturesText = function(features, opt_options) {\n  return this.writeFeatureText(features[0], opt_options);\n};\n\n\n/**\n * Write a single geometry in Polyline format.\n *\n * @function\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {string} Geometry.\n * @api\n */\nPolyline.prototype.writeGeometry;\n\n\n/**\n * @inheritDoc\n */\nPolyline.prototype.writeGeometryText = function(geometry, opt_options) {\n  geometry = /** @type {module:ol/geom/LineString} */\n    (transformWithOptions(geometry, true, this.adaptOptions(opt_options)));\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n  return encodeDeltas(flatCoordinates, stride, this.factor_);\n};\nexport default Polyline;\n","import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Polyline from '../src/ol/format/Polyline.js';\nimport Point from '../src/ol/geom/Point.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Icon, Stroke, Style} from '../src/ol/style.js';\n\n// This long string is placed here due to jsFiddle limitations.\n// It is usually loaded with AJAX.\nconst polyline = [\n  'hldhx@lnau`BCG_EaC??cFjAwDjF??uBlKMd@}@z@??aC^yk@z_@se@b[wFdE??wFfE}N',\n  'fIoGxB_I\\\\gG}@eHoCyTmPqGaBaHOoD\\\\??yVrGotA|N??o[N_STiwAtEmHGeHcAkiA}^',\n  'aMyBiHOkFNoI`CcVvM??gG^gF_@iJwC??eCcA]OoL}DwFyCaCgCcCwDcGwHsSoX??wI_E',\n  'kUFmq@hBiOqBgTwS??iYse@gYq\\\\cp@ce@{vA}s@csJqaE}{@iRaqE{lBeRoIwd@_T{]_',\n  'Ngn@{PmhEwaA{SeF_u@kQuyAw]wQeEgtAsZ}LiCarAkVwI}D??_}RcjEinPspDwSqCgs@',\n  'sPua@_OkXaMeT_Nwk@ob@gV}TiYs[uTwXoNmT{Uyb@wNg]{Nqa@oDgNeJu_@_G}YsFw]k',\n  'DuZyDmm@i_@uyIJe~@jCg|@nGiv@zUi_BfNqaAvIow@dEed@dCcf@r@qz@Egs@{Acu@mC',\n  'um@yIey@gGig@cK_m@aSku@qRil@we@{mAeTej@}Tkz@cLgr@aHko@qOmcEaJw~C{w@ka',\n  'i@qBchBq@kmBS{kDnBscBnFu_Dbc@_~QHeU`IuyDrC_}@bByp@fCyoA?qMbD}{AIkeAgB',\n  'k_A_A{UsDke@gFej@qH{o@qGgb@qH{`@mMgm@uQus@kL{_@yOmd@ymBgwE}x@ouBwtA__',\n  'DuhEgaKuWct@gp@cnBii@mlBa_@}|Asj@qrCg^eaC}L{dAaJ_aAiOyjByH{nAuYu`GsAw',\n  'Xyn@ywMyOyqD{_@cfIcDe}@y@aeBJmwA`CkiAbFkhBlTgdDdPyiB`W}xDnSa}DbJyhCrX',\n  'itAhT}x@bE}Z_@qW_Kwv@qKaaAiBgXvIm}A~JovAxCqW~WanB`XewBbK{_A`K}fBvAmi@',\n  'xBycBeCauBoF}}@qJioAww@gjHaPopA_NurAyJku@uGmi@cDs[eRaiBkQstAsQkcByNma',\n  'CsK_uBcJgbEw@gkB_@ypEqDoqSm@eZcDwjBoGw`BoMegBaU_`Ce_@_uBqb@ytBwkFqiT_',\n  'fAqfEwe@mfCka@_eC_UmlB}MmaBeWkkDeHwqAoX}~DcBsZmLcxBqOwqE_DkyAuJmrJ\\\\o',\n  '~CfIewG|YibQxBssB?es@qGciA}RorAoVajA_nAodD{[y`AgPqp@mKwr@ms@umEaW{dAm',\n  'b@umAw|@ojBwzDaaJsmBwbEgdCsrFqhAihDquAi`Fux@}_Dui@_eB_u@guCuyAuiHukA_',\n  'lKszAu|OmaA{wKm}@clHs_A_rEahCssKo\\\\sgBsSglAqk@yvDcS_wAyTwpBmPc|BwZknF',\n  'oFscB_GsaDiZmyMyLgtHgQonHqT{hKaPg}Dqq@m~Hym@c`EuiBudIabB{hF{pWifx@snA',\n  'w`GkFyVqf@y~BkoAi}Lel@wtc@}`@oaXi_C}pZsi@eqGsSuqJ|Lqeb@e]kgPcaAu}SkDw',\n  'zGhn@gjYh\\\\qlNZovJieBqja@ed@siO{[ol\\\\kCmjMe\\\\isHorCmec@uLebB}EqiBaCg}',\n  '@m@qwHrT_vFps@kkI`uAszIrpHuzYxx@e{Crw@kpDhN{wBtQarDy@knFgP_yCu\\\\wyCwy',\n  'A{kHo~@omEoYmoDaEcPiuAosDagD}rO{{AsyEihCayFilLaiUqm@_bAumFo}DgqA_uByi',\n  '@swC~AkzDlhA}xEvcBa}Cxk@ql@`rAo|@~bBq{@``Bye@djDww@z_C_cAtn@ye@nfC_eC',\n  '|gGahH~s@w}@``Fi~FpnAooC|u@wlEaEedRlYkrPvKerBfYs}Arg@m}AtrCkzElw@gjBb',\n  'h@woBhR{gCwGkgCc[wtCuOapAcFoh@uBy[yBgr@c@iq@o@wvEv@sp@`FajBfCaq@fIipA',\n  'dy@ewJlUc`ExGuaBdEmbBpBssArAuqBBg}@s@g{AkB{bBif@_bYmC}r@kDgm@sPq_BuJ_',\n  's@{X_{AsK_d@eM{d@wVgx@oWcu@??aDmOkNia@wFoSmDyMyCkPiBePwAob@XcQ|@oNdCo',\n  'SfFwXhEmOnLi\\\\lbAulB`X_d@|k@au@bc@oc@bqC}{BhwDgcD`l@ed@??bL{G|a@eTje@',\n  'oS~]cLr~Bgh@|b@}Jv}EieAlv@sPluD{z@nzA_]`|KchCtd@sPvb@wSb{@ko@f`RooQ~e',\n  '[upZbuIolI|gFafFzu@iq@nMmJ|OeJn^{Qjh@yQhc@uJ~j@iGdd@kAp~BkBxO{@|QsAfY',\n  'gEtYiGd]}Jpd@wRhVoNzNeK`j@ce@vgK}cJnSoSzQkVvUm^rSgc@`Uql@xIq\\\\vIgg@~k',\n  'Dyq[nIir@jNoq@xNwc@fYik@tk@su@neB}uBhqEesFjoGeyHtCoD|D}Ed|@ctAbIuOzqB',\n  '_}D~NgY`\\\\um@v[gm@v{Cw`G`w@o{AdjAwzBh{C}`Gpp@ypAxn@}mAfz@{bBbNia@??jI',\n  'ab@`CuOlC}YnAcV`@_^m@aeB}@yk@YuTuBg^uCkZiGk\\\\yGeY}Lu_@oOsZiTe[uWi[sl@',\n  'mo@soAauAsrBgzBqgAglAyd@ig@asAcyAklA}qAwHkGi{@s~@goAmsAyDeEirB_{B}IsJ',\n  'uEeFymAssAkdAmhAyTcVkFeEoKiH}l@kp@wg@sj@ku@ey@uh@kj@}EsFmG}Jk^_r@_f@m',\n  '~@ym@yjA??a@cFd@kBrCgDbAUnAcBhAyAdk@et@??kF}D??OL'\n].join('');\n\nconst route = /** @type {module:ol/geom/LineString~LineString} */ (new Polyline({\n  factor: 1e6\n}).readGeometry(polyline, {\n  dataProjection: 'EPSG:4326',\n  featureProjection: 'EPSG:3857'\n}));\n\nconst routeCoords = route.getCoordinates();\nconst routeLength = routeCoords.length;\n\nconst routeFeature = new Feature({\n  type: 'route',\n  geometry: route\n});\nconst geoMarker = new Feature({\n  type: 'geoMarker',\n  geometry: new Point(routeCoords[0])\n});\nconst startMarker = new Feature({\n  type: 'icon',\n  geometry: new Point(routeCoords[0])\n});\nconst endMarker = new Feature({\n  type: 'icon',\n  geometry: new Point(routeCoords[routeLength - 1])\n});\n\nconst styles = {\n  'route': new Style({\n    stroke: new Stroke({\n      width: 6, color: [237, 212, 0, 0.8]\n    })\n  }),\n  'icon': new Style({\n    image: new Icon({\n      anchor: [0.5, 1],\n      src: 'data/icon.png'\n    })\n  }),\n  'geoMarker': new Style({\n    image: new CircleStyle({\n      radius: 7,\n      snapToPixel: false,\n      fill: new Fill({color: 'black'}),\n      stroke: new Stroke({\n        color: 'white', width: 2\n      })\n    })\n  })\n};\n\nlet animating = false;\nlet speed, now;\nconst speedInput = document.getElementById('speed');\nconst startButton = document.getElementById('start-animation');\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    features: [routeFeature, geoMarker, startMarker, endMarker]\n  }),\n  style: function(feature) {\n    // hide geoMarker if animation is active\n    if (animating && feature.get('type') === 'geoMarker') {\n      return null;\n    }\n    return styles[feature.get('type')];\n  }\n});\n\nconst center = [-5639523.95, -3501274.52];\nconst map = new Map({\n  target: document.getElementById('map'),\n  loadTilesWhileAnimating: true,\n  view: new View({\n    center: center,\n    zoom: 10,\n    minZoom: 2,\n    maxZoom: 19\n  }),\n  layers: [\n    new TileLayer({\n      source: new BingMaps({\n        imagerySet: 'AerialWithLabels',\n        key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5'\n      })\n    }),\n    vectorLayer\n  ]\n});\n\nconst moveFeature = function(event) {\n  const vectorContext = event.vectorContext;\n  const frameState = event.frameState;\n\n  if (animating) {\n    const elapsedTime = frameState.time - now;\n    // here the trick to increase speed is to jump some indexes\n    // on lineString coordinates\n    const index = Math.round(speed * elapsedTime / 1000);\n\n    if (index >= routeLength) {\n      stopAnimation(true);\n      return;\n    }\n\n    const currentPoint = new Point(routeCoords[index]);\n    const feature = new Feature(currentPoint);\n    vectorContext.drawFeature(feature, styles.geoMarker);\n  }\n  // tell OpenLayers to continue the postcompose animation\n  map.render();\n};\n\nfunction startAnimation() {\n  if (animating) {\n    stopAnimation(false);\n  } else {\n    animating = true;\n    now = new Date().getTime();\n    speed = speedInput.value;\n    startButton.textContent = 'Cancel Animation';\n    // hide geoMarker\n    geoMarker.setStyle(null);\n    // just in case you pan somewhere else\n    map.getView().setCenter(center);\n    map.on('postcompose', moveFeature);\n    map.render();\n  }\n}\n\n\n/**\n * @param {boolean} ended end of animation.\n */\nfunction stopAnimation(ended) {\n  animating = false;\n  startButton.textContent = 'Start Animation';\n\n  // if animation cancelled set the marker at the beginning\n  const coord = ended ? routeCoords[routeLength - 1] : routeCoords[0];\n  /** @type {module:ol/geom/Point~Point} */ (geoMarker.getGeometry())\n    .setCoordinates(coord);\n  //remove listener\n  map.un('postcompose', moveFeature);\n}\n\nstartButton.addEventListener('click', startAnimation, false);\n"],"sourceRoot":""}