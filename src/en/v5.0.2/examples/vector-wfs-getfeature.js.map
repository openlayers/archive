{"version":3,"sources":["webpack:///../src/ol/format/filter/Filter.js","webpack:///../src/ol/format/filter/LogicalNary.js","webpack:///../src/ol/format/filter/And.js","webpack:///../src/ol/format/filter/Bbox.js","webpack:///../src/ol/format/filter/Spatial.js","webpack:///../src/ol/format/filter/Contains.js","webpack:///../src/ol/format/filter/Comparison.js","webpack:///../src/ol/format/filter/During.js","webpack:///../src/ol/format/filter/ComparisonBinary.js","webpack:///../src/ol/format/filter/EqualTo.js","webpack:///../src/ol/format/filter/GreaterThan.js","webpack:///../src/ol/format/filter/GreaterThanOrEqualTo.js","webpack:///../src/ol/format/filter/Intersects.js","webpack:///../src/ol/format/filter/IsBetween.js","webpack:///../src/ol/format/filter/IsLike.js","webpack:///../src/ol/format/filter/IsNull.js","webpack:///../src/ol/format/filter/LessThan.js","webpack:///../src/ol/format/filter/LessThanOrEqualTo.js","webpack:///../src/ol/format/filter/Not.js","webpack:///../src/ol/format/filter/NotEqualTo.js","webpack:///../src/ol/format/filter/Or.js","webpack:///../src/ol/format/filter/Within.js","webpack:///../src/ol/format/filter.js","webpack:///../src/ol/format/GML3.js","webpack:///../src/ol/format/WFS.js","webpack:///./vector-wfs-getfeature.js"],"names":["Filter","tagName","this","tagName_","prototype","getTagName","filter_Filter","LogicalNary","conditions","call","Array","slice","arguments","Object","asserts","length","util","filter_LogicalNary","And","params","concat","apply","filter_And","Bbox","geometryName","extent","opt_srsName","srsName","filter_Bbox","Spatial","geometry","filter_Spatial","Contains","Comparison","propertyName","filter_Comparison","During","begin","end","ComparisonBinary","expression","opt_matchCase","matchCase","filter_ComparisonBinary","EqualTo","filter_EqualTo","GreaterThan","GreaterThanOrEqualTo","Intersects","IsBetween","lowerBoundary","upperBoundary","IsLike","pattern","opt_wildCard","opt_singleChar","opt_escapeChar","wildCard","undefined","singleChar","escapeChar","filter_IsLike","IsNull","LessThan","LessThanOrEqualTo","Not","condition","NotEqualTo","Or","Within","and","Function","bind","GML3_schemaLocation","GMLBase","GML3","opt_options","options","surface_","surface","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","schemaLocation","hasZ","readMultiCurve_","node","objectStack","lineStrings","xml","MULTICURVE_PARSERS_","multiLineString","MultiLineString","setLineStrings","readMultiSurface_","polygons","MULTISURFACE_PARSERS_","multiPolygon","MultiPolygon","setPolygons","curveMemberParser_","CURVEMEMBER_PARSERS_","surfaceMemberParser_","SURFACEMEMBER_PARSERS_","readPatch_","PATCHES_PARSERS_","readSegment_","SEGMENTS_PARSERS_","readPolygonPatch_","FLAT_LINEAR_RINGS_PARSERS_","readLineStringSegment_","GEOMETRY_FLAT_COORDINATES_PARSERS_","interiorParser_","flatLinearRing","RING_PARSERS","push","exteriorParser_","readSurface_","flatLinearRings","SURFACE_PARSERS_","polygon","Polygon","flatCoordinates","ends","i","ii","array","setFlatCoordinates","GeometryLayout","XYZ","readCurve_","CURVE_PARSERS_","lineString","LineString","readEnvelope_","ENVELOPE_PARSERS_","ol_extent","readFlatPos_","s","re","m","exec","parseFloat","substr","containerSrs","axisOrientation","ol_proj","getAxisOrientation","y","x","len","readFlatPosList_","replace","context","contextDimension","coords","split","z","dim","getAttribute","xsd","parentNode","http://www.opengis.net/gml","pos","posList","interior","exterior","GEOMETRY_PARSERS_","Point","readPoint","MultiPoint","readMultiPoint","readLineString","readMultiLineString","LinearRing","readLinearRing","readPolygon","readMultiPolygon","Surface","MultiSurface","Curve","MultiCurve","Envelope","curveMember","curveMembers","surfaceMember","surfaceMembers","patches","segments","lowerCorner","upperCorner","PolygonPatch","LineStringSegment","writePos_","value","srsDimension","setAttribute","point","getCoordinates","getCoords_","opt_hasZ","writePosList_","points","parts","join","writePoint_","namespaceURI","appendChild","writeEnvelope","values","ENVELOPE_SERIALIZERS_","writeLinearRing_","RING_NODE_FACTORY_","opt_nodeName","exteriorWritten","writeSurfaceOrPolygon_","nodeName","rings","getLinearRings","RING_SERIALIZERS_","writeSurfacePatches_","writeCurveOrLineString_","writeCurveSegments_","writeMultiSurfaceOrPolygon_","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS_","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint_","getPoints","POINTMEMBER_SERIALIZERS_","writeMultiCurveOrLineString_","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS_","writeRing_","ring","linearRing","writeSurfaceOrPolygonMember_","child","GEOMETRY_NODE_FACTORY_","writePointMember_","writeLineStringOrCurveMember_","line","writeGeometryElement","item","ol_obj","isArray","dataProjection","featureProjection","Feature","GEOMETRY_SERIALIZERS_","writeFeatureElement","feature","fid","getId","featureNS","getGeometryName","serializers","properties","getProperties","keys","key","Geometry","writeFeatureMembers_","features","featureType","MULTIGEOMETRY_TO_MEMBER_NODENAME","getType","writeGeometryNode","adaptOptions","geom","writeFeatures","writeFeaturesNode","setAttributeNS","polygonMember","pointMember","lineStringMember","format_GML3","FEATURE_PREFIX","XMLNS","OGCNS","WFSNS","FESNS","SCHEMA_LOCATIONS","1.1.0","1.0.0","WFS","featureType_","featureNS_","gmlFormat_","gmlFormat","schemaLocation_","XMLFeature","getFeatureType","setFeatureType","readFeatures","readFeaturesFromNode","getReadOptions","FEATURE_COLLECTION_PARSERS","readFeaturesInternal","readTransactionResponse","source","readTransactionResponseFromDocument","readTransactionResponseFromNode","doc","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","n","firstChild","nextSibling","nodeType","Node","ELEMENT_NODE","boundedBy","readGeometryElement","result","TRANSACTION_SUMMARY_PARSERS","http://www.opengis.net/wfs","totalInserted","totalUpdated","totalDeleted","OGC_FID_PARSERS","http://www.opengis.net/ogc","FeatureId","INSERT_RESULTS_PARSERS","TRANSACTION_RESPONSE_PARSERS","TransactionSummary","InsertResults","QUERY_SERIALIZERS","PropertyName","writeOgcFidFilter","filter","getTypeName","featurePrefix","prefix","indexOf","TRANSACTION_SERIALIZERS","Insert","gmlVersion","GML2","Update","typeName","getKeys","get","name","Delete","Property","pair","Native","nativeElement","vendorId","safeToIgnore","GETFEATURE_SERIALIZERS","Query","propertyNames","writeFilterCondition","valueReference","timePeriod","writeTimeInstant","writeLogicalFilter","BBOX","writeOgcPropertyName","PropertyIsEqualTo","writeComparisonFilter","PropertyIsNotEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsNull","PropertyIsBetween","writeOgcLiteral","PropertyIsLike","toString","writeOgcExpression","property","time","timeInstant","timePosition","writeGetFeature","handle","outputFormat","maxFeatures","resultType","startIndex","count","bbox","filter_bbox","featureTypes","writeTransaction","inserts","updates","deletes","version","baseObj","obj","gmlOptions","nativeElements","readProjection","readProjectionFromDocument","readProjectionFromNode","firstElementChild","nextElementSibling","childNodes","pop","format_WFS","vectorSource","source_Vector","vector","Vector","style","Style","stroke","Stroke","color","width","raster","Tile","BingMaps","imagerySet","map","Map","layers","target","document","getElementById","view","View","center","maxZoom","zoom","featureRequest","like","equalTo","fetch","method","body","XMLSerializer","serializeToString","then","response","json","GeoJSON","addFeatures","getView","fit","getExtent"],"mappings":"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","file":"vector-wfs-getfeature.js","sourcesContent":["/**\n * @module ol/format/filter/Filter\n */\n\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @struct\n */\nconst Filter = function(tagName) {\n\n  /**\n   * @private\n   * @type {!string}\n   */\n  this.tagName_ = tagName;\n};\n\n/**\n * The XML tag name for a filter.\n * @returns {!string} Name.\n */\nFilter.prototype.getTagName = function() {\n  return this.tagName_;\n};\n\nexport default Filter;\n","/**\n * @module ol/format/filter/LogicalNary\n */\nimport {inherits} from '../../util.js';\nimport {assert} from '../../asserts.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {...module:ol/format/filter/Filter} conditions Conditions.\n * @extends {module:ol/format/filter/Filter}\n */\nconst LogicalNary = function(tagName, conditions) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @type {Array.<module:ol/format/filter/Filter>}\n   */\n  this.conditions = Array.prototype.slice.call(arguments, 1);\n  assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n};\n\ninherits(LogicalNary, Filter);\nexport default LogicalNary;\n","/**\n * @module ol/format/filter/And\n */\nimport {inherits} from '../../util.js';\nimport LogicalNary from '../filter/LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @constructor\n * @abstract\n * @param {...module:ol/format/filter/Filter} conditions Conditions.\n * @extends {module:ol/format/filter/LogicalNary}\n */\nconst And = function(conditions) {\n  const params = ['And'].concat(Array.prototype.slice.call(arguments));\n  LogicalNary.apply(this, params);\n};\n\ninherits(And, LogicalNary);\n\nexport default And;\n","/**\n * @module ol/format/filter/Bbox\n */\nimport {inherits} from '../../util.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!module:ol/extent~Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {module:ol/format/filter/Filter}\n * @api\n */\nconst Bbox = function(geometryName, extent, opt_srsName) {\n\n  Filter.call(this, 'BBOX');\n\n  /**\n   * @type {!string}\n   */\n  this.geometryName = geometryName;\n\n  /**\n   * @type {module:ol/extent~Extent}\n   */\n  this.extent = extent;\n\n  /**\n   * @type {string|undefined}\n   */\n  this.srsName = opt_srsName;\n};\n\ninherits(Bbox, Filter);\n\nexport default Bbox;\n","/**\n * @module ol/format/filter/Spatial\n */\nimport {inherits} from '../../util.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Represents a spatial operator to test whether a geometry-valued property\n * relates to a given geometry.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} geometryName Geometry name to use.\n * @param {!module:ol/geom/Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {module:ol/format/filter/Filter}\n */\nconst Spatial = function(tagName, geometryName, geometry, opt_srsName) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @type {!string}\n   */\n  this.geometryName = geometryName || 'the_geom';\n\n  /**\n   * @type {module:ol/geom/Geometry}\n   */\n  this.geometry = geometry;\n\n  /**\n   * @type {string|undefined}\n   */\n  this.srsName = opt_srsName;\n};\n\ninherits(Spatial, Filter);\n\nexport default Spatial;\n","/**\n * @module ol/format/filter/Contains\n */\nimport {inherits} from '../../util.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!module:ol/geom/Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {module:ol/format/filter/Spatial}\n * @api\n */\nconst Contains = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Contains', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Contains, Spatial);\nexport default Contains;\n","/**\n * @module ol/format/filter/Comparison\n */\nimport {inherits} from '../../util.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} propertyName Name of the context property to compare.\n * @extends {module:ol/format/filter/Filter}\n */\nconst Comparison = function(tagName, propertyName) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @type {!string}\n   */\n  this.propertyName = propertyName;\n};\n\ninherits(Comparison, Filter);\n\nexport default Comparison;\n","/**\n * @module ol/format/filter/During\n */\nimport {inherits} from '../../util.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<During>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @extends {module:ol/format/filter/Comparison}\n * @api\n */\nconst During = function(propertyName, begin, end) {\n  Comparison.call(this, 'During', propertyName);\n\n  /**\n   * @type {!string}\n   */\n  this.begin = begin;\n\n  /**\n   * @type {!string}\n   */\n  this.end = end;\n};\n\ninherits(During, Comparison);\nexport default During;\n","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport {inherits} from '../../util.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {module:ol/format/filter/Comparison}\n */\nconst ComparisonBinary = function(tagName, propertyName, expression, opt_matchCase) {\n\n  Comparison.call(this, tagName, propertyName);\n\n  /**\n   * @type {!(string|number)}\n   */\n  this.expression = expression;\n\n  /**\n   * @type {boolean|undefined}\n   */\n  this.matchCase = opt_matchCase;\n};\n\ninherits(ComparisonBinary, Comparison);\nexport default ComparisonBinary;\n","/**\n * @module ol/format/filter/EqualTo\n */\nimport {inherits} from '../../util.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {module:ol/format/filter/ComparisonBinary}\n * @api\n */\nconst EqualTo = function(propertyName, expression, opt_matchCase) {\n  ComparisonBinary.call(this, 'PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n};\n\ninherits(EqualTo, ComparisonBinary);\nexport default EqualTo;\n","/**\n * @module ol/format/filter/GreaterThan\n */\nimport {inherits} from '../../util.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {module:ol/format/filter/ComparisonBinary}\n * @api\n */\nconst GreaterThan = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsGreaterThan', propertyName, expression);\n};\n\ninherits(GreaterThan, ComparisonBinary);\nexport default GreaterThan;\n","/**\n * @module ol/format/filter/GreaterThanOrEqualTo\n */\nimport {inherits} from '../../util.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {module:ol/format/filter/ComparisonBinary}\n * @api\n */\nconst GreaterThanOrEqualTo = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsGreaterThanOrEqualTo', propertyName, expression);\n};\n\ninherits(GreaterThanOrEqualTo, ComparisonBinary);\nexport default GreaterThanOrEqualTo;\n","/**\n * @module ol/format/filter/Intersects\n */\nimport {inherits} from '../../util.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!module:ol/geom/Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {module:ol/format/filter/Spatial}\n * @api\n */\nconst Intersects = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Intersects', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Intersects, Spatial);\nexport default Intersects;\n","/**\n * @module ol/format/filter/IsBetween\n */\nimport {inherits} from '../../util.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsBetween>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @extends {module:ol/format/filter/Comparison}\n * @api\n */\nconst IsBetween = function(propertyName, lowerBoundary, upperBoundary) {\n  Comparison.call(this, 'PropertyIsBetween', propertyName);\n\n  /**\n   * @type {!number}\n   */\n  this.lowerBoundary = lowerBoundary;\n\n  /**\n   * @type {!number}\n   */\n  this.upperBoundary = upperBoundary;\n};\n\ninherits(IsBetween, Comparison);\nexport default IsBetween;\n","/**\n * @module ol/format/filter/IsLike\n */\nimport {inherits} from '../../util.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {module:ol/format/filter/Comparison}\n * @api\n */\nconst IsLike = function(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  Comparison.call(this, 'PropertyIsLike', propertyName);\n\n  /**\n   * @type {!string}\n   */\n  this.pattern = pattern;\n\n  /**\n   * @type {!string}\n   */\n  this.wildCard = (opt_wildCard !== undefined) ? opt_wildCard : '*';\n\n  /**\n   * @type {!string}\n   */\n  this.singleChar = (opt_singleChar !== undefined) ? opt_singleChar : '.';\n\n  /**\n   * @type {!string}\n   */\n  this.escapeChar = (opt_escapeChar !== undefined) ? opt_escapeChar : '!';\n\n  /**\n   * @type {boolean|undefined}\n   */\n  this.matchCase = opt_matchCase;\n};\n\ninherits(IsLike, Comparison);\nexport default IsLike;\n","/**\n * @module ol/format/filter/IsNull\n */\nimport {inherits} from '../../util.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNull>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @extends {module:ol/format/filter/Comparison}\n * @api\n */\nconst IsNull = function(propertyName) {\n  Comparison.call(this, 'PropertyIsNull', propertyName);\n};\n\ninherits(IsNull, Comparison);\nexport default IsNull;\n","/**\n * @module ol/format/filter/LessThan\n */\nimport {inherits} from '../../util.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThan>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {module:ol/format/filter/ComparisonBinary}\n * @api\n */\nconst LessThan = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsLessThan', propertyName, expression);\n};\n\ninherits(LessThan, ComparisonBinary);\nexport default LessThan;\n","/**\n * @module ol/format/filter/LessThanOrEqualTo\n */\nimport {inherits} from '../../util.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {module:ol/format/filter/ComparisonBinary}\n * @api\n */\nconst LessThanOrEqualTo = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsLessThanOrEqualTo', propertyName, expression);\n};\n\ninherits(LessThanOrEqualTo, ComparisonBinary);\nexport default LessThanOrEqualTo;\n","/**\n * @module ol/format/filter/Not\n */\nimport {inherits} from '../../util.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @constructor\n * @param {!module:ol/format/filter/Filter} condition Filter condition.\n * @extends {module:ol/format/filter/Filter}\n * @api\n */\nconst Not = function(condition) {\n\n  Filter.call(this, 'Not');\n\n  /**\n   * @type {!module:ol/format/filter/Filter}\n   */\n  this.condition = condition;\n};\n\ninherits(Not, Filter);\nexport default Not;\n","/**\n * @module ol/format/filter/NotEqualTo\n */\nimport {inherits} from '../../util.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {module:ol/format/filter/ComparisonBinary}\n * @api\n */\nconst NotEqualTo = function(propertyName, expression, opt_matchCase) {\n  ComparisonBinary.call(this, 'PropertyIsNotEqualTo', propertyName, expression, opt_matchCase);\n};\n\ninherits(NotEqualTo, ComparisonBinary);\nexport default NotEqualTo;\n","/**\n * @module ol/format/filter/Or\n */\nimport {inherits} from '../../util.js';\nimport LogicalNary from '../filter/LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<Or>` operator between two ore more filter conditions.\n *\n * @constructor\n * @param {...module:ol/format/filter/Filter} conditions Conditions.\n * @extends {module:ol/format/filter/LogicalNary}\n * @api\n */\nconst Or = function(conditions) {\n  const params = ['Or'].concat(Array.prototype.slice.call(arguments));\n  LogicalNary.apply(this, params);\n};\n\ninherits(Or, LogicalNary);\nexport default Or;\n","/**\n * @module ol/format/filter/Within\n */\nimport {inherits} from '../../util.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!module:ol/geom/Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {module:ol/format/filter/Spatial}\n * @api\n */\nconst Within = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Within', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Within, Spatial);\nexport default Within;\n","/**\n * @module ol/format/filter\n */\nimport And from '../format/filter/And.js';\nimport Bbox from '../format/filter/Bbox.js';\nimport Contains from '../format/filter/Contains.js';\nimport During from '../format/filter/During.js';\nimport EqualTo from '../format/filter/EqualTo.js';\nimport GreaterThan from '../format/filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from '../format/filter/GreaterThanOrEqualTo.js';\nimport Intersects from '../format/filter/Intersects.js';\nimport IsBetween from '../format/filter/IsBetween.js';\nimport IsLike from '../format/filter/IsLike.js';\nimport IsNull from '../format/filter/IsNull.js';\nimport LessThan from '../format/filter/LessThan.js';\nimport LessThanOrEqualTo from '../format/filter/LessThanOrEqualTo.js';\nimport Not from '../format/filter/Not.js';\nimport NotEqualTo from '../format/filter/NotEqualTo.js';\nimport Or from '../format/filter/Or.js';\nimport Within from '../format/filter/Within.js';\n\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...module:ol/format/filter/Filter} conditions Filter conditions.\n * @returns {!module:ol/format/filter/And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params));\n}\n\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...module:ol/format/filter/Filter} conditions Filter conditions.\n * @returns {!module:ol/format/filter/Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params));\n}\n\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!module:ol/format/filter/Filter} condition Filter condition.\n * @returns {!module:ol/format/filter/Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!module:ol/extent~Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!module:ol/format/filter/Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, opt_srsName) {\n  return new Bbox(geometryName, extent, opt_srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!module:ol/geom/Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!module:ol/format/filter/Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, opt_srsName) {\n  return new Contains(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!module:ol/geom/Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!module:ol/format/filter/Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, opt_srsName) {\n  return new Intersects(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!module:ol/geom/Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!module:ol/format/filter/Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, opt_srsName) {\n  return new Within(geometryName, geometry, opt_srsName);\n}\n\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!module:ol/format/filter/EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, opt_matchCase) {\n  return new EqualTo(propertyName, expression, opt_matchCase);\n}\n\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!module:ol/format/filter/NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, opt_matchCase) {\n  return new NotEqualTo(propertyName, expression, opt_matchCase);\n}\n\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!module:ol/format/filter/LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!module:ol/format/filter/LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!module:ol/format/filter/GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!module:ol/format/filter/GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @returns {!module:ol/format/filter/IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @returns {!module:ol/format/filter/IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!module:ol/format/filter/IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(propertyName, pattern,\n  opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  return new IsLike(propertyName, pattern,\n    opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase);\n}\n\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @returns {!module:ol/format/filter/During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n","/**\n * @module ol/format/GML3\n */\nimport {inherits} from '../util.js';\nimport {extend} from '../array.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport GMLBase, {GMLNS} from '../format/GMLBase.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from '../format/xsd.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport {createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender,\n  makeReplacer, makeSimpleNodeFactory, OBJECT_PROPERTY_NODE_FACTORY, parseNode,\n  pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI} from '../xml.js';\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation = GMLNS +\n    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n    '1.0.0/gmlsf.xsd';\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @constructor\n * @param {module:ol/format/GMLBase~Options=} opt_options\n *     Optional configuration object.\n * @extends {module:ol/format/GMLBase}\n * @api\n */\nconst GML3 = function(opt_options) {\n  const options = /** @type {module:ol/format/GMLBase~Options} */\n      (opt_options ? opt_options : {});\n\n  GMLBase.call(this, options);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.surface_ = options.surface !== undefined ? options.surface : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.curve_ = options.curve !== undefined ? options.curve : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.multiCurve_ = options.multiCurve !== undefined ?\n    options.multiCurve : true;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.multiSurface_ = options.multiSurface !== undefined ?\n    options.multiSurface : true;\n\n  /**\n   * @inheritDoc\n   */\n  this.schemaLocation = options.schemaLocation ?\n    options.schemaLocation : schemaLocation;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hasZ = options.hasZ !== undefined ?\n    options.hasZ : false;\n\n};\n\ninherits(GML3, GMLBase);\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {module:ol/geom/MultiLineString|undefined} MultiLineString.\n */\nGML3.prototype.readMultiCurve_ = function(node, objectStack) {\n  /** @type {Array.<module:ol/geom/LineString>} */\n  const lineStrings = pushParseAndPop([],\n    this.MULTICURVE_PARSERS_, node, objectStack, this);\n  if (lineStrings) {\n    const multiLineString = new MultiLineString(null);\n    multiLineString.setLineStrings(lineStrings);\n    return multiLineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {module:ol/geom/MultiPolygon|undefined} MultiPolygon.\n */\nGML3.prototype.readMultiSurface_ = function(node, objectStack) {\n  /** @type {Array.<module:ol/geom/Polygon>} */\n  const polygons = pushParseAndPop([],\n    this.MULTISURFACE_PARSERS_, node, objectStack, this);\n  if (polygons) {\n    const multiPolygon = new MultiPolygon(null);\n    multiPolygon.setPolygons(polygons);\n    return multiPolygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.curveMemberParser_ = function(node, objectStack) {\n  parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.surfaceMemberParser_ = function(node, objectStack) {\n  parseNode(this.SURFACEMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<(Array.<number>)>|undefined} flat coordinates.\n */\nGML3.prototype.readPatch_ = function(node, objectStack) {\n  return pushParseAndPop([null],\n    this.PATCHES_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} flat coordinates.\n */\nGML3.prototype.readSegment_ = function(node, objectStack) {\n  return pushParseAndPop([null],\n    this.SEGMENTS_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<(Array.<number>)>|undefined} flat coordinates.\n */\nGML3.prototype.readPolygonPatch_ = function(node, objectStack) {\n  return pushParseAndPop([null],\n    this.FLAT_LINEAR_RINGS_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} flat coordinates.\n */\nGML3.prototype.readLineStringSegment_ = function(node, objectStack) {\n  return pushParseAndPop([null],\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.interiorParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings.push(flatLinearRing);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.exteriorParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings[0] = flatLinearRing;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {module:ol/geom/Polygon|undefined} Polygon.\n */\nGML3.prototype.readSurface_ = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const flatLinearRings = pushParseAndPop([null],\n    this.SURFACE_PARSERS_, node, objectStack, this);\n  if (flatLinearRings && flatLinearRings[0]) {\n    const polygon = new Polygon(null);\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    let i, ii;\n    for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    polygon.setFlatCoordinates(\n      GeometryLayout.XYZ, flatCoordinates, ends);\n    return polygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {module:ol/geom/LineString|undefined} LineString.\n */\nGML3.prototype.readCurve_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = pushParseAndPop([null],\n    this.CURVE_PARSERS_, node, objectStack, this);\n  if (flatCoordinates) {\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return lineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {module:ol/extent~Extent|undefined} Envelope.\n */\nGML3.prototype.readEnvelope_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = pushParseAndPop([null],\n    this.ENVELOPE_PARSERS_, node, objectStack, this);\n  return createOrUpdate(flatCoordinates[1][0],\n    flatCoordinates[1][1], flatCoordinates[2][0],\n    flatCoordinates[2][1]);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML3.prototype.readFlatPos_ = function(node, objectStack) {\n  let s = getAllTextContent(node, false);\n  const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n  /** @type {Array.<number>} */\n  const flatCoordinates = [];\n  let m;\n  while ((m = re.exec(s))) {\n    flatCoordinates.push(parseFloat(m[1]));\n    s = s.substr(m[0].length);\n  }\n  if (s !== '') {\n    return undefined;\n  }\n  const context = objectStack[0];\n  const containerSrs = context['srsName'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    axisOrientation = proj.getAxisOrientation();\n  }\n  if (axisOrientation === 'neu') {\n    let i, ii;\n    for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n      const y = flatCoordinates[i];\n      const x = flatCoordinates[i + 1];\n      flatCoordinates[i] = x;\n      flatCoordinates[i + 1] = y;\n    }\n  }\n  const len = flatCoordinates.length;\n  if (len == 2) {\n    flatCoordinates.push(0);\n  }\n  if (len === 0) {\n    return undefined;\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML3.prototype.readFlatPosList_ = function(node, objectStack) {\n  const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n  const context = objectStack[0];\n  const containerSrs = context['srsName'];\n  const contextDimension = context['srsDimension'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    axisOrientation = proj.getAxisOrientation();\n  }\n  const coords = s.split(/\\s+/);\n  // The \"dimension\" attribute is from the GML 3.0.1 spec.\n  let dim = 2;\n  if (node.getAttribute('srsDimension')) {\n    dim = readNonNegativeIntegerString(\n      node.getAttribute('srsDimension'));\n  } else if (node.getAttribute('dimension')) {\n    dim = readNonNegativeIntegerString(\n      node.getAttribute('dimension'));\n  } else if (node.parentNode.getAttribute('srsDimension')) {\n    dim = readNonNegativeIntegerString(\n      node.parentNode.getAttribute('srsDimension'));\n  } else if (contextDimension) {\n    dim = readNonNegativeIntegerString(contextDimension);\n  }\n  let x, y, z;\n  const flatCoordinates = [];\n  for (let i = 0, ii = coords.length; i < ii; i += dim) {\n    x = parseFloat(coords[i]);\n    y = parseFloat(coords[i + 1]);\n    z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;\n    if (axisOrientation.substr(0, 2) === 'en') {\n      flatCoordinates.push(x, y, z);\n    } else {\n      flatCoordinates.push(y, x, z);\n    }\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos_),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser_,\n    'exterior': GML3.prototype.exteriorParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.GEOMETRY_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface_),\n    'MultiSurface': makeReplacer(\n      GML3.prototype.readMultiSurface_),\n    'Curve': makeReplacer(GML3.prototype.readCurve_),\n    'MultiCurve': makeReplacer(\n      GML3.prototype.readMultiCurve_),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.MULTICURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(\n      GML3.prototype.curveMemberParser_),\n    'curveMembers': makeArrayPusher(\n      GML3.prototype.curveMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_),\n    'surfaceMembers': makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(\n      GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.SURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.CURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.ENVELOPE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(\n      GML3.prototype.readFlatPosList_),\n    'upperCorner': makeArrayPusher(\n      GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.PATCHES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(\n      GML3.prototype.readPolygonPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n * @private\n */\nGML3.prototype.SEGMENTS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeReplacer(\n      GML3.prototype.readLineStringSegment_)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/Point} value Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePos_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsDimension = hasZ ? 3 : 2;\n  node.setAttribute('srsDimension', srsDimension);\n  const srsName = context['srsName'];\n  let axisOrientation = 'enu';\n  if (srsName) {\n    axisOrientation = getProjection(srsName).getAxisOrientation();\n  }\n  const point = value.getCoordinates();\n  let coords;\n  // only 2d for simple features profile\n  if (axisOrientation.substr(0, 2) === 'en') {\n    coords = (point[0] + ' ' + point[1]);\n  } else {\n    coords = (point[1] + ' ' + point[0]);\n  }\n  if (hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ' ' + z;\n  }\n  writeStringTextNode(node, coords);\n};\n\n\n/**\n * @param {Array.<number>} point Point geometry.\n * @param {string=} opt_srsName Optional srsName\n * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n * @return {string} The coords string.\n * @private\n */\nGML3.prototype.getCoords_ = function(point, opt_srsName, opt_hasZ) {\n  let axisOrientation = 'enu';\n  if (opt_srsName) {\n    axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n  }\n  let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n    point[0] + ' ' + point[1] :\n    point[1] + ' ' + point[0]);\n  if (opt_hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ' ' + z;\n  }\n\n  return coords;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/LineString|module:ol/geom/LinearRing} value Geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePosList_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsDimension = hasZ ? 3 : 2;\n  node.setAttribute('srsDimension', srsDimension);\n  const srsName = context['srsName'];\n  // only 2d for simple features profile\n  const points = value.getCoordinates();\n  const len = points.length;\n  const parts = new Array(len);\n  let point;\n  for (let i = 0; i < len; ++i) {\n    point = points[i];\n    parts[i] = this.getCoords_(point, srsName, hasZ);\n  }\n  writeStringTextNode(node, parts.join(' '));\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/Point} geometry Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePoint_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const pos = createElementNS(node.namespaceURI, 'pos');\n  node.appendChild(pos);\n  this.writePos_(pos, geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeEnvelope = function(node, extent, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const keys = ['lowerCorner', 'upperCorner'];\n  const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n  pushSerializeAndPop(/** @type {module:ol/xml~NodeStackItem} */\n    ({node: node}), this.ENVELOPE_SERIALIZERS_,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack, keys, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/LinearRing} geometry LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeLinearRing_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const posList = createElementNS(node.namespaceURI, 'posList');\n  node.appendChild(posList);\n  this.writePosList_(posList, geometry, objectStack);\n};\n\n\n/**\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node} Node.\n * @private\n */\nGML3.prototype.RING_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const exteriorWritten = context['exteriorWritten'];\n  if (exteriorWritten === undefined) {\n    context['exteriorWritten'] = true;\n  }\n  return createElementNS(parentNode.namespaceURI,\n    exteriorWritten !== undefined ? 'interior' : 'exterior');\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/Polygon} geometry Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'PolygonPatch' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n    const rings = geometry.getLinearRings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.RING_SERIALIZERS_,\n      this.RING_NODE_FACTORY_,\n      rings, objectStack, undefined, this);\n  } else if (node.nodeName === 'Surface') {\n    const patches = createElementNS(node.namespaceURI, 'patches');\n    node.appendChild(patches);\n    this.writeSurfacePatches_(\n      patches, geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/LineString} geometry LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'LineStringSegment' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment') {\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  } else if (node.nodeName === 'Curve') {\n    const segments = createElementNS(node.namespaceURI, 'segments');\n    node.appendChild(segments);\n    this.writeCurveSegments_(segments,\n      geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/MultiPolygon} geometry MultiPolygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const surface = context['surface'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const polygons = geometry.getPolygons();\n  pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n    this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/MultiPoint} geometry MultiPoint geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiPoint_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  const hasZ = context['hasZ'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const points = geometry.getPoints();\n  pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n    this.POINTMEMBER_SERIALIZERS_,\n    makeSimpleNodeFactory('pointMember'), points,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/MultiLineString} geometry MultiLineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const curve = context['curve'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const lines = geometry.getLineStrings();\n  pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n    this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/LinearRing} ring LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeRing_ = function(node, ring, objectStack) {\n  const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n  node.appendChild(linearRing);\n  this.writeLinearRing_(linearRing, ring, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfaceOrPolygonMember_ = function(node, polygon, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(\n    polygon, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/Point} point Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePointMember_ = function(node, point, objectStack) {\n  const child = createElementNS(node.namespaceURI, 'Point');\n  node.appendChild(child);\n  this.writePoint_(child, point, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeLineStringOrCurveMember_ = function(node, line, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfacePatches_ = function(node, polygon, objectStack) {\n  const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n  node.appendChild(child);\n  this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeCurveSegments_ = function(node, line, objectStack) {\n  const child = createElementNS(node.namespaceURI,\n    'LineStringSegment');\n  node.appendChild(child);\n  this.writeCurveOrLineString_(child, line, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/geom/Geometry|module:ol/extent~Extent} geometry Geometry.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeGeometryElement = function(node, geometry, objectStack) {\n  const context = /** @type {module:ol/format/Feature~WriteOptions} */ (objectStack[objectStack.length - 1]);\n  const item = assign({}, context);\n  item.node = node;\n  let value;\n  if (Array.isArray(geometry)) {\n    if (context.dataProjection) {\n      value = transformExtent(\n        geometry, context.featureProjection, context.dataProjection);\n    } else {\n      value = geometry;\n    }\n  } else {\n    value = transformWithOptions(/** @type {module:ol/geom/Geometry} */ (geometry), true, context);\n  }\n  pushSerializeAndPop(/** @type {module:ol/xml~NodeStackItem} */\n    (item), this.GEOMETRY_SERIALIZERS_,\n    this.GEOMETRY_NODE_FACTORY_, [value],\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeFeatureElement = function(node, feature, objectStack) {\n  const fid = feature.getId();\n  if (fid) {\n    node.setAttribute('fid', fid);\n  }\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureNS = context['featureNS'];\n  const geometryName = feature.getGeometryName();\n  if (!context.serializers) {\n    context.serializers = {};\n    context.serializers[featureNS] = {};\n  }\n  const properties = feature.getProperties();\n  const keys = [];\n  const values = [];\n  for (const key in properties) {\n    const value = properties[key];\n    if (value !== null) {\n      keys.push(key);\n      values.push(value);\n      if (key == geometryName || value instanceof Geometry) {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = makeChildAppender(\n            this.writeGeometryElement, this);\n        }\n      } else {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n        }\n      }\n    }\n  }\n  const item = assign({}, context);\n  item.node = node;\n  pushSerializeAndPop(/** @type {module:ol/xml~NodeStackItem} */\n    (item), context.serializers,\n    makeSimpleNodeFactory(undefined, featureNS),\n    values,\n    objectStack, keys);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<module:ol/Feature>} features Features.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeFeatureMembers_ = function(node, features, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const serializers = {};\n  serializers[featureNS] = {};\n  serializers[featureNS][featureType] = makeChildAppender(\n    this.writeFeatureElement, this);\n  const item = assign({}, context);\n  item.node = node;\n  pushSerializeAndPop(/** @type {module:ol/xml~NodeStackItem} */\n    (item),\n    serializers,\n    makeSimpleNodeFactory(featureType, featureNS), features,\n    objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return createElementNS('http://www.opengis.net/gml',\n    MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML3.prototype.GEOMETRY_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const multiSurface = context['multiSurface'];\n  const surface = context['surface'];\n  const curve = context['curve'];\n  const multiCurve = context['multiCurve'];\n  let nodeName;\n  if (!Array.isArray(value)) {\n    nodeName = /** @type {module:ol/geom/Geometry} */ (value).getType();\n    if (nodeName === 'MultiPolygon' && multiSurface === true) {\n      nodeName = 'MultiSurface';\n    } else if (nodeName === 'Polygon' && surface === true) {\n      nodeName = 'Surface';\n    } else if (nodeName === 'LineString' && curve === true) {\n      nodeName = 'Curve';\n    } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n      nodeName = 'MultiCurve';\n    }\n  } else {\n    nodeName = 'Envelope';\n  }\n  return createElementNS('http://www.opengis.net/gml',\n    nodeName);\n};\n\n\n/**\n * Encode a geometry in GML 3.1.1 Simple Features.\n *\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.\n * @return {Node} Node.\n * @override\n * @api\n */\nGML3.prototype.writeGeometryNode = function(geometry, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const geom = createElementNS('http://www.opengis.net/gml', 'geom');\n  const context = {node: geom, hasZ: this.hasZ, srsName: this.srsName,\n    curve: this.curve_, surface: this.surface_,\n    multiSurface: this.multiSurface_, multiCurve: this.multiCurve_};\n  if (opt_options) {\n    assign(context, opt_options);\n  }\n  this.writeGeometryElement(geom, geometry, [context]);\n  return geom;\n};\n\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array.<module:ol/Feature>} features Features.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n\n/**\n * Encode an array of features in the GML 3.1.1 format as an XML node.\n *\n * @param {Array.<module:ol/Feature>} features Features.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.\n * @return {Node} Node.\n * @override\n * @api\n */\nGML3.prototype.writeFeaturesNode = function(features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const node = createElementNS('http://www.opengis.net/gml', 'featureMembers');\n  node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n  const context = {\n    srsName: this.srsName,\n    hasZ: this.hasZ,\n    curve: this.curve_,\n    surface: this.surface_,\n    multiSurface: this.multiSurface_,\n    multiCurve: this.multiCurve_,\n    featureNS: this.featureNS,\n    featureType: this.featureType\n  };\n  if (opt_options) {\n    assign(context, opt_options);\n  }\n  this.writeFeatureMembers_(node, features, [context]);\n  return node;\n};\n\n\n/**\n * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}\n * @private\n */\nGML3.prototype.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing_),\n    'interior': makeChildAppender(GML3.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}\n * @private\n */\nGML3.prototype.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}\n * @private\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}\n * @private\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(\n      GML3.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}\n * @private\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}\n * @private\n */\nGML3.prototype.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiCurve': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'Point': makeChildAppender(GML3.prototype.writePoint_),\n    'MultiPoint': makeChildAppender(\n      GML3.prototype.writeMultiPoint_),\n    'LineString': makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': makeChildAppender(\n      GML3.prototype.writeLinearRing_),\n    'Polygon': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': makeChildAppender(\n      GML3.prototype.writeEnvelope)\n  }\n};\n\n\nexport default GML3;\n","/**\n * @module ol/format/WFS\n */\nimport {inherits} from '../util.js';\nimport {assert} from '../asserts.js';\nimport GML2 from '../format/GML2.js';\nimport GML3 from '../format/GML3.js';\nimport GMLBase, {GMLNS} from '../format/GMLBase.js';\nimport {and as andFilter, bbox as bboxFilter} from '../format/filter.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport {readNonNegativeIntegerString, readNonNegativeInteger, writeStringTextNode} from '../format/xsd.js';\nimport Geometry from '../geom/Geometry.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {createElementNS, isDocument, isNode, makeArrayPusher, makeChildAppender,\n  makeObjectPropertySetter, makeSimpleNodeFactory, parse, parseNode,\n  pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI} from '../xml.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {Object.<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array.<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {module:ol/format/GMLBase} [gmlFormat] The GML format to use to parse the response. Default is `ol/format/GML3`.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n */\n\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array.<string>} featureTypes The feature type names.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array.<string>} [propertyNames] Optional list of property names to serialize.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {module:ol/extent~Extent} [bbox] Extent to use for the BBOX filter.\n * @property {module:ol/format/filter/Filter} [filter] Filter condition. See\n * {@link module:ol/format/Filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * E.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array.<Object>} nativeElements Native elements. Currently not supported.\n * @property {module:ol/format/GMLBase~Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0` or `1.1.0`.\n */\n\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures\n * @property {module:ol/extent~Extent} bounds\n */\n\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {number} totalDeleted\n * @property {number} totalInserted\n * @property {number} totalUpdated\n * @property {Array.<string>} insertIds\n */\n\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n\n/**\n * @type {string}\n */\nconst OGCNS = 'http://www.opengis.net/ogc';\n\n\n/**\n * @type {string}\n */\nconst WFSNS = 'http://www.opengis.net/wfs';\n\n\n/**\n * @type {string}\n */\nconst FESNS = 'http://www.opengis.net/fes';\n\n\n/**\n * @type {Object.<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '1.1.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd'\n};\n\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @constructor\n * @param {module:ol/format/WFS~Options=} opt_options Optional configuration object.\n * @extends {module:ol/format/XMLFeature}\n * @api\n */\nconst WFS = function(opt_options) {\n  const options = opt_options ? opt_options : {};\n\n  /**\n   * @private\n   * @type {Array.<string>|string|undefined}\n   */\n  this.featureType_ = options.featureType;\n\n  /**\n   * @private\n   * @type {Object.<string, string>|string|undefined}\n   */\n  this.featureNS_ = options.featureNS;\n\n  /**\n   * @private\n   * @type {module:ol/format/GMLBase}\n   */\n  this.gmlFormat_ = options.gmlFormat ?\n    options.gmlFormat : new GML3();\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.schemaLocation_ = options.schemaLocation ?\n    options.schemaLocation : SCHEMA_LOCATIONS[DEFAULT_VERSION];\n\n  XMLFeature.call(this);\n};\n\ninherits(WFS, XMLFeature);\n\n\n/**\n * @return {Array.<string>|string|undefined} featureType\n */\nWFS.prototype.getFeatureType = function() {\n  return this.featureType_;\n};\n\n\n/**\n * @param {Array.<string>|string|undefined} featureType Feature type(s) to parse.\n */\nWFS.prototype.setFeatureType = function(featureType) {\n  this.featureType_ = featureType;\n};\n\n\n/**\n * Read all features from a WFS FeatureCollection.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\nWFS.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const context = /** @type {module:ol/xml~NodeStackItem} */ ({\n    'featureType': this.featureType_,\n    'featureNS': this.featureNS_\n  });\n  assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));\n  const objectStack = [context];\n  this.gmlFormat_.FEATURE_COLLECTION_PARSERS[GMLNS][\n    'featureMember'] =\n      makeArrayPusher(GMLBase.prototype.readFeaturesInternal);\n  let features = pushParseAndPop([],\n    this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,\n    objectStack, this.gmlFormat_);\n  if (!features) {\n    features = [];\n  }\n  return features;\n};\n\n\n/**\n * Read transaction response of the source.\n *\n * @param {Document|Node|Object|string} source Source.\n * @return {module:ol/format/WFS~TransactionResponse|undefined} Transaction response.\n * @api\n */\nWFS.prototype.readTransactionResponse = function(source) {\n  if (isDocument(source)) {\n    return this.readTransactionResponseFromDocument(\n      /** @type {Document} */ (source));\n  } else if (isNode(source)) {\n    return this.readTransactionResponseFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = parse(source);\n    return this.readTransactionResponseFromDocument(doc);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * Read feature collection metadata of the source.\n *\n * @param {Document|Node|Object|string} source Source.\n * @return {module:ol/format/WFS~FeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n * @api\n */\nWFS.prototype.readFeatureCollectionMetadata = function(source) {\n  if (isDocument(source)) {\n    return this.readFeatureCollectionMetadataFromDocument(\n      /** @type {Document} */ (source));\n  } else if (isNode(source)) {\n    return this.readFeatureCollectionMetadataFromNode(\n      /** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = parse(source);\n    return this.readFeatureCollectionMetadataFromDocument(doc);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {module:ol/format/WFS~FeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n */\nWFS.prototype.readFeatureCollectionMetadataFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFeatureCollectionMetadataFromNode(n);\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(\n      GMLBase.prototype.readGeometryElement, 'bounds')\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {module:ol/format/WFS~FeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n */\nWFS.prototype.readFeatureCollectionMetadataFromNode = function(node) {\n  const result = {};\n  const value = readNonNegativeIntegerString(\n    node.getAttribute('numberOfFeatures'));\n  result['numberOfFeatures'] = value;\n  return pushParseAndPop(\n    /** @type {module:ol/format/WFS~FeatureCollectionMetadata} */ (result),\n    FEATURE_COLLECTION_PARSERS, node, [], this.gmlFormat_);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalUpdated': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalDeleted': makeObjectPropertySetter(readNonNegativeInteger)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop(\n    {}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function(node, objectStack) {\n      return node.getAttribute('fid');\n    })\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Array.<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop(\n    [], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary, 'transactionSummary'),\n    'InsertResults': makeObjectPropertySetter(\n      readInsertResults, 'insertIds')\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {module:ol/format/WFS~TransactionResponse|undefined} Transaction response.\n */\nWFS.prototype.readTransactionResponseFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readTransactionResponseFromNode(n);\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {module:ol/format/WFS~TransactionResponse|undefined} Transaction response.\n */\nWFS.prototype.readTransactionResponseFromNode = function(node) {\n  return pushParseAndPop(\n    /** @type {module:ol/format/WFS~TransactionResponse} */({}),\n    TRANSACTION_RESPONSE_PARSERS, node, []);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const filter = createElementNS(OGCNS, 'Filter');\n  const child = createElementNS(OGCNS, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', fid);\n  node.appendChild(filter);\n}\n\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @returns {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.indexOf(prefix) === 0) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n\n/**\n * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (value instanceof Geometry) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    pushSerializeAndPop(/** @type {module:ol/xml~NodeStackItem} */ (\n      {'gmlVersion': context['gmlVersion'], node: node,\n        'hasZ': context['hasZ'], 'srsName': context['srsName']}),\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory('Property'), values,\n    objectStack);\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const name = createElementNS(WFSNS, 'Name');\n  const context = objectStack[objectStack.length - 1];\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(WFSNS, 'Value');\n    node.appendChild(value);\n    if (pair.value instanceof Geometry) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      } else {\n        GML3.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}}\n *     nativeElement The native element.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', nativeElement.safeToIgnore);\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n\n/**\n * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery)\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeContainsFilter),\n    'Intersects': makeChildAppender(writeIntersectsFilter),\n    'Within': makeChildAppender(writeWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} featureType Feature type.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  node.setAttribute('typeName', typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {module:ol/xml~NodeStackItem} */ (assign({}, context));\n  item.node = node;\n  pushSerializeAndPop(item,\n    QUERY_SERIALIZERS,\n    makeSimpleNodeFactory('PropertyName'), propertyNames,\n    objectStack);\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(OGCNS, 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/Filter} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  /** @type {module:ol/xml~NodeStackItem} */\n  const item = {node: node};\n  pushSerializeAndPop(item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(filter.getTagName()),\n    [filter], objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/Bbox} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/Contains} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeContainsFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/Intersects} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeIntersectsFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/Within} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeWithinFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/During} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n\n  const valueReference = createElementNS(FESNS, 'ValueReference');\n  writeStringTextNode(valueReference, filter.propertyName);\n  node.appendChild(valueReference);\n\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/LogicalNary} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  /** @type {module:ol/xml~NodeStackItem} */\n  const item = {node: node};\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(item,\n      GETFEATURE_SERIALIZERS,\n      makeSimpleNodeFactory(condition.getTagName()),\n      [condition], objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/Not} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  /** @type {module:ol/xml~NodeStackItem} */\n  const item = {node: node};\n  const condition = filter.condition;\n  pushSerializeAndPop(item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(condition.getTagName()),\n    [condition], objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/ComparisonBinary} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writeOgcPropertyName(node, filter.propertyName);\n  writeOgcLiteral(node, '' + filter.expression);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/IsNull} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  writeOgcPropertyName(node, filter.propertyName);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/IsBetween} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  writeOgcPropertyName(node, filter.propertyName);\n\n  const lowerBoundary = createElementNS(OGCNS, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeOgcLiteral(lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = createElementNS(OGCNS, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeOgcLiteral(upperBoundary, '' + filter.upperBoundary);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {module:ol/format/filter/IsLike} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writeOgcPropertyName(node, filter.propertyName);\n  writeOgcLiteral(node, '' + filter.pattern);\n}\n\n\n/**\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeOgcExpression(tagName, node, value) {\n  const property = createElementNS(OGCNS, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeOgcPropertyName(node, value) {\n  writeOgcExpression('PropertyName', node, value);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeOgcLiteral(node, value) {\n  writeOgcExpression('Literal', node, value);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {module:ol/format/filter/Filter} filter Filter.\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter) {\n  const child = createElementNS(OGCNS, 'Filter');\n  writeFilterCondition(child, filter, []);\n  return child;\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<string>} featureTypes Feature types.\n * @param {Array.<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {module:ol/xml~NodeStackItem} */ (assign({}, context));\n  item.node = node;\n  pushSerializeAndPop(item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory('Query'), featureTypes,\n    objectStack);\n}\n\n\n/**\n * Encode format as WFS `GetFeature` and return the Node.\n *\n * @param {module:ol/format/WFS~WriteGetFeatureOptions} options Options.\n * @return {Node} Result.\n * @api\n */\nWFS.prototype.writeGetFeature = function(options) {\n  const node = createElementNS(WFSNS, 'GetFeature');\n  node.setAttribute('service', 'WFS');\n  node.setAttribute('version', '1.1.0');\n  let filter;\n  if (options) {\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', options.maxFeatures);\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', options.startIndex);\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', options.count);\n    }\n    filter = options.filter;\n    if (options.bbox) {\n      assert(options.geometryName,\n        12); // `options.geometryName` must also be provided when `options.bbox` is set\n      const bbox = bboxFilter(\n        /** @type {string} */ (options.geometryName), options.bbox, options.srsName);\n      if (filter) {\n        // if bbox and filter are both set, combine the two into a single filter\n        filter = andFilter(filter, bbox);\n      } else {\n        filter = bbox;\n      }\n    }\n  }\n  node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation_);\n  /** @type {module:ol/xml~NodeStackItem} */\n  const context = {\n    node: node,\n    'srsName': options.srsName,\n    'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n    'featurePrefix': options.featurePrefix,\n    'geometryName': options.geometryName,\n    'filter': filter,\n    'propertyNames': options.propertyNames ? options.propertyNames : []\n  };\n  assert(Array.isArray(options.featureTypes),\n    11); // `options.featureTypes` should be an Array\n  writeGetFeature(node, /** @type {!Array.<string>} */ (options.featureTypes), [context]);\n  return node;\n};\n\n\n/**\n * Encode format as WFS `Transaction` and return the Node.\n *\n * @param {Array.<module:ol/Feature>} inserts The features to insert.\n * @param {Array.<module:ol/Feature>} updates The features to update.\n * @param {Array.<module:ol/Feature>} deletes The features to delete.\n * @param {module:ol/format/WFS~WriteTransactionOptions} options Write options.\n * @return {Node} Result.\n * @api\n */\nWFS.prototype.writeTransaction = function(inserts, updates, deletes, options) {\n  const objectStack = [];\n  const node = createElementNS(WFSNS, 'Transaction');\n  const version = options.version ? options.version : DEFAULT_VERSION;\n  const gmlVersion = version === '1.0.0' ? 2 : 3;\n  node.setAttribute('service', 'WFS');\n  node.setAttribute('version', version);\n  let baseObj;\n  /** @type {module:ol/xml~NodeStackItem} */\n  let obj;\n  if (options) {\n    baseObj = options.gmlOptions ? options.gmlOptions : {};\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n  }\n  const schemaLocation = SCHEMA_LOCATIONS[version];\n  node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', schemaLocation);\n  const featurePrefix = options.featurePrefix ? options.featurePrefix : FEATURE_PREFIX;\n  if (inserts) {\n    obj = {node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};\n    assign(obj, baseObj);\n    pushSerializeAndPop(obj,\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Insert'), inserts,\n      objectStack);\n  }\n  if (updates) {\n    obj = {node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};\n    assign(obj, baseObj);\n    pushSerializeAndPop(obj,\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Update'), updates,\n      objectStack);\n  }\n  if (deletes) {\n    pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'srsName': options.srsName},\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory('Delete'), deletes,\n    objectStack);\n  }\n  if (options.nativeElements) {\n    pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'srsName': options.srsName},\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory('Native'), options.nativeElements,\n    objectStack);\n  }\n  return node;\n};\n\n\n/**\n * Read the projection from a WFS source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {?module:ol/proj/Projection} Projection.\n * @api\n */\nWFS.prototype.readProjection;\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readProjectionFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readProjectionFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readProjectionFromNode = function(node) {\n  if (node.firstElementChild &&\n      node.firstElementChild.firstElementChild) {\n    node = node.firstElementChild.firstElementChild;\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (!(n.childNodes.length === 0 ||\n          (n.childNodes.length === 1 &&\n          n.firstChild.nodeType === 3))) {\n        const objectStack = [{}];\n        this.gmlFormat_.readGeometryElement(n, objectStack);\n        return getProjection(objectStack.pop().srsName);\n      }\n    }\n  }\n\n  return null;\n};\nexport default WFS;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {\n  equalTo as equalToFilter,\n  like as likeFilter,\n  and as andFilter\n} from '../src/ol/format/filter.js';\nimport {WFS, GeoJSON} from '../src/ol/format.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Stroke, Style} from '../src/ol/style.js';\n\n\nconst vectorSource = new VectorSource();\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2\n    })\n  })\n});\n\nconst raster = new TileLayer({\n  source: new BingMaps({\n    imagerySet: 'Aerial',\n    key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [-8908887.277395891, 5381918.072437216],\n    maxZoom: 19,\n    zoom: 12\n  })\n});\n\n// generate a GetFeature request\nconst featureRequest = new WFS().writeGetFeature({\n  srsName: 'EPSG:3857',\n  featureNS: 'http://openstreemap.org',\n  featurePrefix: 'osm',\n  featureTypes: ['water_areas'],\n  outputFormat: 'application/json',\n  filter: andFilter(\n    likeFilter('name', 'Mississippi*'),\n    equalToFilter('waterway', 'riverbank')\n  )\n});\n\n// then post the request and add the received features to a layer\nfetch('https://ahocevar.com/geoserver/wfs', {\n  method: 'POST',\n  body: new XMLSerializer().serializeToString(featureRequest)\n}).then(function(response) {\n  return response.json();\n}).then(function(json) {\n  const features = new GeoJSON().readFeatures(json);\n  vectorSource.addFeatures(features);\n  map.getView().fit(vectorSource.getExtent());\n});\n"],"sourceRoot":""}