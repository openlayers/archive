{"version":3,"sources":["webpack:///./flight-animation.js"],"names":["map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","layers","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","source","_src_ol_source_Stamen_js__WEBPACK_IMPORTED_MODULE_6__","layer","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","center","zoom","style","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","color","width","flightsSource","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_7__","wrapX","attributions","loader","fetch","then","response","json","flightsData","flights","i","length","flight","from","to","arcLine","arc","GreatCircle","x","y","Arc","offset","geometries","line","_src_ol_geom_LineString_js__WEBPACK_IMPORTED_MODULE_3__","coords","transform","addLater","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","geometry","finished","on","animateFlights","flightsLayer","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","feature","get","addLayer","pointsPerMs","event","vectorContext","frameState","setStyle","features","getFeatures","getGeometry","getCoordinates","elapsedPoints","time","set","maxIndex","Math","min","currentLine","slice","drawGeometry","render","timeout","window","setTimeout","Date","getTime","addFeature"],"mappings":"qLASA,MAAAA,EAAA,IAAAC,EAAA,GACAC,QACA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAC,MAAA,aAIAC,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,QAAA,KACAC,KAAA,MAIAC,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAC,MAAA,UACAC,MAAA,MAIAC,EAAA,IAAAC,EAAA,GACAC,OAAA,EACAC,aAAA,6EAEAC,OAAA,WAEAC,MADA,iCACAC,KAAA,SAAAC,GACA,OAAAA,EAAAC,SACKF,KAAA,SAAAE,GACL,MAAAC,EAAAD,EAAAE,QACA,QAAAC,EAAA,EAAqBA,EAAAF,EAAAG,OAAwBD,IAAA,CAC7C,MAAAE,EAAAJ,EAAAE,GACAG,EAAAD,EAAA,GACAE,EAAAF,EAAA,GAOAG,EAJA,IAAAC,IAAAC,aACWC,EAAAL,EAAA,GAAAM,EAAAN,EAAA,KACAK,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,KAEXM,IAAA,KAA+CC,OAAA,KAC/C,OAAAN,EAAAO,WAAAX,OAAA,CACA,MAAAY,EAAA,IAAAC,EAAA,EAAAT,EAAAO,WAAA,GAAAG,QACAF,EAAAG,UAAA,yBAQAC,EANA,IAAAC,EAAA,GACAC,SAAAN,EACAO,UAAA,IAIA,GAAApB,IAGA7B,EAAAkD,GAAA,cAAAC,QAKAC,EAAA,IAAAC,EAAA,GACAjD,OAAAc,EACAN,MAAA,SAAA0C,GAGA,OAAAA,EAAAC,IAAA,YACA3C,EAEA,QAKAZ,EAAAwD,SAAAJ,GAEA,MAAAK,EAAA,GACA,SAAAN,EAAAO,GACA,MAAAC,EAAAD,EAAAC,cACAC,EAAAF,EAAAE,WACAD,EAAAE,SAAAjD,GAEA,MAAAkD,EAAA5C,EAAA6C,cACA,QAAAlC,EAAA,EAAiBA,EAAAiC,EAAAhC,OAAqBD,IAAA,CACtC,MAAAyB,EAAAQ,EAAAjC,GACA,IAAAyB,EAAAC,IAAA,aAEA,MAAAX,EAAAU,EAAAU,cAAAC,iBAEAC,GADAN,EAAAO,KAAAb,EAAAC,IAAA,UACAE,EAEAS,GAAAtB,EAAAd,QACAwB,EAAAc,IAAA,eAGA,MAAAC,EAAAC,KAAAC,IAAAL,EAAAtB,EAAAd,QACA0C,EAAA,IAAA7B,EAAA,EAAAC,EAAA6B,MAAA,EAAAJ,IAGAV,EAAAe,aAAAF,IAIAxE,EAAA2E,SAGA,SAAA7B,EAAAQ,EAAAsB,GACAC,OAAAC,WAAA,WACAxB,EAAAc,IAAA,aAAAW,MAAAC,WACA9D,EAAA+D,WAAA3B,IACGsB","file":"flight-animation.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Stroke, Style} from '../src/ol/style.js';\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new Stamen({\n        layer: 'toner'\n      })\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst style = new Style({\n  stroke: new Stroke({\n    color: '#EAE911',\n    width: 2\n  })\n});\n\nconst flightsSource = new VectorSource({\n  wrapX: false,\n  attributions: 'Flight data by ' +\n        '<a href=\"http://openflights.org/data.html\">OpenFlights</a>,',\n  loader: function() {\n    const url = 'data/openflights/flights.json';\n    fetch(url).then(function(response) {\n      return response.json();\n    }).then(function(json) {\n      const flightsData = json.flights;\n      for (let i = 0; i < flightsData.length; i++) {\n        const flight = flightsData[i];\n        const from = flight[0];\n        const to = flight[1];\n\n        // create an arc circle between the two locations\n        const arcGenerator = new arc.GreatCircle(\n          {x: from[1], y: from[0]},\n          {x: to[1], y: to[0]});\n\n        const arcLine = arcGenerator.Arc(100, {offset: 10});\n        if (arcLine.geometries.length === 1) {\n          const line = new LineString(arcLine.geometries[0].coords);\n          line.transform('EPSG:4326', 'EPSG:3857');\n\n          const feature = new Feature({\n            geometry: line,\n            finished: false\n          });\n          // add the feature with a delay so that the animation\n          // for all features does not start at the same time\n          addLater(feature, i * 50);\n        }\n      }\n      map.on('postcompose', animateFlights);\n    });\n  }\n});\n\nconst flightsLayer = new VectorLayer({\n  source: flightsSource,\n  style: function(feature) {\n    // if the animation is still active for a feature, do not\n    // render the feature with the layer style\n    if (feature.get('finished')) {\n      return style;\n    } else {\n      return null;\n    }\n  }\n});\n\nmap.addLayer(flightsLayer);\n\nconst pointsPerMs = 0.1;\nfunction animateFlights(event) {\n  const vectorContext = event.vectorContext;\n  const frameState = event.frameState;\n  vectorContext.setStyle(style);\n\n  const features = flightsSource.getFeatures();\n  for (let i = 0; i < features.length; i++) {\n    const feature = features[i];\n    if (!feature.get('finished')) {\n      // only draw the lines for which the animation has not finished yet\n      const coords = feature.getGeometry().getCoordinates();\n      const elapsedTime = frameState.time - feature.get('start');\n      const elapsedPoints = elapsedTime * pointsPerMs;\n\n      if (elapsedPoints >= coords.length) {\n        feature.set('finished', true);\n      }\n\n      const maxIndex = Math.min(elapsedPoints, coords.length);\n      const currentLine = new LineString(coords.slice(0, maxIndex));\n\n      // directly draw the line with the vector context\n      vectorContext.drawGeometry(currentLine);\n    }\n  }\n  // tell OpenLayers to continue the animation\n  map.render();\n}\n\nfunction addLater(feature, timeout) {\n  window.setTimeout(function() {\n    feature.set('start', new Date().getTime());\n    flightsSource.addFeature(feature);\n  }, timeout);\n}\n"],"sourceRoot":""}