{"version":3,"sources":["webpack:///./reprojection-by-code.js"],"names":["map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_3__","source","_src_ol_source_OSM_js__WEBPACK_IMPORTED_MODULE_6__","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","projection","center","zoom","queryInput","document","getElementById","searchButton","resultSpan","renderEdgesCheckbox","setProjection","code","name","proj4def","bbox","innerHTML","setView","newProjCode","proj4__WEBPACK_IMPORTED_MODULE_8__","defs","Object","_src_ol_proj_proj4_js__WEBPACK_IMPORTED_MODULE_5__","newProj","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_4__","fromLonLat","extent","_src_ol_extent_js__WEBPACK_IMPORTED_MODULE_2__","setExtent","newView","fit","onclick","event","query","fetch","then","response","json","results","length","i","ii","result","search","value","preventDefault","onchange","getLayers","forEach","layer","getSource","_src_ol_source_TileImage_js__WEBPACK_IMPORTED_MODULE_7__","setRenderReprojectionEdges","checked"],"mappings":"yKAWA,MAAAA,EAAA,IAAAC,EAAA,GACAC,QACA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,KAGAC,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,WAAA,YACAC,QAAA,KACAC,KAAA,MAKAC,EAAAC,SAAAC,eAAA,cACAC,EAAAF,SAAAC,eAAA,eACAE,EAAAH,SAAAC,eAAA,eACAG,EAAAJ,SAAAC,eAAA,gBAEA,SAAAI,EAAAC,EAAAC,EAAAC,EAAAC,GACA,UAAAH,GAAA,OAAAC,GAAA,OAAAC,GAAA,OAAAC,EAOA,OANAN,EAAAO,UAAA,gDACAvB,EAAAwB,QAAA,IAAAhB,EAAA,GACAC,WAAA,YACAC,QAAA,KACAC,KAAA,KAKAK,EAAAO,UAAA,IAAAJ,EAAA,KAAAC,EAEA,MAAAK,EAAA,QAAAN,EACAO,EAAA,EAAAC,KAAAF,EAAAJ,GACAO,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GACA,MAAAI,EAAAF,OAAAG,EAAA,EAAAH,CAAAH,GACAO,EAAAJ,OAAAG,EAAA,EAAAH,CAAA,YAAAE,GAGAG,EAAAL,OAAAM,EAAA,EAAAN,EACAN,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAU,GACAF,EAAAK,UAAAF,GACA,MAAAG,EAAA,IAAA5B,EAAA,GACAC,WAAAqB,IAEA9B,EAAAwB,QAAAY,GACAA,EAAAC,IAAAJ,GAmCAlB,EAAAuB,QAAA,SAAAC,IA/BA,SAAAC,GACAxB,EAAAO,UAAA,gBACAkB,MAAA,kCAAAD,GAAAE,KAAA,SAAAC,GACA,OAAAA,EAAAC,SACGF,KAAA,SAAAE,GACH,MAAAC,EAAAD,EAAA,QACA,GAAAC,KAAAC,OAAA,EACA,QAAAC,EAAA,EAAAC,EAAAH,EAAAC,OAA0CC,EAAAC,EAAQD,IAAA,CAClD,MAAAE,EAAAJ,EAAAE,GACA,GAAAE,EAAA,CACA,MAAA9B,EAAA8B,EAAA,KACA7B,EAAA6B,EAAA,KACA5B,EAAA4B,EAAA,MACA3B,EAAA2B,EAAA,KACA,GAAA9B,KAAA2B,OAAA,GAAAzB,KAAAyB,OAAA,GACAxB,GAAA,GAAAA,EAAAwB,OAEA,YADA5B,EAAAC,EAAAC,EAAAC,EAAAC,IAMAJ,EAAA,uBAUAgC,CAAAtC,EAAAuC,OACAZ,EAAAa,kBAOAnC,EAAAoC,SAAA,WACArD,EAAAsD,YAAAC,QAAA,SAAAC,GACA,GAAAA,aAAArD,EAAA,GACA,MAAAC,EAAAoD,EAAAC,YACArD,aAAAsD,EAAA,GACAtD,EAAAuD,2BAAA1C,EAAA2C","file":"reprojection-by-code.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {applyTransform} from '../src/ol/extent.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {get as getProjection, getTransform} from '../src/ol/proj.js';\nimport {register} from '../src/ol/proj/proj4.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport TileImage from '../src/ol/source/TileImage.js';\nimport proj4 from 'proj4';\n\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    })\n  ],\n  target: 'map',\n  view: new View({\n    projection: 'EPSG:3857',\n    center: [0, 0],\n    zoom: 1\n  })\n});\n\n\nconst queryInput = document.getElementById('epsg-query');\nconst searchButton = document.getElementById('epsg-search');\nconst resultSpan = document.getElementById('epsg-result');\nconst renderEdgesCheckbox = document.getElementById('render-edges');\n\nfunction setProjection(code, name, proj4def, bbox) {\n  if (code === null || name === null || proj4def === null || bbox === null) {\n    resultSpan.innerHTML = 'Nothing usable found, using EPSG:3857...';\n    map.setView(new View({\n      projection: 'EPSG:3857',\n      center: [0, 0],\n      zoom: 1\n    }));\n    return;\n  }\n\n  resultSpan.innerHTML = '(' + code + ') ' + name;\n\n  const newProjCode = 'EPSG:' + code;\n  proj4.defs(newProjCode, proj4def);\n  register(proj4);\n  const newProj = getProjection(newProjCode);\n  const fromLonLat = getTransform('EPSG:4326', newProj);\n\n  // very approximate calculation of projection extent\n  const extent = applyTransform(\n    [bbox[1], bbox[2], bbox[3], bbox[0]], fromLonLat);\n  newProj.setExtent(extent);\n  const newView = new View({\n    projection: newProj\n  });\n  map.setView(newView);\n  newView.fit(extent);\n}\n\n\nfunction search(query) {\n  resultSpan.innerHTML = 'Searching ...';\n  fetch('https://epsg.io/?format=json&q=' + query).then(function(response) {\n    return response.json();\n  }).then(function(json) {\n    const results = json['results'];\n    if (results && results.length > 0) {\n      for (let i = 0, ii = results.length; i < ii; i++) {\n        const result = results[i];\n        if (result) {\n          const code = result['code'];\n          const name = result['name'];\n          const proj4def = result['proj4'];\n          const bbox = result['bbox'];\n          if (code && code.length > 0 && proj4def && proj4def.length > 0 &&\n              bbox && bbox.length == 4) {\n            setProjection(code, name, proj4def, bbox);\n            return;\n          }\n        }\n      }\n    }\n    setProjection(null, null, null, null);\n  });\n}\n\n\n/**\n * Handle click event.\n * @param {Event} event The event.\n */\nsearchButton.onclick = function(event) {\n  search(queryInput.value);\n  event.preventDefault();\n};\n\n\n/**\n * Handle change event.\n */\nrenderEdgesCheckbox.onchange = function() {\n  map.getLayers().forEach(function(layer) {\n    if (layer instanceof TileLayer) {\n      const source = layer.getSource();\n      if (source instanceof TileImage) {\n        source.setRenderReprojectionEdges(renderEdgesCheckbox.checked);\n      }\n    }\n  });\n};\n"],"sourceRoot":""}