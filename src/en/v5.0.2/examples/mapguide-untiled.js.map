{"version":3,"sources":["webpack:///../src/ol/source/ImageMapGuide.js","webpack:///./mapguide-untiled.js"],"names":["ImageMapGuide","options","source_Image","call","this","projection","resolutions","crossOrigin_","undefined","crossOrigin","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","Object","util","prototype","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","ol_extent","getExtent","slice","size","imageUrl","getUrl","ol_Image","events","EventType","CHANGE","handleImageChange","getImageLoadFunction","updateParams","obj","changed","baseUrl","scale","dpi","mcsW","mcsH","devW","devH","mpp","getScale","center","baseParams","OPERATION","VERSION","LOCALE","CLIENTAGENT","CLIP","SETDISPLAYDPI","SETDISPLAYWIDTH","Math","round","SETDISPLAYHEIGHT","SETVIEWSCALE","SETVIEWCENTERX","SETVIEWCENTERY","uri","setImageLoadFunction","source_ImageMapGuide","Map","layers","Image","source","MAPDEFINITION","FORMAT","USERNAME","PASSWORD","target","view","View","zoom"],"mappings":"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","file":"mapguide-untiled.js","sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\nimport {inherits} from '../util.js';\nimport ImageWrapper from '../Image.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getHeight, getWidth, scaleFromCenter} from '../extent.js';\nimport {assign} from '../obj.js';\nimport ImageSource, {defaultImageLoadFunction} from '../source/Image.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array.<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object} [params] Additional parameters.\n */\n\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @constructor\n * @fires ol/source/Image~ImageSourceEvent\n * @extends {module:ol/source/Image}\n * @param {module:ol/source/ImageMapGuide~Options=} options ImageMapGuide options.\n * @api\n */\nconst ImageMapGuide = function(options) {\n\n  ImageSource.call(this, {\n    projection: options.projection,\n    resolutions: options.resolutions\n  });\n\n  /**\n   * @private\n   * @type {?string}\n   */\n  this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.displayDpi_ = options.displayDpi !== undefined ?\n    options.displayDpi : 96;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = options.params || {};\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.url_ = options.url;\n\n  /**\n   * @private\n   * @type {module:ol/Image~LoadFunction}\n   */\n  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n    options.imageLoadFunction : defaultImageLoadFunction;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.metersPerUnit_ = options.metersPerUnit !== undefined ?\n    options.metersPerUnit : 1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.useOverlay_ = options.useOverlay !== undefined ?\n    options.useOverlay : false;\n\n  /**\n   * @private\n   * @type {module:ol/Image}\n   */\n  this.image_ = null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.renderedRevision_ = 0;\n\n};\n\ninherits(ImageMapGuide, ImageSource);\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nImageMapGuide.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @inheritDoc\n */\nImageMapGuide.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {\n  resolution = this.findNearestResolution(resolution);\n  pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n  let image = this.image_;\n  if (image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)) {\n    return image;\n  }\n\n  if (this.ratio_ != 1) {\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n  }\n  const width = getWidth(extent) / resolution;\n  const height = getHeight(extent) / resolution;\n  const size = [width * pixelRatio, height * pixelRatio];\n\n  if (this.url_ !== undefined) {\n    const imageUrl = this.getUrl(this.url_, this.params_, extent, size,\n      projection);\n    image = new ImageWrapper(extent, resolution, pixelRatio,\n      imageUrl, this.crossOrigin_,\n      this.imageLoadFunction_);\n    listen(image, EventType.CHANGE,\n      this.handleImageChange, this);\n  } else {\n    image = null;\n  }\n  this.image_ = image;\n  this.renderedRevision_ = this.getRevision();\n\n  return image;\n};\n\n\n/**\n * Return the image load function of the source.\n * @return {module:ol/Image~LoadFunction} The image load function.\n * @api\n */\nImageMapGuide.prototype.getImageLoadFunction = function() {\n  return this.imageLoadFunction_;\n};\n\n\n/**\n * @param {module:ol/extent~Extent} extent The map extents.\n * @param {module:ol/size~Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  } else {\n    return mcsH * metersPerUnit / (devH * mpp); // height limited\n  }\n}\n\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nImageMapGuide.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.changed();\n};\n\n\n/**\n * @param {string} baseUrl The mapagent url.\n * @param {Object.<string, string|number>} params Request parameters.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/size~Size} size Size.\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {string} The mapagent map image request URL.\n */\nImageMapGuide.prototype.getUrl = function(baseUrl, params, extent, size, projection) {\n  const scale = getScale(extent, size,\n    this.metersPerUnit_, this.displayDpi_);\n  const center = getCenter(extent);\n  const baseParams = {\n    'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n    'VERSION': '2.0.0',\n    'LOCALE': 'en',\n    'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n    'CLIP': '1',\n    'SETDISPLAYDPI': this.displayDpi_,\n    'SETDISPLAYWIDTH': Math.round(size[0]),\n    'SETDISPLAYHEIGHT': Math.round(size[1]),\n    'SETVIEWSCALE': scale,\n    'SETVIEWCENTERX': center[0],\n    'SETVIEWCENTERY': center[1]\n  };\n  assign(baseParams, params);\n  return appendParams(baseUrl, baseParams);\n};\n\n\n/**\n * Set the image load function of the MapGuide source.\n * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.\n * @api\n */\nImageMapGuide.prototype.setImageLoadFunction = function(imageLoadFunction) {\n  this.image_ = null;\n  this.imageLoadFunction_ = imageLoadFunction;\n  this.changed();\n};\nexport default ImageMapGuide;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ImageLayer from '../src/ol/layer/Image.js';\nimport ImageMapGuide from '../src/ol/source/ImageMapGuide.js';\n\nconst mdf = 'Library://Public/Samples/Sheboygan/Maps/Sheboygan.MapDefinition';\nconst agentUrl =\n    'http://www.buoyshark.com/mapguide/mapagent/mapagent.fcgi?';\nconst bounds = [\n  -87.865114442365922,\n  43.665065564837931,\n  -87.595394059497067,\n  43.823852564430069\n];\nconst map = new Map({\n  layers: [\n    new ImageLayer({\n      extent: bounds,\n      source: new ImageMapGuide({\n        projection: 'EPSG:4326',\n        url: agentUrl,\n        useOverlay: false,\n        metersPerUnit: 111319.4908, //value returned from mapguide\n        params: {\n          MAPDEFINITION: mdf,\n          FORMAT: 'PNG',\n          USERNAME: 'OpenLayers',\n          PASSWORD: 'OpenLayers'\n        },\n        ratio: 2\n      })\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [-87.7302542509315, 43.744459064634],\n    projection: 'EPSG:4326',\n    zoom: 12\n  })\n});\n"],"sourceRoot":""}