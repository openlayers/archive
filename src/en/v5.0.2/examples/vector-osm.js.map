{"version":3,"sources":["webpack:///../src/ol/format/OSMXML.js","webpack:///./vector-osm.js"],"names":["OSMXML","XMLFeature","call","this","dataProjection","Object","proj","ol_util","NAMESPACE_URIS","WAY_PARSERS","xml","nd","node","objectStack","length","ndrefs","push","getAttribute","tag","readTag","PARSERS","options","state","id","coordinates","parseFloat","nodes","values","tags","NODE_PARSERS","obj","geometry","Point","format_Feature","feature","Feature","setId","setProperties","features","way","ways","prototype","readFeatures","readFeaturesFromNode","opt_options","getReadOptions","localName","j","flatCoordinates","i","ii","point","array","Polygon","setFlatCoordinates","GeometryLayout","XY","LineString","readProjection","writeFeatureNode","writeFeaturesNode","writeGeometryNode","format_OSMXML","map","styles","amenity","parking","Style","stroke","Stroke","color","width","fill","Fill","building",".*","zIndex","highway","service","landuse","forest|grass|allotments","natural","tree","image","Circle","radius","vectorSource","source_Vector","format","loader","extent","resolution","projection","epsg4326Extent","client","XMLHttpRequest","open","addEventListener","responseText","featureProjection","getView","getProjection","addFeatures","query","send","strategy","loadingstrategy","vector","Vector","source","style","key","value","get","undefined","regexp","RegExp","test","raster","Tile","BingMaps","imagerySet","Map","layers","target","document","getElementById","controls","util","attributionOptions","collapsible","view","View","center","maxZoom","zoom"],"mappings":"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","file":"vector-osm.js","sourcesContent":["/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\nimport {inherits} from '../util.js';\nimport {extend} from '../array.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {pushParseAndPop, makeStructureNS} from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](http://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @constructor\n * @extends {module:ol/format/XMLFeature}\n * @api\n */\nconst OSMXML = function() {\n  XMLFeature.call(this);\n\n  /**\n   * @inheritDoc\n   */\n  this.dataProjection = getProjection('EPSG:4326');\n};\n\ninherits(OSMXML, XMLFeature);\n\n\n/**\n * @const\n * @type {Array.<null>}\n */\nconst NAMESPACE_URIS = [null];\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst WAY_PARSERS = makeStructureNS(\n  NAMESPACE_URIS, {\n    'nd': readNd,\n    'tag': readTag\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst PARSERS = makeStructureNS(\n  NAMESPACE_URIS, {\n    'node': readNode,\n    'way': readWay\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}\n */\nconst NODE_PARSERS = makeStructureNS(\n  NAMESPACE_URIS, {\n    'tag': readTag\n  });\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n */\nfunction readNode(node, objectStack) {\n  const options = /** @type {module:ol/format/Feature~ReadOptions} */ (objectStack[0]);\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const id = node.getAttribute('id');\n  /** @type {module:ol/coordinate~Coordinate} */\n  const coordinates = [\n    parseFloat(node.getAttribute('lon')),\n    parseFloat(node.getAttribute('lat'))\n  ];\n  state.nodes[id] = coordinates;\n\n  const values = pushParseAndPop({\n    tags: {}\n  }, NODE_PARSERS, node, objectStack);\n  if (!isEmpty(values.tags)) {\n    const geometry = new Point(coordinates);\n    transformWithOptions(geometry, false, options);\n    const feature = new Feature(geometry);\n    feature.setId(id);\n    feature.setProperties(values.tags);\n    state.features.push(feature);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n */\nfunction readWay(node, objectStack) {\n  const id = node.getAttribute('id');\n  const values = pushParseAndPop({\n    id: id,\n    ndrefs: [],\n    tags: {}\n  }, WAY_PARSERS, node, objectStack);\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  state.ways.push(values);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n */\nfunction readNd(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.ndrefs.push(node.getAttribute('ref'));\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n */\nfunction readTag(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\n\n\n/**\n * Read all features from an OSM source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\nOSMXML.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nOSMXML.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const options = this.getReadOptions(node, opt_options);\n  if (node.localName == 'osm') {\n    const state = pushParseAndPop({\n      nodes: {},\n      ways: [],\n      features: []\n    }, PARSERS, node, [options]);\n    // parse nodes in ways\n    for (let j = 0; j < state.ways.length; j++) {\n      const values = /** @type {Object} */ (state.ways[j]);\n      /** @type {Array.<number>} */\n      const flatCoordinates = [];\n      for (let i = 0, ii = values.ndrefs.length; i < ii; i++) {\n        const point = state.nodes[values.ndrefs[i]];\n        extend(flatCoordinates, point);\n      }\n      let geometry;\n      if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n        // closed way\n        geometry = new Polygon(null);\n        geometry.setFlatCoordinates(GeometryLayout.XY, flatCoordinates,\n          [flatCoordinates.length]);\n      } else {\n        geometry = new LineString(null);\n        geometry.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n      }\n      transformWithOptions(geometry, false, options);\n      const feature = new Feature(geometry);\n      feature.setId(values.id);\n      feature.setProperties(values.tags);\n      state.features.push(feature);\n    }\n    if (state.features) {\n      return state.features;\n    }\n  }\n  return [];\n};\n\n\n/**\n * Read the projection from an OSM source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {module:ol/proj/Projection} Projection.\n * @api\n */\nOSMXML.prototype.readProjection;\n\n\n/**\n * Not implemented.\n * @inheritDoc\n */\nOSMXML.prototype.writeFeatureNode = function(feature, opt_options) {};\n\n\n/**\n * Not implemented.\n * @inheritDoc\n */\nOSMXML.prototype.writeFeaturesNode = function(features, opt_options) {};\n\n\n/**\n * Not implemented.\n * @inheritDoc\n */\nOSMXML.prototype.writeGeometryNode = function(geometry, opt_options) {};\nexport default OSMXML;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls} from '../src/ol/control.js';\nimport OSMXML from '../src/ol/format/OSMXML.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {bbox as bboxStrategy} from '../src/ol/loadingstrategy.js';\nimport {transformExtent} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\nlet map = null;\n\nconst styles = {\n  'amenity': {\n    'parking': new Style({\n      stroke: new Stroke({\n        color: 'rgba(170, 170, 170, 1.0)',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(170, 170, 170, 0.3)'\n      })\n    })\n  },\n  'building': {\n    '.*': new Style({\n      zIndex: 100,\n      stroke: new Stroke({\n        color: 'rgba(246, 99, 79, 1.0)',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(246, 99, 79, 0.3)'\n      })\n    })\n  },\n  'highway': {\n    'service': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 2\n      })\n    }),\n    '.*': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 3\n      })\n    })\n  },\n  'landuse': {\n    'forest|grass|allotments': new Style({\n      stroke: new Stroke({\n        color: 'rgba(140, 208, 95, 1.0)',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(140, 208, 95, 0.3)'\n      })\n    })\n  },\n  'natural': {\n    'tree': new Style({\n      image: new CircleStyle({\n        radius: 2,\n        fill: new Fill({\n          color: 'rgba(140, 208, 95, 1.0)'\n        }),\n        stroke: null\n      })\n    })\n  }\n};\n\nconst vectorSource = new VectorSource({\n  format: new OSMXML(),\n  loader: function(extent, resolution, projection) {\n    const epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n    const client = new XMLHttpRequest();\n    client.open('POST', 'https://overpass-api.de/api/interpreter');\n    client.addEventListener('load', function() {\n      const features = new OSMXML().readFeatures(client.responseText, {\n        featureProjection: map.getView().getProjection()\n      });\n      vectorSource.addFeatures(features);\n    });\n    const query = '(node(' +\n        epsg4326Extent[1] + ',' + epsg4326Extent[0] + ',' +\n        epsg4326Extent[3] + ',' + epsg4326Extent[2] +\n        ');rel(bn)->.foo;way(bn);node(w)->.foo;rel(bw););out meta;';\n    client.send(query);\n  },\n  strategy: bboxStrategy\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function(feature) {\n    for (const key in styles) {\n      const value = feature.get(key);\n      if (value !== undefined) {\n        for (const regexp in styles[key]) {\n          if (new RegExp(regexp).test(value)) {\n            return styles[key][regexp];\n          }\n        }\n      }\n    }\n    return null;\n  }\n});\n\nconst raster = new TileLayer({\n  source: new BingMaps({\n    imagerySet: 'Aerial',\n    key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5'\n  })\n});\n\nmap = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  controls: defaultControls({\n    attributionOptions: {\n      collapsible: false\n    }\n  }),\n  view: new View({\n    center: [739218, 5906096],\n    maxZoom: 19,\n    zoom: 17\n  })\n});\n"],"sourceRoot":""}