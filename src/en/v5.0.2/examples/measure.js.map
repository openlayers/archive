{"version":3,"sources":["webpack:///./measure.js"],"names":["raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_8__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_11__","vector","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_9__","style","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_12__","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","color","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_14__","width","image","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_15__","radius","sketch","helpTooltipElement","helpTooltip","measureTooltipElement","measureTooltip","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_4__","center","zoom","on","evt","dragging","helpMsg","geom","getGeometry","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_6__","innerHTML","setPosition","coordinate","classList","remove","getViewport","addEventListener","add","typeSelect","document","getElementById","draw","formatLength","line","length","Object","_src_ol_sphere_js__WEBPACK_IMPORTED_MODULE_3__","output","Math","round","formatArea","polygon","area","addInteraction","type","value","listener","_src_ol_interaction_Draw_js__WEBPACK_IMPORTED_MODULE_7__","lineDash","createMeasureTooltip","parentNode","removeChild","createElement","className","_src_ol_Overlay_js__WEBPACK_IMPORTED_MODULE_2__","element","offset","positioning","addOverlay","createHelpTooltip","feature","tooltipCoord","getInteriorPoint","getCoordinates","getLastCoordinate","this","setOffset","_src_ol_Observable_js__WEBPACK_IMPORTED_MODULE_1__","onchange","removeInteraction"],"mappings":"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","file":"measure.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport {unByKey} from '../src/ol/Observable.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport {getArea, getLength} from '../src/ol/sphere.js';\nimport View from '../src/ol/View.js';\nimport {LineString, Polygon} from '../src/ol/geom.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst source = new VectorSource();\n\nconst vector = new VectorLayer({\n  source: source,\n  style: new Style({\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 0.2)'\n    }),\n    stroke: new Stroke({\n      color: '#ffcc33',\n      width: 2\n    }),\n    image: new CircleStyle({\n      radius: 7,\n      fill: new Fill({\n        color: '#ffcc33'\n      })\n    })\n  })\n});\n\n\n/**\n * Currently drawn feature.\n * @type {module:ol/Feature~Feature}\n */\nlet sketch;\n\n\n/**\n * The help tooltip element.\n * @type {Element}\n */\nlet helpTooltipElement;\n\n\n/**\n * Overlay to show the help messages.\n * @type {module:ol/Overlay}\n */\nlet helpTooltip;\n\n\n/**\n * The measure tooltip element.\n * @type {Element}\n */\nlet measureTooltipElement;\n\n\n/**\n * Overlay to show the measurement.\n * @type {module:ol/Overlay}\n */\nlet measureTooltip;\n\n\n/**\n * Message to show when the user is drawing a polygon.\n * @type {string}\n */\nconst continuePolygonMsg = 'Click to continue drawing the polygon';\n\n\n/**\n * Message to show when the user is drawing a line.\n * @type {string}\n */\nconst continueLineMsg = 'Click to continue drawing the line';\n\n\n/**\n * Handle pointer move.\n * @param {module:ol/MapBrowserEvent~MapBrowserEvent} evt The event.\n */\nconst pointerMoveHandler = function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  /** @type {string} */\n  let helpMsg = 'Click to start drawing';\n\n  if (sketch) {\n    const geom = (sketch.getGeometry());\n    if (geom instanceof Polygon) {\n      helpMsg = continuePolygonMsg;\n    } else if (geom instanceof LineString) {\n      helpMsg = continueLineMsg;\n    }\n  }\n\n  helpTooltipElement.innerHTML = helpMsg;\n  helpTooltip.setPosition(evt.coordinate);\n\n  helpTooltipElement.classList.remove('hidden');\n};\n\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 15\n  })\n});\n\nmap.on('pointermove', pointerMoveHandler);\n\nmap.getViewport().addEventListener('mouseout', function() {\n  helpTooltipElement.classList.add('hidden');\n});\n\nconst typeSelect = document.getElementById('type');\n\nlet draw; // global so we can remove it later\n\n\n/**\n * Format length output.\n * @param {module:ol/geom/LineString~LineString} line The line.\n * @return {string} The formatted length.\n */\nconst formatLength = function(line) {\n  const length = getLength(line);\n  let output;\n  if (length > 100) {\n    output = (Math.round(length / 1000 * 100) / 100) +\n        ' ' + 'km';\n  } else {\n    output = (Math.round(length * 100) / 100) +\n        ' ' + 'm';\n  }\n  return output;\n};\n\n\n/**\n * Format area output.\n * @param {module:ol/geom/Polygon~Polygon} polygon The polygon.\n * @return {string} Formatted area.\n */\nconst formatArea = function(polygon) {\n  const area = getArea(polygon);\n  let output;\n  if (area > 10000) {\n    output = (Math.round(area / 1000000 * 100) / 100) +\n        ' ' + 'km<sup>2</sup>';\n  } else {\n    output = (Math.round(area * 100) / 100) +\n        ' ' + 'm<sup>2</sup>';\n  }\n  return output;\n};\n\nfunction addInteraction() {\n  const type = (typeSelect.value == 'area' ? 'Polygon' : 'LineString');\n  draw = new Draw({\n    source: source,\n    type: type,\n    style: new Style({\n      fill: new Fill({\n        color: 'rgba(255, 255, 255, 0.2)'\n      }),\n      stroke: new Stroke({\n        color: 'rgba(0, 0, 0, 0.5)',\n        lineDash: [10, 10],\n        width: 2\n      }),\n      image: new CircleStyle({\n        radius: 5,\n        stroke: new Stroke({\n          color: 'rgba(0, 0, 0, 0.7)'\n        }),\n        fill: new Fill({\n          color: 'rgba(255, 255, 255, 0.2)'\n        })\n      })\n    })\n  });\n  map.addInteraction(draw);\n\n  createMeasureTooltip();\n  createHelpTooltip();\n\n  let listener;\n  draw.on('drawstart',\n    function(evt) {\n      // set sketch\n      sketch = evt.feature;\n\n      /** @type {module:ol/coordinate~Coordinate|undefined} */\n      let tooltipCoord = evt.coordinate;\n\n      listener = sketch.getGeometry().on('change', function(evt) {\n        const geom = evt.target;\n        let output;\n        if (geom instanceof Polygon) {\n          output = formatArea(geom);\n          tooltipCoord = geom.getInteriorPoint().getCoordinates();\n        } else if (geom instanceof LineString) {\n          output = formatLength(geom);\n          tooltipCoord = geom.getLastCoordinate();\n        }\n        measureTooltipElement.innerHTML = output;\n        measureTooltip.setPosition(tooltipCoord);\n      });\n    }, this);\n\n  draw.on('drawend',\n    function() {\n      measureTooltipElement.className = 'tooltip tooltip-static';\n      measureTooltip.setOffset([0, -7]);\n      // unset sketch\n      sketch = null;\n      // unset tooltip so that a new one can be created\n      measureTooltipElement = null;\n      createMeasureTooltip();\n      unByKey(listener);\n    }, this);\n}\n\n\n/**\n * Creates a new help tooltip\n */\nfunction createHelpTooltip() {\n  if (helpTooltipElement) {\n    helpTooltipElement.parentNode.removeChild(helpTooltipElement);\n  }\n  helpTooltipElement = document.createElement('div');\n  helpTooltipElement.className = 'tooltip hidden';\n  helpTooltip = new Overlay({\n    element: helpTooltipElement,\n    offset: [15, 0],\n    positioning: 'center-left'\n  });\n  map.addOverlay(helpTooltip);\n}\n\n\n/**\n * Creates a new measure tooltip\n */\nfunction createMeasureTooltip() {\n  if (measureTooltipElement) {\n    measureTooltipElement.parentNode.removeChild(measureTooltipElement);\n  }\n  measureTooltipElement = document.createElement('div');\n  measureTooltipElement.className = 'tooltip tooltip-measure';\n  measureTooltip = new Overlay({\n    element: measureTooltipElement,\n    offset: [0, -15],\n    positioning: 'bottom-center'\n  });\n  map.addOverlay(measureTooltip);\n}\n\n\n/**\n * Let user change the geometry type.\n */\ntypeSelect.onchange = function() {\n  map.removeInteraction(draw);\n  addInteraction();\n};\n\naddInteraction();\n"],"sourceRoot":""}