{"version":3,"sources":["webpack:///./magnify.js"],"names":["imagery","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_2__","source","_src_ol_source_BingMaps_js__WEBPACK_IMPORTED_MODULE_4__","key","imagerySet","container","document","getElementById","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","Object","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_3__","zoom","radius","addEventListener","evt","which","Math","min","render","preventDefault","max","mousePosition","event","getEventPixel","on","context","pixelRatio","frameState","half","centerX","centerY","originX","originY","size","sourceData","getImageData","data","dest","createImageData","destData","j","i","dI","dJ","sourceI","sourceJ","sqrt","round","destOffset","sourceOffset","beginPath","arc","PI","lineWidth","strokeStyle","putImageData","stroke","restore"],"mappings":"0IAMA,MAEAA,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GAAwBC,IAHxB,mEAGwBC,WAAA,aAGxBC,EAAAC,SAAAC,eAAA,OAEAC,EAAA,IAAAC,EAAA,GACAC,QAAAX,GACAY,OAAAN,EACAO,KAAA,IAAAC,EAAA,GACAC,OAAAC,OAAAC,EAAA,EAAAD,GAAA,WACAE,KAAA,MAIA,IAAAC,EAAA,GACAZ,SAAAa,iBAAA,mBAAAC,GACA,KAAAA,EAAAC,OACAH,EAAAI,KAAAC,IAAAL,EAAA,OACAV,EAAAgB,SACAJ,EAAAK,kBACG,KAAAL,EAAAC,QACHH,EAAAI,KAAAI,IAAAR,EAAA,MACAV,EAAAgB,SACAJ,EAAAK,oBAKA,IAAAE,EAAA,KAEAtB,EAAAc,iBAAA,qBAAAS,GACAD,EAAAnB,EAAAqB,cAAAD,GACApB,EAAAgB,WAGAnB,EAAAc,iBAAA,sBACAQ,EAAA,KACAnB,EAAAgB,WAIAzB,EAAA+B,GAAA,uBAAAF,GACA,GAAAD,EAAA,CACA,MAAAI,EAAAH,EAAAG,QACAC,EAAAJ,EAAAK,WAAAD,WACAE,EAAAhB,EAAAc,EACAG,EAAAR,EAAA,GAAAK,EACAI,EAAAT,EAAA,GAAAK,EACAK,EAAAF,EAAAD,EACAI,EAAAF,EAAAF,EACAK,EAAA,EAAAL,EAAA,EACAM,EAAAT,EAAAU,aAAAJ,EAAAC,EAAAC,KAAAG,KACAC,EAAAZ,EAAAa,gBAAAL,KACAM,EAAAF,EAAAD,KACA,QAAAI,EAAA,EAAmBA,EAAAP,IAAUO,EAC7B,QAAAC,EAAA,EAAqBA,EAAAR,IAAUQ,EAAA,CAC/B,MAAAC,EAAAD,EAAAb,EACAe,EAAAH,EAAAZ,EAEA,IAAAgB,EAAAH,EACAI,EAAAL,EAFAxB,KAAA8B,KAAAJ,IAAAC,KAGAf,IACAgB,EAAA5B,KAAA+B,MAAAnB,EAAAc,EAAA,GACAG,EAAA7B,KAAA+B,MAAAnB,EAAAe,EAAA,IAEA,MAAAK,EAAA,GAAAR,EAAAP,EAAAQ,GACAQ,EAAA,GAAAJ,EAAAZ,EAAAW,GACAL,EAAAS,GAAAd,EAAAe,GACAV,EAAAS,EAAA,GAAAd,EAAAe,EAAA,GACAV,EAAAS,EAAA,GAAAd,EAAAe,EAAA,GACAV,EAAAS,EAAA,GAAAd,EAAAe,EAAA,GAGAxB,EAAAyB,YACAzB,EAAA0B,IAAAtB,EAAAC,EAAAF,EAAA,IAAAZ,KAAAoC,IACA3B,EAAA4B,UAAA,EAAA3B,EACAD,EAAA6B,YAAA,wBACA7B,EAAA8B,aAAAlB,EAAAN,EAAAC,GACAP,EAAA+B,SACA/B,EAAAgC","file":"magnify.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\n\nconst key = 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5';\n\nconst imagery = new TileLayer({\n  source: new BingMaps({key: key, imagerySet: 'Aerial'})\n});\n\nconst container = document.getElementById('map');\n\nconst map = new Map({\n  layers: [imagery],\n  target: container,\n  view: new View({\n    center: fromLonLat([-109, 46.5]),\n    zoom: 6\n  })\n});\n\nlet radius = 75;\ndocument.addEventListener('keydown', function(evt) {\n  if (evt.which === 38) {\n    radius = Math.min(radius + 5, 150);\n    map.render();\n    evt.preventDefault();\n  } else if (evt.which === 40) {\n    radius = Math.max(radius - 5, 25);\n    map.render();\n    evt.preventDefault();\n  }\n});\n\n// get the pixel position with every move\nlet mousePosition = null;\n\ncontainer.addEventListener('mousemove', function(event) {\n  mousePosition = map.getEventPixel(event);\n  map.render();\n});\n\ncontainer.addEventListener('mouseout', function() {\n  mousePosition = null;\n  map.render();\n});\n\n// after rendering the layer, show an oversampled version around the pointer\nimagery.on('postcompose', function(event) {\n  if (mousePosition) {\n    const context = event.context;\n    const pixelRatio = event.frameState.pixelRatio;\n    const half = radius * pixelRatio;\n    const centerX = mousePosition[0] * pixelRatio;\n    const centerY = mousePosition[1] * pixelRatio;\n    const originX = centerX - half;\n    const originY = centerY - half;\n    const size = 2 * half + 1;\n    const sourceData = context.getImageData(originX, originY, size, size).data;\n    const dest = context.createImageData(size, size);\n    const destData = dest.data;\n    for (let j = 0; j < size; ++j) {\n      for (let i = 0; i < size; ++i) {\n        const dI = i - half;\n        const dJ = j - half;\n        const dist = Math.sqrt(dI * dI + dJ * dJ);\n        let sourceI = i;\n        let sourceJ = j;\n        if (dist < half) {\n          sourceI = Math.round(half + dI / 2);\n          sourceJ = Math.round(half + dJ / 2);\n        }\n        const destOffset = (j * size + i) * 4;\n        const sourceOffset = (sourceJ * size + sourceI) * 4;\n        destData[destOffset] = sourceData[sourceOffset];\n        destData[destOffset + 1] = sourceData[sourceOffset + 1];\n        destData[destOffset + 2] = sourceData[sourceOffset + 2];\n        destData[destOffset + 3] = sourceData[sourceOffset + 3];\n      }\n    }\n    context.beginPath();\n    context.arc(centerX, centerY, half, 0, 2 * Math.PI);\n    context.lineWidth = 3 * pixelRatio;\n    context.strokeStyle = 'rgba(255,255,255,0.5)';\n    context.putImageData(dest, originX, originY);\n    context.stroke();\n    context.restore();\n  }\n});\n"],"sourceRoot":""}