{"version":3,"sources":["webpack:///./device-orientation.js"],"names":["view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_3__","source","_src_ol_source_OSM_js__WEBPACK_IMPORTED_MODULE_5__","target","controls","Object","_src_ol_control_js__WEBPACK_IMPORTED_MODULE_2__","attributionOptions","collapsible","el","id","document","getElementById","gn","GyroNorm","init","then","start","event","getCenter","resolution","getResolution","alpha","_src_ol_math_js__WEBPACK_IMPORTED_MODULE_4__","do","beta","gamma","innerText","setCenter","constrainCenter"],"mappings":"oJAOA,MAAAA,EAAA,IAAAC,EAAA,GACAC,QAAA,KACAC,KAAA,IAEA,IAAAC,EAAA,GACAC,QACA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,KAGAC,OAAA,MACAC,SAAAC,OAAAC,EAAA,EAAAD,EACAE,oBACAC,aAAA,KAGAd,SAGA,SAAAe,EAAAC,GACA,OAAAC,SAAAC,eAAAF,GAIA,MAAAG,EAAA,IAAAC,SAEAD,EAAAE,OAAAC,KAAA,WACAH,EAAAI,MAAA,SAAAC,GACA,MAAAtB,EAAAF,EAAAyB,YACAC,EAAA1B,EAAA2B,gBACAC,EAAAjB,OAAAkB,EAAA,EAAAlB,CAAAa,EAAAM,GAAAC,MACAA,EAAApB,OAAAkB,EAAA,EAAAlB,CAAAa,EAAAM,GAAAC,MACAC,EAAArB,OAAAkB,EAAA,EAAAlB,CAAAa,EAAAM,GAAAE,OAEAjB,EAAA,SAAAkB,UAAAL,EAAA,SACAb,EAAA,QAAAkB,UAAAF,EAAA,SACAhB,EAAA,SAAAkB,UAAAD,EAAA,SAEA9B,EAAA,IAAAwB,EAAAM,EAAA,GACA9B,EAAA,IAAAwB,EAAAK,EAAA,GAEA/B,EAAAkC,UAAAlC,EAAAmC,gBAAAjC","file":"device-orientation.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls} from '../src/ol/control.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {toRadians} from '../src/ol/math.js';\nimport OSM from '../src/ol/source/OSM.js';\n\nconst view = new View({\n  center: [0, 0],\n  zoom: 2\n});\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    })\n  ],\n  target: 'map',\n  controls: defaultControls({\n    attributionOptions: {\n      collapsible: false\n    }\n  }),\n  view: view\n});\n\nfunction el(id) {\n  return document.getElementById(id);\n}\n\n\nconst gn = new GyroNorm();\n\ngn.init().then(function() {\n  gn.start(function(event) {\n    const center = view.getCenter();\n    const resolution = view.getResolution();\n    const alpha = toRadians(event.do.beta);\n    const beta = toRadians(event.do.beta);\n    const gamma = toRadians(event.do.gamma);\n\n    el('alpha').innerText = alpha + ' [rad]';\n    el('beta').innerText = beta + ' [rad]';\n    el('gamma').innerText = gamma + ' [rad]';\n\n    center[0] -= resolution * gamma * 25;\n    center[1] += resolution * beta * 25;\n\n    view.setCenter(view.constrainCenter(center));\n  });\n});\n"],"sourceRoot":""}