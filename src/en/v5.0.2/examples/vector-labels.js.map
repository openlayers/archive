{"version":3,"sources":["webpack:///./vector-labels.js"],"names":["openSansAdded","myDom","points","text","document","getElementById","align","baseline","rotation","font","weight","size","offsetX","offsetY","color","outline","outlineWidth","maxreso","lines","placement","maxangle","overflow","polygons","getText","feature","resolution","dom","type","value","maxResolution","get","trunc","stringDivider","str","width","spaceReplacer","length","p","left","substring","right","createTextStyle","parseInt","undefined","maxAngle","parseFloat","openSans","createElement","href","rel","getElementsByTagName","appendChild","fillColor","outlineColor","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","textAlign","textBaseline","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","polygonStyleFunction","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_10__","vectorPolygons","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_5__","url","format","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_2__","style","lineStyleFunction","vectorLines","pointStyleFunction","image","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_11__","radius","vectorPoints","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_6__","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","addEventListener","setStyle","String","prototype","n","this","substr"],"mappings":"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","file":"vector-labels.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style, Text} from '../src/ol/style.js';\n\nlet openSansAdded = false;\n\nconst myDom = {\n  points: {\n    text: document.getElementById('points-text'),\n    align: document.getElementById('points-align'),\n    baseline: document.getElementById('points-baseline'),\n    rotation: document.getElementById('points-rotation'),\n    font: document.getElementById('points-font'),\n    weight: document.getElementById('points-weight'),\n    size: document.getElementById('points-size'),\n    offsetX: document.getElementById('points-offset-x'),\n    offsetY: document.getElementById('points-offset-y'),\n    color: document.getElementById('points-color'),\n    outline: document.getElementById('points-outline'),\n    outlineWidth: document.getElementById('points-outline-width'),\n    maxreso: document.getElementById('points-maxreso')\n  },\n  lines: {\n    text: document.getElementById('lines-text'),\n    align: document.getElementById('lines-align'),\n    baseline: document.getElementById('lines-baseline'),\n    rotation: document.getElementById('lines-rotation'),\n    font: document.getElementById('lines-font'),\n    weight: document.getElementById('lines-weight'),\n    placement: document.getElementById('lines-placement'),\n    maxangle: document.getElementById('lines-maxangle'),\n    overflow: document.getElementById('lines-overflow'),\n    size: document.getElementById('lines-size'),\n    offsetX: document.getElementById('lines-offset-x'),\n    offsetY: document.getElementById('lines-offset-y'),\n    color: document.getElementById('lines-color'),\n    outline: document.getElementById('lines-outline'),\n    outlineWidth: document.getElementById('lines-outline-width'),\n    maxreso: document.getElementById('lines-maxreso')\n  },\n  polygons: {\n    text: document.getElementById('polygons-text'),\n    align: document.getElementById('polygons-align'),\n    baseline: document.getElementById('polygons-baseline'),\n    rotation: document.getElementById('polygons-rotation'),\n    font: document.getElementById('polygons-font'),\n    weight: document.getElementById('polygons-weight'),\n    placement: document.getElementById('polygons-placement'),\n    maxangle: document.getElementById('polygons-maxangle'),\n    overflow: document.getElementById('polygons-overflow'),\n    size: document.getElementById('polygons-size'),\n    offsetX: document.getElementById('polygons-offset-x'),\n    offsetY: document.getElementById('polygons-offset-y'),\n    color: document.getElementById('polygons-color'),\n    outline: document.getElementById('polygons-outline'),\n    outlineWidth: document.getElementById('polygons-outline-width'),\n    maxreso: document.getElementById('polygons-maxreso')\n  }\n};\n\nconst getText = function(feature, resolution, dom) {\n  const type = dom.text.value;\n  const maxResolution = dom.maxreso.value;\n  let text = feature.get('name');\n\n  if (resolution > maxResolution) {\n    text = '';\n  } else if (type == 'hide') {\n    text = '';\n  } else if (type == 'shorten') {\n    text = text.trunc(12);\n  } else if (type == 'wrap' && (!dom.placement || dom.placement.value != 'line')) {\n    text = stringDivider(text, 16, '\\n');\n  }\n\n  return text;\n};\n\n\nconst createTextStyle = function(feature, resolution, dom) {\n  const align = dom.align.value;\n  const baseline = dom.baseline.value;\n  const size = dom.size.value;\n  const offsetX = parseInt(dom.offsetX.value, 10);\n  const offsetY = parseInt(dom.offsetY.value, 10);\n  const weight = dom.weight.value;\n  const placement = dom.placement ? dom.placement.value : undefined;\n  const maxAngle = dom.maxangle ? parseFloat(dom.maxangle.value) : undefined;\n  const overflow = dom.overflow ? (dom.overflow.value == 'true') : undefined;\n  const rotation = parseFloat(dom.rotation.value);\n  if (dom.font.value == '\\'Open Sans\\'' && !openSansAdded) {\n    const openSans = document.createElement('link');\n    openSans.href = 'https://fonts.googleapis.com/css?family=Open+Sans';\n    openSans.rel = 'stylesheet';\n    document.getElementsByTagName('head')[0].appendChild(openSans);\n    openSansAdded = true;\n  }\n  const font = weight + ' ' + size + ' ' + dom.font.value;\n  const fillColor = dom.color.value;\n  const outlineColor = dom.outline.value;\n  const outlineWidth = parseInt(dom.outlineWidth.value, 10);\n\n  return new Text({\n    textAlign: align == '' ? undefined : align,\n    textBaseline: baseline,\n    font: font,\n    text: getText(feature, resolution, dom),\n    fill: new Fill({color: fillColor}),\n    stroke: new Stroke({color: outlineColor, width: outlineWidth}),\n    offsetX: offsetX,\n    offsetY: offsetY,\n    placement: placement,\n    maxAngle: maxAngle,\n    overflow: overflow,\n    rotation: rotation\n  });\n};\n\n\n// Polygons\nfunction polygonStyleFunction(feature, resolution) {\n  return new Style({\n    stroke: new Stroke({\n      color: 'blue',\n      width: 1\n    }),\n    fill: new Fill({\n      color: 'rgba(0, 0, 255, 0.1)'\n    }),\n    text: createTextStyle(feature, resolution, myDom.polygons)\n  });\n}\n\nconst vectorPolygons = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/polygon-samples.geojson',\n    format: new GeoJSON()\n  }),\n  style: polygonStyleFunction\n});\n\n\n// Lines\nfunction lineStyleFunction(feature, resolution) {\n  return new Style({\n    stroke: new Stroke({\n      color: 'green',\n      width: 2\n    }),\n    text: createTextStyle(feature, resolution, myDom.lines)\n  });\n}\n\nconst vectorLines = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/line-samples.geojson',\n    format: new GeoJSON()\n  }),\n  style: lineStyleFunction\n});\n\n\n// Points\nfunction pointStyleFunction(feature, resolution) {\n  return new Style({\n    image: new CircleStyle({\n      radius: 10,\n      fill: new Fill({color: 'rgba(255, 0, 0, 0.1)'}),\n      stroke: new Stroke({color: 'red', width: 1})\n    }),\n    text: createTextStyle(feature, resolution, myDom.points)\n  });\n}\n\nconst vectorPoints = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/point-samples.geojson',\n    format: new GeoJSON()\n  }),\n  style: pointStyleFunction\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    vectorPolygons,\n    vectorLines,\n    vectorPoints\n  ],\n  target: 'map',\n  view: new View({\n    center: [-8161939, 6095025],\n    zoom: 8\n  })\n});\n\ndocument.getElementById('refresh-points')\n  .addEventListener('click', function() {\n    vectorPoints.setStyle(pointStyleFunction);\n  });\n\ndocument.getElementById('refresh-lines')\n  .addEventListener('click', function() {\n    vectorLines.setStyle(lineStyleFunction);\n  });\n\ndocument.getElementById('refresh-polygons')\n  .addEventListener('click', function() {\n    vectorPolygons.setStyle(polygonStyleFunction);\n  });\n\n\n/**\n * @param {number} n The max number of characters to keep.\n * @return {string} Truncated string.\n */\nString.prototype.trunc = String.prototype.trunc ||\n    function(n) {\n      return this.length > n ? this.substr(0, n - 1) + '...' : this.substr(0);\n    };\n\n\n// http://stackoverflow.com/questions/14484787/wrap-text-in-javascript\nfunction stringDivider(str, width, spaceReplacer) {\n  if (str.length > width) {\n    let p = width;\n    while (p > 0 && (str[p] != ' ' && str[p] != '-')) {\n      p--;\n    }\n    if (p > 0) {\n      let left;\n      if (str.substring(p, p + 1) == '-') {\n        left = str.substring(0, p + 1);\n      } else {\n        left = str.substring(0, p);\n      }\n      const right = str.substring(p + 1);\n      return left + spaceReplacer + stringDivider(right, width, spaceReplacer);\n    }\n  }\n  return str;\n}\n"],"sourceRoot":""}