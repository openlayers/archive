{"version":3,"sources":["webpack:///./geojson-vt.js"],"names":["replacer","key","value","geometry","type","rawType","length","coordinates","properties","tags","tilePixels","code","units","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","source","_src_ol_source_OSM_js__WEBPACK_IMPORTED_MODULE_3__","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","fetch","then","response","json","tileIndex","geojsonvt","extent","debug","vectorSource","_src_ol_source_VectorTile_js__WEBPACK_IMPORTED_MODULE_4__","format","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_2__","tileLoadFunction","tile","getFormat","tileCoord","getTileCoord","data","getTile","features","readFeatures","JSON","stringify","setLoader","setFeatures","setProjection","url","vectorLayer","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_6__","addLayer"],"mappings":"6JASA,MAAAA,EAAA,SAAAC,EAAAC,GACA,GAAAA,EAAAC,SAAA,CACA,IAAAC,EACA,MAAAC,EAAAH,EAAAE,KACA,IAAAD,EAAAD,EAAAC,SAsBA,OApBA,IAAAE,GACAD,EAAA,aACA,GAAAD,EAAAG,SACAF,EAAA,QACAD,IAAA,KAEK,IAAAE,GACLD,EAAA,kBACA,GAAAD,EAAAG,SACAF,EAAA,aACAD,IAAA,KAEK,IAAAE,IACLD,EAAA,UACAD,EAAAG,OAAA,IACAF,EAAA,eACAD,SAKAC,KAAA,UACAD,UACAC,OACAG,YAAAJ,GAEAK,WAAAN,EAAAO,MAGA,OAAAP,GAIAQ,EAAA,cACAC,KAAA,cACAC,MAAA,gBAGAC,EAAA,IAAAC,EAAA,GACAC,QACA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,KAGAC,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,QAAA,KACAC,KAAA,MAKAC,MADA,kCACAC,KAAA,SAAAC,GACA,OAAAA,EAAAC,SACCF,KAAA,SAAAE,GACD,MAAAC,EAAAC,UAAAF,GACAG,OAAA,KACAC,MAAA,IAEAC,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,EACAC,iBAAA,SAAAC,GACA,MAAAH,EAAAG,EAAAC,YACAC,EAAAF,EAAAG,eACAC,EAAAb,EAAAc,QAAAH,EAAA,GAAAA,EAAA,IAAAA,EAAA,MAEAI,EAAAT,EAAAU,aACAC,KAAAC,WACA1C,KAAA,oBACAuC,SAAAF,IAAAE,aACS3C,IACTqC,EAAAU,UAAA,WACAV,EAAAW,YAAAL,GACAN,EAAAY,cAAAvC,MAGAwC,IAAA,UAEAC,EAAA,IAAAC,EAAA,GACAnC,OAAAe,IAEAnB,EAAAwC,SAAAF","file":"geojson-vt.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorTileSource from '../src/ol/source/VectorTile.js';\nimport {Tile as TileLayer, VectorTile as VectorTileLayer} from '../src/ol/layer.js';\nimport Projection from '../src/ol/proj/Projection.js';\n\n\nconst replacer = function(key, value) {\n  if (value.geometry) {\n    let type;\n    const rawType = value.type;\n    let geometry = value.geometry;\n\n    if (rawType === 1) {\n      type = 'MultiPoint';\n      if (geometry.length == 1) {\n        type = 'Point';\n        geometry = geometry[0];\n      }\n    } else if (rawType === 2) {\n      type = 'MultiLineString';\n      if (geometry.length == 1) {\n        type = 'LineString';\n        geometry = geometry[0];\n      }\n    } else if (rawType === 3) {\n      type = 'Polygon';\n      if (geometry.length > 1) {\n        type = 'MultiPolygon';\n        geometry = [geometry];\n      }\n    }\n\n    return {\n      'type': 'Feature',\n      'geometry': {\n        'type': type,\n        'coordinates': geometry\n      },\n      'properties': value.tags\n    };\n  } else {\n    return value;\n  }\n};\n\nconst tilePixels = new Projection({\n  code: 'TILE_PIXELS',\n  units: 'tile-pixels'\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst url = 'data/geojson/countries.geojson';\nfetch(url).then(function(response) {\n  return response.json();\n}).then(function(json) {\n  const tileIndex = geojsonvt(json, {\n    extent: 4096,\n    debug: 1\n  });\n  const vectorSource = new VectorTileSource({\n    format: new GeoJSON(),\n    tileLoadFunction: function(tile) {\n      const format = tile.getFormat();\n      const tileCoord = tile.getTileCoord();\n      const data = tileIndex.getTile(tileCoord[0], tileCoord[1], -tileCoord[2] - 1);\n\n      const features = format.readFeatures(\n        JSON.stringify({\n          type: 'FeatureCollection',\n          features: data ? data.features : []\n        }, replacer));\n      tile.setLoader(function() {\n        tile.setFeatures(features);\n        tile.setProjection(tilePixels);\n      });\n    },\n    url: 'data:' // arbitrary url, we don't use it in the tileLoadFunction\n  });\n  const vectorLayer = new VectorTileLayer({\n    source: vectorSource\n  });\n  map.addLayer(vectorLayer);\n});\n"],"sourceRoot":""}