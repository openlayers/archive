{"version":3,"sources":["webpack:///../src/ol/source/TileArcGISRest.js","webpack:///./arcgis-tiled.js"],"names":["TileArcGISRest","opt_options","options","TileImage","call","this","attributions","cacheSize","crossOrigin","projection","reprojectionErrorThreshold","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","params_","params","tmpExtent_","Object","extent","setKey","getKeyForParams_","util","prototype","i","res","key","join","getParams","getRequestUrl_","tileCoord","tileSize","tileExtent","pixelRatio","srid","getCode","split","pop","Math","round","length","math","tilecoord","modifiedUrl","replace","uri","getTilePixelRatio","fixedTileUrlFunction","getTileGrid","getTileGridForProjection","getResolutions","getTileCoordExtent","size","getTileSize","tmpSize","baseParams","F","FORMAT","TRANSPARENT","obj","updateParams","source_TileArcGISRest","arcgis_tiled_layers","Tile","source","OSM","Map","layers","target","view","View","center","zoom"],"mappings":"kMAkEA,MAAAA,EAAA,SAAAC,GAEA,MAAAC,EAAAD,MAEAE,EAAA,EAAAC,KAAAC,MACAC,aAAAJ,EAAAI,aACAC,UAAAL,EAAAK,UACAC,YAAAN,EAAAM,YACAC,WAAAP,EAAAO,WACAC,2BAAAR,EAAAQ,2BACAC,SAAAT,EAAAS,SACAC,iBAAAV,EAAAU,iBACAC,IAAAX,EAAAW,IACAC,KAAAZ,EAAAY,KACAC,WAAAC,IAAAd,EAAAa,OAAAb,EAAAa,MACAE,WAAAf,EAAAe,aAOAZ,KAAAa,QAAAhB,EAAAiB,WAMAd,KAAAe,WAAAC,OAAAC,EAAA,EAAAD,GAEAhB,KAAAkB,OAAAlB,KAAAmB,qBAGAH,OAAAI,EAAA,EAAAJ,CAAArB,EAAAG,EAAA,GAOAH,EAAA0B,UAAAF,iBAAA,WACA,IAAAG,EAAA,EACA,MAAAC,KACA,UAAAC,KAAAxB,KAAAa,QACAU,EAAAD,KAAAE,EAAA,IAAAxB,KAAAa,QAAAW,GAEA,OAAAD,EAAAE,KAAA,MAUA9B,EAAA0B,UAAAK,UAAA,WACA,OAAA1B,KAAAa,SAcAlB,EAAA0B,UAAAM,eAAA,SAAAC,EAAAC,EAAAC,EACAC,EAAA3B,EAAAU,GAEA,MAAAL,EAAAT,KAAAS,KACA,IAAAA,EACA,OAIA,MAAAuB,EAAA5B,EAAA6B,UAAAC,MAAA,KAAAC,MAUA,IAAA3B,EACA,GATAM,EAAA,KAAAe,EAAA,OAAAA,EAAA,GACAf,EAAA,KAAAgB,EAAAL,KAAA,KACAX,EAAA,OAAAkB,EACAlB,EAAA,QAAAkB,EACAlB,EAAA,IAAAsB,KAAAC,MACAvB,EAAA,IAAAA,EAAA,IAAAiB,EAAA,GAAAA,GAIA,GAAAtB,EAAA6B,OACA9B,EAAAC,EAAA,OACG,CAEHD,EAAAC,EADAO,OAAAuB,EAAA,EAAAvB,QAAAwB,EAAA,EAAAxB,CAAAY,GAAAnB,EAAA6B,SAIA,MAAAG,EAAAjC,EACAkC,QAAA,oCACAA,QAAA,6CACA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAAyB,EAAA3B,IAOAnB,EAAA0B,UAAAuB,kBAAA,SAAAb,GACA,OAA2B,GAO3BpC,EAAA0B,UAAAwB,qBAAA,SAAAjB,EAAAG,EAAA3B,GAEA,IAAAE,EAAAN,KAAA8C,cAKA,GAJAxC,IACAA,EAAAN,KAAA+C,yBAAA3C,IAGAE,EAAA0C,iBAAAV,QAAAV,EAAA,GACA,OAGA,MAAAE,EAAAxB,EAAA2C,mBACArB,EAAA5B,KAAAe,YACA,IAAAc,EAAAb,OAAAkC,EAAA,EAAAlC,CACAV,EAAA6C,YAAAvB,EAAA,IAAA5B,KAAAoD,SAEA,GAAArB,IACAF,EAAAb,OAAAkC,EAAA,EAAAlC,CAAAa,EAAAE,EAAA/B,KAAAoD,UAIA,MAAAC,GACAC,EAAA,QACAC,OAAA,QACAC,aAAA,GAIA,OAFAxC,OAAAyC,EAAA,EAAAzC,CAAAqC,EAAArD,KAAAa,SAEAb,KAAA2B,eAAAC,EAAAC,EAAAC,EACAC,EAAA3B,EAAAiD,IASA1D,EAAA0B,UAAAqC,aAAA,SAAA5C,GACAE,OAAAyC,EAAA,EAAAzC,CAAAhB,KAAAa,QAAAC,GACAd,KAAAkB,OAAAlB,KAAAmB,qBAEA,IAAAwC,EAAA,EC3NA,MAGAC,GACA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,IAEA,IAAAF,EAAA,GACA5C,SAAA,mCACA6C,OAAA,IAAAH,GACAnD,IAVA,iHAcA,IAAAwD,EAAA,GACAC,OAAAL,EACAM,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,SAAA,kBACAC,KAAA","file":"arcgis-tiled.js","sourcesContent":["/**\n * @module ol/source/TileArcGISRest\n */\nimport {inherits} from '../util.js';\nimport {createEmpty} from '../extent.js';\nimport {modulo} from '../math.js';\nimport {assign} from '../obj.js';\nimport {toSize, scale as scaleSize} from '../size.js';\nimport TileImage from '../source/TileImage.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.\n * Note that you must provide a `crossOrigin` value if you are using the WebGL renderer\n * or if you want to access pixel data with the Canvas renderer.  See\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}\n * for more detail.\n * @property {Object.<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}\n * for further reference.\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array.<string>} urls ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n */\n\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n *\n * @constructor\n * @extends {module:ol/source/TileImage}\n * @param {module:ol/source/TileArcGISRest~Options=} opt_options Tile ArcGIS Rest options.\n * @api\n */\nconst TileArcGISRest = function(opt_options) {\n\n  const options = opt_options || {};\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    projection: options.projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: options.tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = options.params || {};\n\n  /**\n   * @private\n   * @type {module:ol/extent~Extent}\n   */\n  this.tmpExtent_ = createEmpty();\n\n  this.setKey(this.getKeyForParams_());\n};\n\ninherits(TileArcGISRest, TileImage);\n\n\n/**\n * @private\n * @return {string} The key for the current params.\n */\nTileArcGISRest.prototype.getKeyForParams_ = function() {\n  let i = 0;\n  const res = [];\n  for (const key in this.params_) {\n    res[i++] = key + '-' + this.params_[key];\n  }\n  return res.join('/');\n};\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nTileArcGISRest.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/size~Size} tileSize Tile size.\n * @param {module:ol/extent~Extent} tileExtent Tile extent.\n * @param {number} pixelRatio Pixel ratio.\n * @param {module:ol/proj/Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string|undefined} Request URL.\n * @private\n */\nTileArcGISRest.prototype.getRequestUrl_ = function(tileCoord, tileSize, tileExtent,\n  pixelRatio, projection, params) {\n\n  const urls = this.urls;\n  if (!urls) {\n    return undefined;\n  }\n\n  // ArcGIS Server only wants the numeric portion of the projection ID.\n  const srid = projection.getCode().split(':').pop();\n\n  params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n  params['BBOX'] = tileExtent.join(',');\n  params['BBOXSR'] = srid;\n  params['IMAGESR'] = srid;\n  params['DPI'] = Math.round(\n    params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\n  );\n\n  let url;\n  if (urls.length == 1) {\n    url = urls[0];\n  } else {\n    const index = modulo(tileCoordHash(tileCoord), urls.length);\n    url = urls[index];\n  }\n\n  const modifiedUrl = url\n    .replace(/MapServer\\/?$/, 'MapServer/export')\n    .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n  return appendParams(modifiedUrl, params);\n};\n\n\n/**\n * @inheritDoc\n */\nTileArcGISRest.prototype.getTilePixelRatio = function(pixelRatio) {\n  return /** @type {number} */ (pixelRatio);\n};\n\n\n/**\n * @inheritDoc\n */\nTileArcGISRest.prototype.fixedTileUrlFunction = function(tileCoord, pixelRatio, projection) {\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projection);\n  }\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  const tileExtent = tileGrid.getTileCoordExtent(\n    tileCoord, this.tmpExtent_);\n  let tileSize = toSize(\n    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n  if (pixelRatio != 1) {\n    tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n  }\n\n  // Apply default params and override with user specified values.\n  const baseParams = {\n    'F': 'image',\n    'FORMAT': 'PNG32',\n    'TRANSPARENT': true\n  };\n  assign(baseParams, this.params_);\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    pixelRatio, projection, baseParams);\n};\n\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nTileArcGISRest.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.setKey(this.getKeyForParams_());\n};\nexport default TileArcGISRest;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {OSM, TileArcGISRest} from '../src/ol/source.js';\n\nconst url = 'https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/' +\n    'Specialty/ESRI_StateCityHighway_USA/MapServer';\n\nconst layers = [\n  new TileLayer({\n    source: new OSM()\n  }),\n  new TileLayer({\n    extent: [-13884991, 2870341, -7455066, 6338219],\n    source: new TileArcGISRest({\n      url: url\n    })\n  })\n];\nconst map = new Map({\n  layers: layers,\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4\n  })\n});\n"],"sourceRoot":""}