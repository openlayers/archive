{"version":3,"sources":["webpack:///./synthetic-points.js"],"names":["features","Array","e","i","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","geometry","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_3__","Math","random","size","styles","10","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","image","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","radius","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","color","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_10__","width","20","vectorSource","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_6__","wrapX","vector","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_5__","source","style","feature","get","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","layers","target","document","getElementById","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","closestPoint","getGeometry","getClosestPoint","setCoordinates","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_4__","render","on","evt","dragging","getEventCoordinate","originalEvent","vectorContext","setStyle","drawGeometry","pixel","getEventPixel","hit","hasFeatureAtPixel","getTarget","cursor"],"mappings":"+LASA,MACAA,EAAA,IAAAC,MADA,KAEAC,EAAA,KACA,QAAAC,EAAA,EAAeA,EAHf,MAG0BA,EAC1BH,EAAAG,GAAA,IAAAC,EAAA,GACAC,SAAA,IAAAC,EAAA,GACA,EAAAJ,EAAAK,KAAAC,SAAAN,EAAA,EAAAA,EAAAK,KAAAC,SAAAN,IACAC,IACAM,KAAAN,EAAA,UAIA,MAAAO,GACAC,GAAA,IAAAC,EAAA,GACAC,MAAA,IAAAC,EAAA,GACAC,OAAA,EACAC,KAAA,IAAAC,EAAA,GAAsBC,MAAA,YACtBC,OAAA,IAAAC,EAAA,GAA0BF,MAAA,UAAAG,MAAA,QAG1BC,GAAA,IAAAV,EAAA,GACAC,MAAA,IAAAC,EAAA,GACAC,OAAA,GACAC,KAAA,IAAAC,EAAA,GAAsBC,MAAA,YACtBC,OAAA,IAAAC,EAAA,GAA0BF,MAAA,UAAAG,MAAA,SAK1BE,EAAA,IAAAC,EAAA,GACAxB,WACAyB,OAAA,IAEAC,EAAA,IAAAC,EAAA,GACAC,OAAAL,EACAM,MAAA,SAAAC,GACA,OAAApB,EAAAoB,EAAAC,IAAA,YAIAC,EAAA,IAAAC,EAAA,GACAC,QAAAR,GACAS,OAAAC,SAAAC,eAAA,OACAC,KAAA,IAAAC,EAAA,GACAC,QAAA,KACAC,KAAA,MAIA,IAAAC,EAAA,KACAC,EAAA,KACA,MAAAC,EAAA,SAAAC,GACA,MAAAC,EAAAvB,EAAAwB,8BAAAF,GACA,UAAAC,EACAJ,EAAA,KACAC,EAAA,SACG,CACH,MACAK,EADAF,EAAAG,cACAC,gBAAAL,GACA,OAAAH,EACAA,EAAA,IAAApC,EAAA,EAAA0C,GAEAN,EAAAS,eAAAH,GAEA,OAAAL,EACAA,EAAA,IAAAS,EAAA,GAAAP,EAAAG,IAEAL,EAAAQ,gBAAAN,EAAAG,IAGAhB,EAAAqB,UAGArB,EAAAsB,GAAA,uBAAAC,GACA,GAAAA,EAAAC,SACA,OAEA,MAAAX,EAAAb,EAAAyB,mBAAAF,EAAAG,eACAd,EAAAC,KAGAb,EAAAsB,GAAA,iBAAAC,GACAX,EAAAW,EAAAV,cAGA,MAAA1B,EAAA,IAAAC,EAAA,GACAF,MAAA,sBACAG,MAAA,IAEAQ,EAAA,IAAAjB,EAAA,GACAO,SACAN,MAAA,IAAAC,EAAA,GACAC,OAAA,GACAI,aAIAa,EAAAsB,GAAA,uBAAAC,GACA,MAAAI,EAAAJ,EAAAI,cACAA,EAAAC,SAAA/B,GACA,OAAAa,GACAiB,EAAAE,aAAAnB,GAEA,OAAAC,GACAgB,EAAAE,aAAAlB,KAIAX,EAAAsB,GAAA,uBAAAC,GACA,GAAAA,EAAAC,SACA,OAEA,MAAAM,EAAA9B,EAAA+B,cAAAR,EAAAG,eACAM,EAAAhC,EAAAiC,kBAAAH,GAEA9B,EAAAkC,YAAArC,MAAAsC,OADAH,EACA,UAEA","file":"synthetic-points.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {LineString, Point} from '../src/ol/geom.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\nconst count = 20000;\nconst features = new Array(count);\nconst e = 18000000;\nfor (let i = 0; i < count; ++i) {\n  features[i] = new Feature({\n    'geometry': new Point(\n      [2 * e * Math.random() - e, 2 * e * Math.random() - e]),\n    'i': i,\n    'size': i % 2 ? 10 : 20\n  });\n}\n\nconst styles = {\n  '10': new Style({\n    image: new CircleStyle({\n      radius: 5,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1})\n    })\n  }),\n  '20': new Style({\n    image: new CircleStyle({\n      radius: 10,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1})\n    })\n  })\n};\n\nconst vectorSource = new VectorSource({\n  features: features,\n  wrapX: false\n});\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function(feature) {\n    return styles[feature.get('size')];\n  }\n});\n\nconst map = new Map({\n  layers: [vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nlet point = null;\nlet line = null;\nconst displaySnap = function(coordinate) {\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\n  if (closestFeature === null) {\n    point = null;\n    line = null;\n  } else {\n    const geometry = closestFeature.getGeometry();\n    const closestPoint = geometry.getClosestPoint(coordinate);\n    if (point === null) {\n      point = new Point(closestPoint);\n    } else {\n      point.setCoordinates(closestPoint);\n    }\n    if (line === null) {\n      line = new LineString([coordinate, closestPoint]);\n    } else {\n      line.setCoordinates([coordinate, closestPoint]);\n    }\n  }\n  map.render();\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displaySnap(coordinate);\n});\n\nmap.on('click', function(evt) {\n  displaySnap(evt.coordinate);\n});\n\nconst stroke = new Stroke({\n  color: 'rgba(255,255,0,0.9)',\n  width: 3\n});\nconst style = new Style({\n  stroke: stroke,\n  image: new CircleStyle({\n    radius: 10,\n    stroke: stroke\n  })\n});\n\nmap.on('postcompose', function(evt) {\n  const vectorContext = evt.vectorContext;\n  vectorContext.setStyle(style);\n  if (point !== null) {\n    vectorContext.drawGeometry(point);\n  }\n  if (line !== null) {\n    vectorContext.drawGeometry(line);\n  }\n});\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const pixel = map.getEventPixel(evt.originalEvent);\n  const hit = map.hasFeatureAtPixel(pixel);\n  if (hit) {\n    map.getTarget().style.cursor = 'pointer';\n  } else {\n    map.getTarget().style.cursor = '';\n  }\n});\n"],"sourceRoot":""}