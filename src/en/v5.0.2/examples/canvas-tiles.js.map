{"version":3,"sources":["webpack:///../src/ol/source/TileDebug.js","webpack:///./canvas-tiles.js"],"names":["LabeledTile","tileCoord","tileSize","text","ol_Tile","call","this","TileState","LOADED","tileSize_","text_","canvas_","Object","ol_util","prototype","getImage","context","dom","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","fillText","canvas","load","TileDebug","options","source_Tile","opaque","projection","tileGrid","wrapX","undefined","getTile","z","x","y","tileCoordKey","tilecoord","tileCache","containsKey","get","size","getTileSize","textTileCoord","getTileCoordForTileUrlFunction","toString","tile","set","source_TileDebug","osmSource","OSM","Map","layers","Tile","source","getTileGrid","target","controls","util","attributionOptions","collapsible","view","View","center","proj","zoom"],"mappings":"2MAmBA,MAAAA,EAAA,SAAAC,EAAAC,EAAAC,GAEAC,EAAA,EAAAC,KAAAC,KAAAL,EAAAM,EAAA,EAAAC,QAMAF,KAAAG,UAAAP,EAMAI,KAAAI,MAAAP,EAMAG,KAAAK,QAAA,MAGAC,OAAAC,EAAA,EAAAD,CAAAZ,EAAAI,EAAA,GAOAJ,EAAAc,UAAAC,SAAA,WACA,GAAAT,KAAAK,QACA,OAAAL,KAAAK,QACG,CACH,MAAAT,EAAAI,KAAAG,UACAO,EAAAJ,OAAAK,EAAA,EAAAL,CAAAV,EAAA,GAAAA,EAAA,IAYA,OAVAc,EAAAE,YAAA,QACAF,EAAAG,WAAA,MAAAjB,EAAA,MAAAA,EAAA,OAEAc,EAAAI,UAAA,QACAJ,EAAAK,UAAA,SACAL,EAAAM,aAAA,SACAN,EAAAO,KAAA,kBACAP,EAAAQ,SAAAlB,KAAAI,MAAAR,EAAA,KAAAA,EAAA,MAEAI,KAAAK,QAAAK,EAAAS,OACAT,EAAAS,SAQAzB,EAAAc,UAAAY,KAAA,aAwBA,MAAAC,EAAA,SAAAC,GAEAC,EAAA,EAAAxB,KAAAC,MACAwB,QAAA,EACAC,WAAAH,EAAAG,WACAC,SAAAJ,EAAAI,SACAC,WAAAC,IAAAN,EAAAK,OAAAL,EAAAK,SAKArB,OAAAC,EAAA,EAAAD,CAAAe,EAAAE,EAAA,GAMAF,EAAAb,UAAAqB,QAAA,SAAAC,EAAAC,EAAAC,GACA,MAAAC,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAAwB,EAAAC,EAAAC,GACA,GAAAhC,KAAAmC,UAAAC,YAAAH,GACA,OAA8DjC,KAAAmC,UAAAE,IAAAJ,GAC3D,CACH,MAAArC,EAAAU,OAAAgC,EAAA,EAAAhC,CAAAN,KAAA0B,SAAAa,YAAAT,IACAnC,GAAAmC,EAAAC,EAAAC,GACAQ,EAAAxC,KAAAyC,+BAAA9C,GACAE,EAAA2C,EACAxC,KAAAyC,+BAAAD,GAAAE,WADA,GAEAC,EAAA,IAAAjD,EAAAC,EAAAC,EAAAC,GAEA,OADAG,KAAAmC,UAAAS,IAAAX,EAAAU,GACAA,IAKA,IAAAE,EAAA,EC5HA,MAAAC,EAAA,IAAAC,EAAA,EACA,IAAAC,EAAA,GACAC,QACA,IAAAC,EAAA,GACAC,OAAAL,IAEA,IAAAI,EAAA,GACAC,OAAA,IAAAN,GACApB,WAAA,YACAC,SAAAoB,EAAAM,mBAIAC,OAAA,MACAC,SAAAhD,OAAAiD,EAAA,EAAAjD,EACAkD,oBACAC,aAAA,KAGAC,KAAA,IAAAC,EAAA,GACAC,OAAAtD,OAAAuD,EAAA,EAAAvD,GAAA,kBACAwD,KAAA","file":"canvas-tiles.js","sourcesContent":["/**\n * @module ol/source/TileDebug\n */\nimport {inherits} from '../util.js';\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {toSize} from '../size.js';\nimport TileSource from '../source/Tile.js';\nimport {getKeyZXY} from '../tilecoord.js';\n\n\n/**\n * @constructor\n * @extends {module:ol/Tile}\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/size~Size} tileSize Tile size.\n * @param {string} text Text.\n */\nconst LabeledTile = function(tileCoord, tileSize, text) {\n\n  Tile.call(this, tileCoord, TileState.LOADED);\n\n  /**\n   * @private\n   * @type {module:ol/size~Size}\n   */\n  this.tileSize_ = tileSize;\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.text_ = text;\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n  this.canvas_ = null;\n\n};\ninherits(LabeledTile, Tile);\n\n\n/**\n * Get the image element for this tile.\n * @return {HTMLCanvasElement} Image.\n */\nLabeledTile.prototype.getImage = function() {\n  if (this.canvas_) {\n    return this.canvas_;\n  } else {\n    const tileSize = this.tileSize_;\n    const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n\n    context.strokeStyle = 'black';\n    context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n\n    context.fillStyle = 'black';\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.font = '24px sans-serif';\n    context.fillText(this.text_, tileSize[0] / 2, tileSize[1] / 2);\n\n    this.canvas_ = context.canvas;\n    return context.canvas;\n  }\n};\n\n\n/**\n * @override\n */\nLabeledTile.prototype.load = function() {};\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n *\n * Uses Canvas context2d, so requires Canvas support.\n *\n * @constructor\n * @extends {module:ol/source/Tile}\n * @param {module:ol/source/TileDebug~Options=} options Debug tile options.\n * @api\n */\nconst TileDebug = function(options) {\n\n  TileSource.call(this, {\n    opaque: false,\n    projection: options.projection,\n    tileGrid: options.tileGrid,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true\n  });\n\n};\n\ninherits(TileDebug, TileSource);\n\n\n/**\n * @inheritDoc\n */\nTileDebug.prototype.getTile = function(z, x, y) {\n  const tileCoordKey = getKeyZXY(z, x, y);\n  if (this.tileCache.containsKey(tileCoordKey)) {\n    return /** @type {!module:ol/source/TileDebug~LabeledTile} */ (this.tileCache.get(tileCoordKey));\n  } else {\n    const tileSize = toSize(this.tileGrid.getTileSize(z));\n    const tileCoord = [z, x, y];\n    const textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\n    const text = !textTileCoord ? '' :\n      this.getTileCoordForTileUrlFunction(textTileCoord).toString();\n    const tile = new LabeledTile(tileCoord, tileSize, text);\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n};\n\n\nexport default TileDebug;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls} from '../src/ol/control.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport {OSM, TileDebug} from '../src/ol/source.js';\n\n\nconst osmSource = new OSM();\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: osmSource\n    }),\n    new TileLayer({\n      source: new TileDebug({\n        projection: 'EPSG:3857',\n        tileGrid: osmSource.getTileGrid()\n      })\n    })\n  ],\n  target: 'map',\n  controls: defaultControls({\n    attributionOptions: {\n      collapsible: false\n    }\n  }),\n  view: new View({\n    center: fromLonLat([-0.1275, 51.507222]),\n    zoom: 10\n  })\n});\n"],"sourceRoot":""}