{"version":3,"sources":["webpack:///../src/ol/interaction/Extent.js","webpack:///./extent-interaction.js"],"names":["_style_Style_js__WEBPACK_IMPORTED_MODULE_13__","__webpack_require__","ExtentEventType","ExtentInteractionEvent","extent","_events_Event_js__WEBPACK_IMPORTED_MODULE_5__","call","this","Object","_util_js__WEBPACK_IMPORTED_MODULE_0__","ExtentInteraction","opt_options","options","extent_","pointerHandler_","pixelTolerance_","undefined","pixelTolerance","snappedToVertex_","extentFeature_","vertexFeature_","_interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_10__","handleDownEvent","handleDragEvent","handleEvent","handleUpEvent","extentOverlay_","_layer_Vector_js__WEBPACK_IMPORTED_MODULE_11__","source","_source_Vector_js__WEBPACK_IMPORTED_MODULE_12__","useSpatialIndex","wrapX","style","boxStyle","feature","resolution","_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__","POLYGON","getDefaultExtentStyleFunction","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","POINT","getDefaultPointerStyleFunction","setExtent","mapBrowserEvent","_MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__","type","_MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","pixel","map","getExtent","vertex","snapToVertex_","getOpposingPoint","point","x_","y_","x","y","getPointHandler","getEdgeHandler","getCoordinateFromPixel","pixelCoordinate","coordinate","createOrUpdatePointerFeature_","_extent_js__WEBPACK_IMPORTED_MODULE_6__","fixedPoint","fixedP1","fixedP2","prototype","sortByDistance","a","b","_coordinate_js__WEBPACK_IMPORTED_MODULE_4__","segments","getSegments","sort","closestSegment","vertexPixel","getPixelFromCoordinate","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","createOrUpdateExtentFeature_","extentFeature","setGeometry","_geom_Polygon_js__WEBPACK_IMPORTED_MODULE_9__","_Feature_js__WEBPACK_IMPORTED_MODULE_1__","getSource","addFeature","vertexFeature","getGeometry","setCoordinates","_geom_Point_js__WEBPACK_IMPORTED_MODULE_8__","setMap","dispatchEvent","__webpack_exports__","vectorSource","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_7__","url","format","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_6__","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","_src_ol_interaction_Extent_js__WEBPACK_IMPORTED_MODULE_4__","condition","_src_ol_events_condition_js__WEBPACK_IMPORTED_MODULE_2__","addInteraction","setActive","window","addEventListener","event","keyCode"],"mappings":"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","file":"extent-interaction.js","sourcesContent":["/**\n * @module ol/interaction/Extent\n */\nimport {inherits} from '../util.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport {squaredDistanceToSegment, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport {boundingExtent, getArea} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport PointerInteraction, {handleEvent as handlePointerEvent} from '../interaction/Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/extent~Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n\n/**\n * @enum {string}\n */\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event module:ol/interaction/Extent~ExtentEventType#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n *\n * @constructor\n * @param {module:ol/extent~Extent} extent the new extent\n * @extends {module:ol/events/Event}\n */\nconst ExtentInteractionEvent = function(extent) {\n  Event.call(this, ExtentEventType.EXTENTCHANGED);\n\n  /**\n   * The current extent.\n   * @type {module:ol/extent~Extent}\n   * @api\n   */\n  this.extent = extent;\n\n};\ninherits(ExtentInteractionEvent, Event);\n\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @constructor\n * @extends {module:ol/interaction/Pointer}\n * @fires module:ol/interaction/Extent~Event\n * @param {module:ol/interaction/Extent~Options=} opt_options Options.\n * @api\n */\nconst ExtentInteraction = function(opt_options) {\n\n  const options = opt_options || {};\n\n  /**\n   * Extent of the drawn box\n   * @type {module:ol/extent~Extent}\n   * @private\n   */\n  this.extent_ = null;\n\n  /**\n   * Handler for pointer move events\n   * @type {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null}\n   * @private\n   */\n  this.pointerHandler_ = null;\n\n  /**\n   * Pixel threshold to snap to extent\n   * @type {number}\n   * @private\n   */\n  this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n    options.pixelTolerance : 10;\n\n  /**\n   * Is the pointer snapped to an extent vertex\n   * @type {boolean}\n   * @private\n   */\n  this.snappedToVertex_ = false;\n\n  /**\n   * Feature for displaying the visible extent\n   * @type {module:ol/Feature}\n   * @private\n   */\n  this.extentFeature_ = null;\n\n  /**\n   * Feature for displaying the visible pointer\n   * @type {module:ol/Feature}\n   * @private\n   */\n  this.vertexFeature_ = null;\n\n  if (!opt_options) {\n    opt_options = {};\n  }\n\n  PointerInteraction.call(this, {\n    handleDownEvent: handleDownEvent,\n    handleDragEvent: handleDragEvent,\n    handleEvent: handleEvent,\n    handleUpEvent: handleUpEvent\n  });\n\n  /**\n   * Layer for the extentFeature\n   * @type {module:ol/layer/Vector}\n   * @private\n   */\n  this.extentOverlay_ = new VectorLayer({\n    source: new VectorSource({\n      useSpatialIndex: false,\n      wrapX: !!opt_options.wrapX\n    }),\n    style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),\n    updateWhileAnimating: true,\n    updateWhileInteracting: true\n  });\n\n  /**\n   * Layer for the vertexFeature\n   * @type {module:ol/layer/Vector}\n   * @private\n   */\n  this.vertexOverlay_ = new VectorLayer({\n    source: new VectorSource({\n      useSpatialIndex: false,\n      wrapX: !!opt_options.wrapX\n    }),\n    style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),\n    updateWhileAnimating: true,\n    updateWhileInteracting: true\n  });\n\n  if (opt_options.extent) {\n    this.setExtent(opt_options.extent);\n  }\n};\n\ninherits(ExtentInteraction, PointerInteraction);\n\n/**\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Event.\n * @return {boolean} Propagate event?\n * @this {module:ol/interaction/Extent~Extent}\n */\nfunction handleEvent(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\n    return true;\n  }\n  //display pointer (if not dragging)\n  if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n    this.handlePointerMove_(mapBrowserEvent);\n  }\n  //call pointer to determine up/down/drag\n  handlePointerEvent.call(this, mapBrowserEvent);\n  //return false to stop propagation\n  return false;\n}\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Event handled?\n * @this {module:ol/interaction/Extent~Extent}\n */\nfunction handleDownEvent(mapBrowserEvent) {\n  const pixel = mapBrowserEvent.pixel;\n  const map = mapBrowserEvent.map;\n\n  const extent = this.getExtent();\n  let vertex = this.snapToVertex_(pixel, map);\n\n  //find the extent corner opposite the passed corner\n  const getOpposingPoint = function(point) {\n    let x_ = null;\n    let y_ = null;\n    if (point[0] == extent[0]) {\n      x_ = extent[2];\n    } else if (point[0] == extent[2]) {\n      x_ = extent[0];\n    }\n    if (point[1] == extent[1]) {\n      y_ = extent[3];\n    } else if (point[1] == extent[3]) {\n      y_ = extent[1];\n    }\n    if (x_ !== null && y_ !== null) {\n      return [x_, y_];\n    }\n    return null;\n  };\n  if (vertex && extent) {\n    const x = (vertex[0] == extent[0] || vertex[0] == extent[2]) ? vertex[0] : null;\n    const y = (vertex[1] == extent[1] || vertex[1] == extent[3]) ? vertex[1] : null;\n\n    //snap to point\n    if (x !== null && y !== null) {\n      this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n    //snap to edge\n    } else if (x !== null) {\n      this.pointerHandler_ = getEdgeHandler(\n        getOpposingPoint([x, extent[1]]),\n        getOpposingPoint([x, extent[3]])\n      );\n    } else if (y !== null) {\n      this.pointerHandler_ = getEdgeHandler(\n        getOpposingPoint([extent[0], y]),\n        getOpposingPoint([extent[2], y])\n      );\n    }\n  //no snap - new bbox\n  } else {\n    vertex = map.getCoordinateFromPixel(pixel);\n    this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n    this.pointerHandler_ = getPointHandler(vertex);\n  }\n  return true; //event handled; start downup sequence\n}\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Event handled?\n * @this {module:ol/interaction/Extent~Extent}\n */\nfunction handleDragEvent(mapBrowserEvent) {\n  if (this.pointerHandler_) {\n    const pixelCoordinate = mapBrowserEvent.coordinate;\n    this.setExtent(this.pointerHandler_(pixelCoordinate));\n    this.createOrUpdatePointerFeature_(pixelCoordinate);\n  }\n  return true;\n}\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Extent~Extent}\n */\nfunction handleUpEvent(mapBrowserEvent) {\n  this.pointerHandler_ = null;\n  //If bbox is zero area, set to null;\n  const extent = this.getExtent();\n  if (!extent || getArea(extent) === 0) {\n    this.setExtent(null);\n  }\n  return false; //Stop handling downup sequence\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {module:ol/style/Style~StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POLYGON];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {module:ol/style/Style~StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n/**\n * @param {module:ol/coordinate~Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function(point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {module:ol/coordinate~Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {module:ol/coordinate~Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * @param {module:ol/extent~Extent} extent extent\n * @returns {Array<Array<module:ol/coordinate~Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [\n    [[extent[0], extent[1]], [extent[0], extent[3]]],\n    [[extent[0], extent[3]], [extent[2], extent[3]]],\n    [[extent[2], extent[3]], [extent[2], extent[1]]],\n    [[extent[2], extent[1]], [extent[0], extent[1]]]\n  ];\n}\n\n/**\n * @param {module:ol~Pixel} pixel cursor location\n * @param {module:ol/PluggableMap} map map\n * @returns {module:ol/coordinate~Coordinate|null} snapped vertex on extent\n * @private\n */\nExtentInteraction.prototype.snapToVertex_ = function(pixel, map) {\n  const pixelCoordinate = map.getCoordinateFromPixel(pixel);\n  const sortByDistance = function(a, b) {\n    return squaredDistanceToSegment(pixelCoordinate, a) -\n        squaredDistanceToSegment(pixelCoordinate, b);\n  };\n  const extent = this.getExtent();\n  if (extent) {\n    //convert extents to line segments and find the segment closest to pixelCoordinate\n    const segments = getSegments(extent);\n    segments.sort(sortByDistance);\n    const closestSegment = segments[0];\n\n    let vertex = (closestOnSegment(pixelCoordinate,\n      closestSegment));\n    const vertexPixel = map.getPixelFromCoordinate(vertex);\n\n    //if the distance is within tolerance, snap to the segment\n    if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n      //test if we should further snap to a vertex\n      const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n      const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n      const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n      const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n      const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n      this.snappedToVertex_ = dist <= this.pixelTolerance_;\n      if (this.snappedToVertex_) {\n        vertex = squaredDist1 > squaredDist2 ?\n          closestSegment[1] : closestSegment[0];\n      }\n      return vertex;\n    }\n  }\n  return null;\n};\n\n/**\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent pointer move event\n * @private\n */\nExtentInteraction.prototype.handlePointerMove_ = function(mapBrowserEvent) {\n  const pixel = mapBrowserEvent.pixel;\n  const map = mapBrowserEvent.map;\n\n  let vertex = this.snapToVertex_(pixel, map);\n  if (!vertex) {\n    vertex = map.getCoordinateFromPixel(pixel);\n  }\n  this.createOrUpdatePointerFeature_(vertex);\n};\n\n/**\n * @param {module:ol/extent~Extent} extent extent\n * @returns {module:ol/Feature} extent as featrue\n * @private\n */\nExtentInteraction.prototype.createOrUpdateExtentFeature_ = function(extent) {\n  let extentFeature = this.extentFeature_;\n\n  if (!extentFeature) {\n    if (!extent) {\n      extentFeature = new Feature({});\n    } else {\n      extentFeature = new Feature(polygonFromExtent(extent));\n    }\n    this.extentFeature_ = extentFeature;\n    this.extentOverlay_.getSource().addFeature(extentFeature);\n  } else {\n    if (!extent) {\n      extentFeature.setGeometry(undefined);\n    } else {\n      extentFeature.setGeometry(polygonFromExtent(extent));\n    }\n  }\n  return extentFeature;\n};\n\n\n/**\n * @param {module:ol/coordinate~Coordinate} vertex location of feature\n * @returns {module:ol/Feature} vertex as feature\n * @private\n */\nExtentInteraction.prototype.createOrUpdatePointerFeature_ = function(vertex) {\n  let vertexFeature = this.vertexFeature_;\n  if (!vertexFeature) {\n    vertexFeature = new Feature(new Point(vertex));\n    this.vertexFeature_ = vertexFeature;\n    this.vertexOverlay_.getSource().addFeature(vertexFeature);\n  } else {\n    const geometry = /** @type {module:ol/geom/Point} */ (vertexFeature.getGeometry());\n    geometry.setCoordinates(vertex);\n  }\n  return vertexFeature;\n};\n\n\n/**\n * @inheritDoc\n */\nExtentInteraction.prototype.setMap = function(map) {\n  this.extentOverlay_.setMap(map);\n  this.vertexOverlay_.setMap(map);\n  PointerInteraction.prototype.setMap.call(this, map);\n};\n\n/**\n * Returns the current drawn extent in the view projection\n *\n * @return {module:ol/extent~Extent} Drawn extent in the view projection.\n * @api\n */\nExtentInteraction.prototype.getExtent = function() {\n  return this.extent_;\n};\n\n/**\n * Manually sets the drawn extent, using the view projection.\n *\n * @param {module:ol/extent~Extent} extent Extent\n * @api\n */\nExtentInteraction.prototype.setExtent = function(extent) {\n  //Null extent means no bbox\n  this.extent_ = extent ? extent : null;\n  this.createOrUpdateExtentFeature_(extent);\n  this.dispatchEvent(new ExtentInteractionEvent(this.extent_));\n};\n\n\nexport default ExtentInteraction;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {platformModifierKeyOnly} from '../src/ol/events/condition.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport ExtentInteraction from '../src/ol/interaction/Extent.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\n\nconst vectorSource = new VectorSource({\n  url: 'data/geojson/countries.geojson',\n  format: new GeoJSON()\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    new VectorLayer({\n      source: vectorSource\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst extent = new ExtentInteraction({\n  condition: platformModifierKeyOnly\n});\nmap.addInteraction(extent);\nextent.setActive(false);\n\n//Enable interaction by holding shift\nwindow.addEventListener('keydown', function(event) {\n  if (event.keyCode == 16) {\n    extent.setActive(true);\n  }\n});\nwindow.addEventListener('keyup', function(event) {\n  if (event.keyCode == 16) {\n    extent.setActive(false);\n  }\n});\n"],"sourceRoot":""}