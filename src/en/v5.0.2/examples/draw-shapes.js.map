{"version":3,"sources":["webpack:///./draw-shapes.js"],"names":["raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","source","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_7__","wrapX","vector","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","typeSelect","document","getElementById","draw","addInteraction","value","geometryFunction","Object","_src_ol_interaction_Draw_js__WEBPACK_IMPORTED_MODULE_3__","coordinates","geometry","_src_ol_geom_Polygon_js__WEBPACK_IMPORTED_MODULE_2__","last","dx","dy","radius","Math","sqrt","rotation","atan2","newCoordinates","i","angle","PI","fraction","offsetX","cos","offsetY","sin","push","slice","setCoordinates","type","onchange","removeInteraction"],"mappings":"mKAOA,MAAAA,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,IAGAD,EAAA,IAAAE,EAAA,GAAiCC,OAAA,IAEjCC,EAAA,IAAAC,EAAA,GACAL,WAGAM,EAAA,IAAAC,EAAA,GACAC,QAAAV,EAAAM,GACAK,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,SAAA,WACAC,KAAA,MAIAC,EAAAC,SAAAC,eAAA,QAEA,IAAAC,EACA,SAAAC,IACA,IAAAC,EAAAL,EAAAK,MACA,YAAAA,EAAA,CACA,IAAAC,EACA,WAAAD,GACAA,EAAA,SACAC,EAAAC,OAAAC,EAAA,EAAAD,CAAA,IACK,QAAAF,GACLA,EAAA,SACAC,EAAAC,OAAAC,EAAA,EAAAD,IACK,SAAAF,IACLA,EAAA,SACAC,EAAA,SAAAG,EAAAC,GACAA,IACAA,EAAA,IAAAC,EAAA,SAEA,MAAAb,EAAAW,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAf,EAAA,GAAAc,EAAA,GACAE,EAAAhB,EAAA,GAAAc,EAAA,GACAG,EAAAC,KAAAC,KAAAJ,IAAAC,KACAI,EAAAF,KAAAG,MAAAL,EAAAD,GACAO,KAEA,QAAAC,EAAA,EAAuBA,EADvB,KACsCA,EAAA,CACtC,MAAAC,EAAAJ,EAAA,EAAAG,EAAAL,KAAAO,GAFA,GAGAC,EAAAH,EAAA,UACAI,EAAAV,EAAAS,EAAAR,KAAAU,IAAAJ,GACAK,EAAAZ,EAAAS,EAAAR,KAAAY,IAAAN,GACAF,EAAAS,MAAA/B,EAAA,GAAA2B,EAAA3B,EAAA,GAAA6B,IAIA,OAFAP,EAAAS,KAAAT,EAAA,GAAAU,SACApB,EAAAqB,gBAAAX,IACAV,IAGAP,EAAA,IAAAK,EAAA,GACAtB,SACA8C,KAAA3B,EACAC,qBAEAd,EAAAY,eAAAD,IAQAH,EAAAiC,SAAA,WACAzC,EAAA0C,kBAAA/B,GACAC,KAGAA","file":"draw-shapes.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Polygon from '../src/ol/geom/Polygon.js';\nimport Draw, {createRegularPolygon, createBox} from '../src/ol/interaction/Draw.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst source = new VectorSource({wrapX: false});\n\nconst vector = new VectorLayer({\n  source: source\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 4\n  })\n});\n\nconst typeSelect = document.getElementById('type');\n\nlet draw; // global so we can remove it later\nfunction addInteraction() {\n  let value = typeSelect.value;\n  if (value !== 'None') {\n    let geometryFunction;\n    if (value === 'Square') {\n      value = 'Circle';\n      geometryFunction = createRegularPolygon(4);\n    } else if (value === 'Box') {\n      value = 'Circle';\n      geometryFunction = createBox();\n    } else if (value === 'Star') {\n      value = 'Circle';\n      geometryFunction = function(coordinates, geometry) {\n        if (!geometry) {\n          geometry = new Polygon(null);\n        }\n        const center = coordinates[0];\n        const last = coordinates[1];\n        const dx = center[0] - last[0];\n        const dy = center[1] - last[1];\n        const radius = Math.sqrt(dx * dx + dy * dy);\n        const rotation = Math.atan2(dy, dx);\n        const newCoordinates = [];\n        const numPoints = 12;\n        for (let i = 0; i < numPoints; ++i) {\n          const angle = rotation + i * 2 * Math.PI / numPoints;\n          const fraction = i % 2 === 0 ? 1 : 0.5;\n          const offsetX = radius * fraction * Math.cos(angle);\n          const offsetY = radius * fraction * Math.sin(angle);\n          newCoordinates.push([center[0] + offsetX, center[1] + offsetY]);\n        }\n        newCoordinates.push(newCoordinates[0].slice());\n        geometry.setCoordinates([newCoordinates]);\n        return geometry;\n      };\n    }\n    draw = new Draw({\n      source: source,\n      type: value,\n      geometryFunction: geometryFunction\n    });\n    map.addInteraction(draw);\n  }\n}\n\n\n/**\n * Handle change event.\n */\ntypeSelect.onchange = function() {\n  map.removeInteraction(draw);\n  addInteraction();\n};\n\naddInteraction();\n"],"sourceRoot":""}