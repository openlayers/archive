{"version":3,"sources":["webpack:///../src/ol/layer/Heatmap.js","webpack:///./heatmap-earthquakes.js"],"names":["Property","DEFAULT_GRADIENT","Heatmap","opt_options","options","baseOptions","Object","obj","gradient","radius","blur","shadow","weight","Vector","call","this","gradient_","shadow_","undefined","circleImage_","styleCache_","events","ol_Object","handleGradientChanged_","setGradient","setBlur","setRadius","handleStyleChanged_","weightFunction","feature","get","setStyle","resolution","opacity","math","index","style","Style","image","Icon","src","bind","setRenderOrder","EventType","RENDER","handleRender_","util","prototype","createCircle_","getRadius","getBlur","halfSize","size","context","dom","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","beginPath","center","arc","Math","PI","fill","canvas","toDataURL","getGradient","colors","createLinearGradient","step","length","i","ii","addColorStop","fillStyle","fillRect","getImageData","data","createGradient","Array","changed","event","width","height","view8","alpha","putImageData","set","layer_Heatmap","heatmap_earthquakes_blur","document","getElementById","heatmap_earthquakes_radius","vector","source","source_Vector","url","format","KML","extractStyles","parseInt","value","getSource","on","name","magnitude","parseFloat","substr","raster","Tile","Stamen","layer","Map","layers","target","view","View","zoom","addEventListener"],"mappings":"6MA2CA,MAAAA,EACA,OADAA,EAEA,WAFAA,EAGA,SAQAC,GAAA,oCAgBAC,EAAA,SAAAC,GACA,MAAAC,EAAAD,MAEAE,EAAAC,OAAAC,EAAA,EAAAD,IAA+BF,UAE/BC,EAAAG,gBACAH,EAAAI,cACAJ,EAAAK,YACAL,EAAAM,cACAN,EAAAO,OACAC,EAAA,EAAAC,KAAAC,KAAmE,GAMnEA,KAAAC,UAAA,KAMAD,KAAAE,aAAAC,IAAAd,EAAAO,OAAAP,EAAAO,OAAA,IAMAI,KAAAI,kBAAAD,EAMAH,KAAAK,YAAA,KAEAd,OAAAe,EAAA,EAAAf,CAAAS,KACAT,OAAAgB,EAAA,EAAAhB,CAAAN,GACAe,KAAAQ,uBAAAR,MAEAA,KAAAS,YAAApB,EAAAI,SAAAJ,EAAAI,SAAAP,GAEAc,KAAAU,aAAAP,IAAAd,EAAAM,KAAAN,EAAAM,KAAA,IAEAK,KAAAW,eAAAR,IAAAd,EAAAK,OAAAL,EAAAK,OAAA,GAEAH,OAAAe,EAAA,EAAAf,CAAAS,KACAT,OAAAgB,EAAA,EAAAhB,CAAAN,GACAe,KAAAY,oBAAAZ,MACAT,OAAAe,EAAA,EAAAf,CAAAS,KACAT,OAAAgB,EAAA,EAAAhB,CAAAN,GACAe,KAAAY,oBAAAZ,MAEAA,KAAAY,sBAEA,MAAAf,EAAAR,EAAAQ,OAAAR,EAAAQ,OAAA,SACA,IAAAgB,EAEAA,EADA,iBAAAhB,EACA,SAAAiB,GACA,OAAAA,EAAAC,IAAAlB,IAGAA,EAGAG,KAAAgB,SAAA,SAAAF,EAAAG,GACA,MAAApB,EAAAgB,EAAAC,GACAI,OAAAf,IAAAN,EAAAN,OAAA4B,EAAA,EAAA5B,CAAAM,EAAA,OAEAuB,EAAA,IAAAF,EAAA,EACA,IAAAG,EAAArB,KAAAK,YAAAe,GAYA,OAXAC,IACAA,GACA,IAAAC,EAAA,GACAC,MAAA,IAAAC,EAAA,GACAN,UACAO,IAAAzB,KAAAI,kBAIAJ,KAAAK,YAAAe,GAAAC,GAEAA,GACGK,KAAA1B,OAIHA,KAAA2B,eAAA,MAEApC,OAAAe,EAAA,EAAAf,CAAAS,KAAA4B,EAAA,EAAAC,OAAA7B,KAAA8B,cAAA9B,OAGAT,OAAAwC,EAAA,EAAAxC,CAAAJ,EAAAW,EAAA,GA8BAX,EAAA6C,UAAAC,cAAA,WACA,MAAAvC,EAAAM,KAAAkC,YACAvC,EAAAK,KAAAmC,UACAC,EAAA1C,EAAAC,EAAA,EACA0C,EAAA,EAAAD,EACAE,EAAA/C,OAAAgD,EAAA,EAAAhD,CAAA8C,KACAC,EAAAE,cAAAF,EAAAG,cAAAzC,KAAAE,QACAoC,EAAAI,WAAA/C,EACA2C,EAAAK,YAAA,OACAL,EAAAM,YACA,MAAAC,EAAAT,EAAApC,KAAAE,QAGA,OAFAoC,EAAAQ,IAAAD,IAAAnD,EAAA,IAAAqD,KAAAC,IAAA,GACAV,EAAAW,OACAX,EAAAY,OAAAC,aAUAhE,EAAA6C,UAAAG,QAAA,WACA,OAA2BnC,KAAAe,IAAA9B,IAU3BE,EAAA6C,UAAAoB,YAAA,WACA,OAAmCpD,KAAAe,IAAA9B,IAUnCE,EAAA6C,UAAAE,UAAA,WACA,OAA2BlC,KAAAe,IAAA9B,IAO3BE,EAAA6C,UAAAxB,uBAAA,WACAR,KAAAC,UA5EA,SAAAoD,GACA,MAEAf,EAAA/C,OAAAgD,EAAA,EAAAhD,CAFA,EACA,KAGAE,EAAA6C,EAAAgB,qBAAA,IAJA,EACA,KAIAC,EAAA,GAAAF,EAAAG,OAAA,GACA,QAAAC,EAAA,EAAAC,EAAAL,EAAAG,OAAqCC,EAAAC,IAAQD,EAC7ChE,EAAAkE,aAAAF,EAAAF,EAAAF,EAAAI,IAMA,OAHAnB,EAAAsB,UAAAnE,EACA6C,EAAAuB,SAAA,IAXA,EACA,KAYAvB,EAAAwB,aAAA,IAbA,EACA,KAYAC,KA8DAC,CAAAhE,KAAAoD,gBAOAjE,EAAA6C,UAAApB,oBAAA,WACAZ,KAAAI,aAAAJ,KAAAiC,gBACAjC,KAAAK,YAAA,IAAA4D,MAAA,KACAjE,KAAAkE,WAQA/E,EAAA6C,UAAAF,cAAA,SAAAqC,GACA,MAAA7B,EAAA6B,EAAA7B,QACAY,EAAAZ,EAAAY,OACA3B,EAAAe,EAAAwB,aAAA,IAAAZ,EAAAkB,MAAAlB,EAAAmB,QACAC,EAAA/C,EAAAwC,KACA,QAAAN,EAAA,EAAAC,EAAAY,EAAAd,OAAoCC,EAAAC,EAAQD,GAAA,GAC5C,MAAAc,EAAA,EAAAD,EAAAb,EAAA,GACAc,IACAD,EAAAb,GAAAzD,KAAAC,UAAAsE,GACAD,EAAAb,EAAA,GAAAzD,KAAAC,UAAAsE,EAAA,GACAD,EAAAb,EAAA,GAAAzD,KAAAC,UAAAsE,EAAA,IAGAjC,EAAAkC,aAAAjD,EAAA,MAUApC,EAAA6C,UAAAtB,QAAA,SAAAf,GACAK,KAAAyE,IAAAxF,EAAAU,IAUAR,EAAA6C,UAAAvB,YAAA,SAAA4C,GACArD,KAAAyE,IAAAxF,EAAAoE,IAUAlE,EAAA6C,UAAArB,UAAA,SAAAjB,GACAM,KAAAyE,IAAAxF,EAAAS,IAGA,IAAAgF,EAAA,yBClTA,MAAAC,EAAAC,SAAAC,eAAA,QACAC,EAAAF,SAAAC,eAAA,UAEAE,EAAA,IAAAL,GACAM,OAAA,IAAAC,EAAA,GACAC,IAAA,qCACAC,OAAA,IAAAC,EAAA,GACAC,eAAA,MAGA1F,KAAA2F,SAAAX,EAAAY,MAAA,IACA7F,OAAA4F,SAAAR,EAAAS,MAAA,MAGAR,EAAAS,YAAAC,GAAA,sBAAAtB,GAIA,MAAAuB,EAAAvB,EAAArD,QAAAC,IAAA,QACA4E,EAAAC,WAAAF,EAAAG,OAAA,IACA1B,EAAArD,QAAA2D,IAAA,SAAAkB,EAAA,KAGA,MAAAG,EAAA,IAAAC,EAAA,GACAf,OAAA,IAAAgB,EAAA,GACAC,MAAA,YAIA,IAAAC,EAAA,GACAC,QAAAL,EAAAf,GACAqB,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAzD,QAAA,KACA0D,KAAA,MAKA5B,EAAA6B,iBAAA,mBACAzB,EAAArE,QAAA4E,SAAAX,EAAAY,MAAA,OAGAT,EAAA0B,iBAAA,mBACAzB,EAAApE,UAAA2E,SAAAR,EAAAS,MAAA","file":"heatmap-earthquakes.js","sourcesContent":["/**\n * @module ol/layer/Heatmap\n */\nimport {listen} from '../events.js';\nimport {inherits} from '../util.js';\nimport {getChangeEventType} from '../Object.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport VectorLayer from '../layer/Vector.js';\nimport {clamp} from '../math.js';\nimport {assign} from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport Icon from '../style/Icon.js';\nimport Style from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {Array.<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {number} [shadow=250] Shadow size in pixels.\n * @property {string|function(module:ol/Feature):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {module:ol/source/Vector} [source] Source.\n */\n\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius'\n};\n\n\n/**\n * @const\n * @type {Array.<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @constructor\n * @extends {module:ol/layer/Vector}\n * @fires module:ol/render/Event~RenderEvent\n * @param {module:ol/layer/Heatmap~Options=} opt_options Options.\n * @api\n */\nconst Heatmap = function(opt_options) {\n  const options = opt_options ? opt_options : {};\n\n  const baseOptions = assign({}, options);\n\n  delete baseOptions.gradient;\n  delete baseOptions.radius;\n  delete baseOptions.blur;\n  delete baseOptions.shadow;\n  delete baseOptions.weight;\n  VectorLayer.call(this, /** @type {module:ol/layer/Vector~Options} */ (baseOptions));\n\n  /**\n   * @private\n   * @type {Uint8ClampedArray}\n   */\n  this.gradient_ = null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.shadow_ = options.shadow !== undefined ? options.shadow : 250;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.circleImage_ = undefined;\n\n  /**\n   * @private\n   * @type {Array.<Array.<module:ol/style/Style>>}\n   */\n  this.styleCache_ = null;\n\n  listen(this,\n    getChangeEventType(Property.GRADIENT),\n    this.handleGradientChanged_, this);\n\n  this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n\n  this.setBlur(options.blur !== undefined ? options.blur : 15);\n\n  this.setRadius(options.radius !== undefined ? options.radius : 8);\n\n  listen(this,\n    getChangeEventType(Property.BLUR),\n    this.handleStyleChanged_, this);\n  listen(this,\n    getChangeEventType(Property.RADIUS),\n    this.handleStyleChanged_, this);\n\n  this.handleStyleChanged_();\n\n  const weight = options.weight ? options.weight : 'weight';\n  let weightFunction;\n  if (typeof weight === 'string') {\n    weightFunction = function(feature) {\n      return feature.get(weight);\n    };\n  } else {\n    weightFunction = weight;\n  }\n\n  this.setStyle(function(feature, resolution) {\n    const weight = weightFunction(feature);\n    const opacity = weight !== undefined ? clamp(weight, 0, 1) : 1;\n    // cast to 8 bits\n    const index = (255 * opacity) | 0;\n    let style = this.styleCache_[index];\n    if (!style) {\n      style = [\n        new Style({\n          image: new Icon({\n            opacity: opacity,\n            src: this.circleImage_\n          })\n        })\n      ];\n      this.styleCache_[index] = style;\n    }\n    return style;\n  }.bind(this));\n\n  // For performance reasons, don't sort the features before rendering.\n  // The render order is not relevant for a heatmap representation.\n  this.setRenderOrder(null);\n\n  listen(this, RenderEventType.RENDER, this.handleRender_, this);\n};\n\ninherits(Heatmap, VectorLayer);\n\n\n/**\n * @param {Array.<string>} colors A list of colored.\n * @return {Uint8ClampedArray} An array.\n * @private\n */\nconst createGradient = function(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n\n  return context.getImageData(0, 0, width, height).data;\n};\n\n\n/**\n * @return {string} Data URL for a circle.\n * @private\n */\nHeatmap.prototype.createCircle_ = function() {\n  const radius = this.getRadius();\n  const blur = this.getBlur();\n  const halfSize = radius + blur + 1;\n  const size = 2 * halfSize;\n  const context = createCanvasContext2D(size, size);\n  context.shadowOffsetX = context.shadowOffsetY = this.shadow_;\n  context.shadowBlur = blur;\n  context.shadowColor = '#000';\n  context.beginPath();\n  const center = halfSize - this.shadow_;\n  context.arc(center, center, radius, 0, Math.PI * 2, true);\n  context.fill();\n  return context.canvas.toDataURL();\n};\n\n\n/**\n * Return the blur size in pixels.\n * @return {number} Blur size in pixels.\n * @api\n * @observable\n */\nHeatmap.prototype.getBlur = function() {\n  return /** @type {number} */ (this.get(Property.BLUR));\n};\n\n\n/**\n * Return the gradient colors as array of strings.\n * @return {Array.<string>} Colors.\n * @api\n * @observable\n */\nHeatmap.prototype.getGradient = function() {\n  return /** @type {Array.<string>} */ (this.get(Property.GRADIENT));\n};\n\n\n/**\n * Return the size of the radius in pixels.\n * @return {number} Radius size in pixel.\n * @api\n * @observable\n */\nHeatmap.prototype.getRadius = function() {\n  return /** @type {number} */ (this.get(Property.RADIUS));\n};\n\n\n/**\n * @private\n */\nHeatmap.prototype.handleGradientChanged_ = function() {\n  this.gradient_ = createGradient(this.getGradient());\n};\n\n\n/**\n * @private\n */\nHeatmap.prototype.handleStyleChanged_ = function() {\n  this.circleImage_ = this.createCircle_();\n  this.styleCache_ = new Array(256);\n  this.changed();\n};\n\n\n/**\n * @param {module:ol/render/Event} event Post compose event\n * @private\n */\nHeatmap.prototype.handleRender_ = function(event) {\n  const context = event.context;\n  const canvas = context.canvas;\n  const image = context.getImageData(0, 0, canvas.width, canvas.height);\n  const view8 = image.data;\n  for (let i = 0, ii = view8.length; i < ii; i += 4) {\n    const alpha = view8[i + 3] * 4;\n    if (alpha) {\n      view8[i] = this.gradient_[alpha];\n      view8[i + 1] = this.gradient_[alpha + 1];\n      view8[i + 2] = this.gradient_[alpha + 2];\n    }\n  }\n  context.putImageData(image, 0, 0);\n};\n\n\n/**\n * Set the blur size in pixels.\n * @param {number} blur Blur size in pixels.\n * @api\n * @observable\n */\nHeatmap.prototype.setBlur = function(blur) {\n  this.set(Property.BLUR, blur);\n};\n\n\n/**\n * Set the gradient colors as array of strings.\n * @param {Array.<string>} colors Gradient.\n * @api\n * @observable\n */\nHeatmap.prototype.setGradient = function(colors) {\n  this.set(Property.GRADIENT, colors);\n};\n\n\n/**\n * Set the size of the radius in pixels.\n * @param {number} radius Radius size in pixel.\n * @api\n * @observable\n */\nHeatmap.prototype.setRadius = function(radius) {\n  this.set(Property.RADIUS, radius);\n};\n\nexport default Heatmap;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport KML from '../src/ol/format/KML.js';\nimport {Heatmap as HeatmapLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\n\nconst blur = document.getElementById('blur');\nconst radius = document.getElementById('radius');\n\nconst vector = new HeatmapLayer({\n  source: new VectorSource({\n    url: 'data/kml/2012_Earthquakes_Mag5.kml',\n    format: new KML({\n      extractStyles: false\n    })\n  }),\n  blur: parseInt(blur.value, 10),\n  radius: parseInt(radius.value, 10)\n});\n\nvector.getSource().on('addfeature', function(event) {\n  // 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a\n  // standards-violating <magnitude> tag in each Placemark.  We extract it from\n  // the Placemark's name instead.\n  const name = event.feature.get('name');\n  const magnitude = parseFloat(name.substr(2));\n  event.feature.set('weight', magnitude - 5);\n});\n\nconst raster = new TileLayer({\n  source: new Stamen({\n    layer: 'toner'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\n\nblur.addEventListener('input', function() {\n  vector.setBlur(parseInt(blur.value, 10));\n});\n\nradius.addEventListener('input', function() {\n  vector.setRadius(parseInt(radius.value, 10));\n});\n"],"sourceRoot":""}