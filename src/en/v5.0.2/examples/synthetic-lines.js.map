{"version":3,"sources":["webpack:///./synthetic-lines.js"],"names":["features","Array","endPoint","delta","deltaX","deltaY","i","startPoint","signX","signY","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","geometry","_src_ol_geom_LineString_js__WEBPACK_IMPORTED_MODULE_3__","vector","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__","source","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_5__","wrapX","style","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","color","width","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","center","zoom","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","layers","target"],"mappings":"qKASA,MACAA,EAAA,IAAAC,MADA,KAGA,IACAC,EAEAC,EAAAC,EAAAC,EAKAC,EARAC,GAAA,KAIAC,EAAA,EACAC,GAAA,EAIA,IAAAH,EAAA,EAAWA,EAZX,MAYsBA,EACtBH,EAAA,MAAAG,EAAA,GACAA,EAAA,KACAG,IAAA,EAEAD,IAAA,EAEAJ,EAAAD,EAAAK,EACAH,EAAAF,EAAAM,EACAP,GAAAK,EAAA,GAAAH,EAAAG,EAAA,GAAAF,GACAL,EAAAM,GAAA,IAAAI,EAAA,GACAC,SAAA,IAAAC,EAAA,GAAAL,EAAAL,MAEAK,EAAAL,EAGA,MAAAW,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAhB,WACAiB,OAAA,IAEAC,MAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAC,MAAA,UACAC,MAAA,QAKAC,EAAA,IAAAC,EAAA,GACAC,QAAA,KACAC,KAAA,IAGA,IAAAC,EAAA,GACAC,QAAAhB,GACAiB,OAAA,MACAN","file":"synthetic-lines.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Stroke, Style} from '../src/ol/style.js';\n\n\nconst count = 10000;\nconst features = new Array(count);\n\nlet startPoint = [0, 0];\nlet endPoint;\n\nlet delta, deltaX, deltaY;\nlet signX = 1;\nlet signY = -1;\n\n// Create a square spiral.\nlet i;\nfor (i = 0; i < count; ++i) {\n  delta = (i + 1) * 2500;\n  if (i % 2 === 0) {\n    signY *= -1;\n  } else {\n    signX *= -1;\n  }\n  deltaX = delta * signX;\n  deltaY = delta * signY;\n  endPoint = [startPoint[0] + deltaX, startPoint[1] + deltaY];\n  features[i] = new Feature({\n    'geometry': new LineString([startPoint, endPoint])\n  });\n  startPoint = endPoint;\n}\n\nconst vector = new VectorLayer({\n  source: new VectorSource({\n    features: features,\n    wrapX: false\n  }),\n  style: new Style({\n    stroke: new Stroke({\n      color: '#666666',\n      width: 1\n    })\n  })\n});\n\nconst view = new View({\n  center: [0, 0],\n  zoom: 0\n});\n\nconst map = new Map({\n  layers: [vector],\n  target: 'map',\n  view: view\n});\n"],"sourceRoot":""}