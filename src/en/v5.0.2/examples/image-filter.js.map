{"version":3,"sources":["webpack:///./image-filter.js"],"names":["imagery","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_2__","source","_src_ol_source_BingMaps_js__WEBPACK_IMPORTED_MODULE_4__","key","imagerySet","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","Object","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_3__","zoom","kernels","none","sharpen","sharpenless","blur","shadow","emboss","edge","normalize","kernel","len","length","normal","Array","i","sum","normalized","select","document","getElementById","selectedKernel","value","onchange","render","on","event","context","canvas","width","height","size","Math","sqrt","half","floor","inputData","getImageData","data","output","createImageData","outputData","pixelY","pixelsAbove","pixelX","r","g","b","a","kernelY","kernelX","weight","neighborY","min","max","neighborX","inputIndex","outputIndex","putImageData","convolve"],"mappings":"2IAMA,MAEAA,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GAAwBC,IAHxB,mEAGwBC,WAAA,aAGxBC,EAAA,IAAAC,EAAA,GACAC,QAAAR,GACAS,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,OAAAC,OAAAC,EAAA,EAAAD,GAAA,SACAE,KAAA,MAIAC,GACAC,MACA,MACA,MACA,OAEAC,SACA,QACA,OACA,QAEAC,aACA,QACA,QACA,QAEAC,MACA,MACA,MACA,OAEAC,QACA,MACA,OACA,SAEAC,SACA,OACA,MACA,OAEAC,MACA,MACA,OACA,QAIA,SAAAC,EAAAC,GACA,MAAAC,EAAAD,EAAAE,OACAC,EAAA,IAAAC,MAAAH,GACA,IAAAI,EAAAC,EAAA,EACA,IAAAD,EAAA,EAAaA,EAAAJ,IAASI,EACtBC,GAAAN,EAAAK,GAQA,IANAC,GAAA,GACAH,EAAAI,YAAA,EACAD,EAAA,GAEAH,EAAAI,YAAA,EAEAF,EAAA,EAAaA,EAAAJ,IAASI,EACtBF,EAAAE,GAAAL,EAAAK,GAAAC,EAEA,OAAAH,EAGA,MAAAK,EAAAC,SAAAC,eAAA,UACA,IAAAC,EAAAZ,EAAAR,EAAAiB,EAAAI,QAMAJ,EAAAK,SAAA,WACAF,EAAAZ,EAAAR,EAAAiB,EAAAI,QACA/B,EAAAiC,UAOAvC,EAAAwC,GAAA,uBAAAC,IAWA,SAAAC,EAAAjB,GACA,MAAAkB,EAAAD,EAAAC,OACAC,EAAAD,EAAAC,MACAC,EAAAF,EAAAE,OAEAC,EAAAC,KAAAC,KAAAvB,EAAAE,QACAsB,EAAAF,KAAAG,MAAAJ,EAAA,GAEAK,EAAAT,EAAAU,aAAA,IAAAR,EAAAC,GAAAQ,KAEAC,EAAAZ,EAAAa,gBAAAX,EAAAC,GACAW,EAAAF,EAAAD,KAEA,QAAAI,EAAA,EAAsBA,EAAAZ,IAAiBY,EAAA,CACvC,MAAAC,EAAAD,EAAAb,EACA,QAAAe,EAAA,EAAwBA,EAAAf,IAAgBe,EAAA,CACxC,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EACA,QAAAC,EAAA,EAA2BA,EAAAlB,IAAgBkB,EAC3C,QAAAC,EAAA,EAA6BA,EAAAnB,IAAgBmB,EAAA,CAC7C,MAAAC,EAAAzC,EAAAuC,EAAAlB,EAAAmB,GACAE,EAAApB,KAAAqB,IACAvB,EAAA,EAAAE,KAAAsB,IAAA,EAAAZ,EAAAO,EAAAf,IACAqB,EAAAvB,KAAAqB,IACAxB,EAAA,EAAAG,KAAAsB,IAAA,EAAAV,EAAAM,EAAAhB,IACAsB,EAAA,GAAAJ,EAAAvB,EAAA0B,GACAV,GAAAT,EAAAoB,GAAAL,EACAL,GAAAV,EAAAoB,EAAA,GAAAL,EACAJ,GAAAX,EAAAoB,EAAA,GAAAL,EACAH,GAAAZ,EAAAoB,EAAA,GAAAL,EAGA,MAAAM,EAAA,GAAAd,EAAAC,GACAH,EAAAgB,GAAAZ,EACAJ,EAAAgB,EAAA,GAAAX,EACAL,EAAAgB,EAAA,GAAAV,EACAN,EAAAgB,EAAA,GAAA/C,EAAAO,WAAA+B,EAAA,KAGArB,EAAA+B,aAAAnB,EAAA,KAhDAoB,CAAAjC,EAAAC,QAAAN","file":"image-filter.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\n\nconst key = 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5';\n\nconst imagery = new TileLayer({\n  source: new BingMaps({key: key, imagerySet: 'Aerial'})\n});\n\nconst map = new Map({\n  layers: [imagery],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-120, 50]),\n    zoom: 6\n  })\n});\n\nconst kernels = {\n  none: [\n    0, 0, 0,\n    0, 1, 0,\n    0, 0, 0\n  ],\n  sharpen: [\n    0, -1, 0,\n    -1, 5, -1,\n    0, -1, 0\n  ],\n  sharpenless: [\n    0, -1, 0,\n    -1, 10, -1,\n    0, -1, 0\n  ],\n  blur: [\n    1, 1, 1,\n    1, 1, 1,\n    1, 1, 1\n  ],\n  shadow: [\n    1, 2, 1,\n    0, 1, 0,\n    -1, -2, -1\n  ],\n  emboss: [\n    -2, 1, 0,\n    -1, 1, 1,\n    0, 1, 2\n  ],\n  edge: [\n    0, 1, 0,\n    1, -4, 1,\n    0, 1, 0\n  ]\n};\n\nfunction normalize(kernel) {\n  const len = kernel.length;\n  const normal = new Array(len);\n  let i, sum = 0;\n  for (i = 0; i < len; ++i) {\n    sum += kernel[i];\n  }\n  if (sum <= 0) {\n    normal.normalized = false;\n    sum = 1;\n  } else {\n    normal.normalized = true;\n  }\n  for (i = 0; i < len; ++i) {\n    normal[i] = kernel[i] / sum;\n  }\n  return normal;\n}\n\nconst select = document.getElementById('kernel');\nlet selectedKernel = normalize(kernels[select.value]);\n\n\n/**\n * Update the kernel and re-render on change.\n */\nselect.onchange = function() {\n  selectedKernel = normalize(kernels[select.value]);\n  map.render();\n};\n\n\n/**\n * Apply a filter on \"postcompose\" events.\n */\nimagery.on('postcompose', function(event) {\n  convolve(event.context, selectedKernel);\n});\n\n\n/**\n * Apply a convolution kernel to canvas.  This works for any size kernel, but\n * performance starts degrading above 3 x 3.\n * @param {CanvasRenderingContext2D} context Canvas 2d context.\n * @param {Array.<number>} kernel Kernel.\n */\nfunction convolve(context, kernel) {\n  const canvas = context.canvas;\n  const width = canvas.width;\n  const height = canvas.height;\n\n  const size = Math.sqrt(kernel.length);\n  const half = Math.floor(size / 2);\n\n  const inputData = context.getImageData(0, 0, width, height).data;\n\n  const output = context.createImageData(width, height);\n  const outputData = output.data;\n\n  for (let pixelY = 0; pixelY < height; ++pixelY) {\n    const pixelsAbove = pixelY * width;\n    for (let pixelX = 0; pixelX < width; ++pixelX) {\n      let r = 0, g = 0, b = 0, a = 0;\n      for (let kernelY = 0; kernelY < size; ++kernelY) {\n        for (let kernelX = 0; kernelX < size; ++kernelX) {\n          const weight = kernel[kernelY * size + kernelX];\n          const neighborY = Math.min(\n            height - 1, Math.max(0, pixelY + kernelY - half));\n          const neighborX = Math.min(\n            width - 1, Math.max(0, pixelX + kernelX - half));\n          const inputIndex = (neighborY * width + neighborX) * 4;\n          r += inputData[inputIndex] * weight;\n          g += inputData[inputIndex + 1] * weight;\n          b += inputData[inputIndex + 2] * weight;\n          a += inputData[inputIndex + 3] * weight;\n        }\n      }\n      const outputIndex = (pixelsAbove + pixelX) * 4;\n      outputData[outputIndex] = r;\n      outputData[outputIndex + 1] = g;\n      outputData[outputIndex + 2] = b;\n      outputData[outputIndex + 3] = kernel.normalized ? a : 255;\n    }\n  }\n  context.putImageData(output, 0, 0);\n}\n"],"sourceRoot":""}