{"version":3,"sources":["webpack:///./region-growing.js"],"names":["next4Edges","edge","x","y","imagery","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_2__","source","_src_ol_source_BingMaps_js__WEBPACK_IMPORTED_MODULE_5__","key","imagerySet","raster","_src_ol_source_Raster_js__WEBPACK_IMPORTED_MODULE_6__","sources","getSource","operationType","operation","inputs","data","image","seed","pixel","delta","parseInt","map","Math","round","width","height","inputData","outputData","Uint8ClampedArray","seedIdx","seedR","seedG","seedB","length","newedge","i","ii","next","j","jj","s","t","ci","cr","cg","cb","abs","push","lib","rasterImage","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","opacity","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","Object","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_4__","zoom","coordinate","on","event","changed","thresholdControl","document","getElementById","updateControlValue","innerText","value","getPixelFromCoordinate","addEventListener"],"mappings":"2JA+DA,SAAAA,EAAAC,GACA,MAAAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACA,QACAC,EAAA,EAAAC,IACAD,EAAA,EAAAC,IACAD,EAAAC,EAAA,IACAD,EAAAC,EAAA,IAIA,MAEAC,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GAAwBC,IAHxB,mEAGwBC,WAAA,aAGxBC,EAAA,IAAAC,EAAA,GACAC,SAAAR,EAAAS,aACAC,cAAA,QACAC,UA5EA,SAAAC,EAAAC,GACA,MAAAC,EAAAF,EAAA,GACA,IAAAG,EAAAF,EAAAG,MACA,MAAAC,EAAAC,SAAAL,EAAAI,OACA,IAAAF,EACA,OAAAD,EAGAC,IAAAI,IAAAC,KAAAC,OACA,MAAAC,EAAAR,EAAAQ,MACAC,EAAAT,EAAAS,OACAC,EAAAV,EAAAD,KACAY,EAAA,IAAAC,kBAAAF,GACAG,EAAA,GAAAZ,EAAA,GAAAO,EAAAP,EAAA,IACAa,EAAAJ,EAAAG,GACAE,EAAAL,EAAAG,EAAA,GACAG,EAAAN,EAAAG,EAAA,GACA,IAAA9B,GAAAkB,GACA,KAAAlB,EAAAkC,QAAA,CACA,MAAAC,KACA,QAAAC,EAAA,EAAAC,EAAArC,EAAAkC,OAAqCE,EAAAC,EAAQD,IAAA,CAI7C,MAAAE,EAAAvC,EAAAC,EAAAoC,IACA,QAAAG,EAAA,EAAAC,EAAAF,EAAAJ,OAAuCK,EAAAC,EAAQD,IAAA,CAC/C,MAAAE,EAAAH,EAAAC,GAAA,GACAG,EAAAJ,EAAAC,GAAA,GACA,GAAAE,GAAA,GAAAA,EAAAhB,GAAAiB,GAAA,GAAAA,EAAAhB,EAAA,CACA,MAAAiB,EAAA,GAAAD,EAAAjB,EAAAgB,GACAG,EAAAjB,EAAAgB,GACAE,EAAAlB,EAAAgB,EAAA,GACAG,EAAAnB,EAAAgB,EAAA,GAGA,OAFAhB,EAAAgB,EAAA,GAGA,SAEApB,KAAAwB,IAAAhB,EAAAa,GAAAxB,GAAAG,KAAAwB,IAAAf,EAAAa,GAAAzB,GACAG,KAAAwB,IAAAd,EAAAa,GAAA1B,IACAQ,EAAAe,GAAA,IACAf,EAAAe,EAAA,KACAf,EAAAe,EAAA,KACAf,EAAAe,EAAA,OACAR,EAAAa,MAAAP,EAAAC,KAGAf,EAAAgB,EAAA,OAIA3C,EAAAmC,EAEA,OAAUnB,KAAAY,EAAAH,QAAAC,WA0BVuB,KACAlD,gBAIAmD,EAAA,IAAAC,EAAA,GACAC,QAAA,GACA/C,OAAAI,IAGAa,EAAA,IAAA+B,EAAA,GACAC,QAAAnD,EAAA+C,GACAK,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,OAAAC,OAAAC,EAAA,EAAAD,GAAA,eACAE,KAAA,OAIA,IAAAC,EAEAxC,EAAAyC,GAAA,iBAAAC,GACAF,EAAAE,EAAAF,WACArD,EAAAwD,YAGA,MAAAC,EAAAC,SAAAC,eAAA,aAWA,SAAAC,IACAF,SAAAC,eAAA,mBAAAE,UAAAJ,EAAAK,MAVA9D,EAAAsD,GAAA,4BAAAC,GAEA,MAAAhD,EAAAgD,EAAAhD,KACAA,EAAAI,MAAA8C,EAAAK,MACAT,IACA9C,EAAAG,MAAAG,EAAAkD,uBAAAV,MAOAO,IAEAH,EAAAO,iBAAA,mBACAJ,IACA5D,EAAAwD","file":"region-growing.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport RasterSource from '../src/ol/source/Raster.js';\n\nfunction growRegion(inputs, data) {\n  const image = inputs[0];\n  let seed = data.pixel;\n  const delta = parseInt(data.delta);\n  if (!seed) {\n    return image;\n  }\n\n  seed = seed.map(Math.round);\n  const width = image.width;\n  const height = image.height;\n  const inputData = image.data;\n  const outputData = new Uint8ClampedArray(inputData);\n  const seedIdx = (seed[1] * width + seed[0]) * 4;\n  const seedR = inputData[seedIdx];\n  const seedG = inputData[seedIdx + 1];\n  const seedB = inputData[seedIdx + 2];\n  let edge = [seed];\n  while (edge.length) {\n    const newedge = [];\n    for (let i = 0, ii = edge.length; i < ii; i++) {\n      // As noted in the Raster source constructor, this function is provided\n      // using the `lib` option. Other functions will NOT be visible unless\n      // provided using the `lib` option.\n      const next = next4Edges(edge[i]);\n      for (let j = 0, jj = next.length; j < jj; j++) {\n        const s = next[j][0];\n        const t = next[j][1];\n        if (s >= 0 && s < width && t >= 0 && t < height) {\n          const ci = (t * width + s) * 4;\n          const cr = inputData[ci];\n          const cg = inputData[ci + 1];\n          const cb = inputData[ci + 2];\n          const ca = inputData[ci + 3];\n          // if alpha is zero, carry on\n          if (ca === 0) {\n            continue;\n          }\n          if (Math.abs(seedR - cr) < delta && Math.abs(seedG - cg) < delta &&\n              Math.abs(seedB - cb) < delta) {\n            outputData[ci] = 255;\n            outputData[ci + 1] = 0;\n            outputData[ci + 2] = 0;\n            outputData[ci + 3] = 255;\n            newedge.push([s, t]);\n          }\n          // mark as visited\n          inputData[ci + 3] = 0;\n        }\n      }\n    }\n    edge = newedge;\n  }\n  return {data: outputData, width: width, height: height};\n}\n\nfunction next4Edges(edge) {\n  const x = edge[0];\n  const y = edge[1];\n  return [\n    [x + 1, y],\n    [x - 1, y],\n    [x, y + 1],\n    [x, y - 1]\n  ];\n}\n\nconst key = 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5';\n\nconst imagery = new TileLayer({\n  source: new BingMaps({key: key, imagerySet: 'Aerial'})\n});\n\nconst raster = new RasterSource({\n  sources: [imagery.getSource()],\n  operationType: 'image',\n  operation: growRegion,\n  // Functions in the `lib` object will be available to the operation run in\n  // the web worker.\n  lib: {\n    next4Edges: next4Edges\n  }\n});\n\nconst rasterImage = new ImageLayer({\n  opacity: 0.7,\n  source: raster\n});\n\nconst map = new Map({\n  layers: [imagery, rasterImage],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-119.07, 47.65]),\n    zoom: 11\n  })\n});\n\nlet coordinate;\n\nmap.on('click', function(event) {\n  coordinate = event.coordinate;\n  raster.changed();\n});\n\nconst thresholdControl = document.getElementById('threshold');\n\nraster.on('beforeoperations', function(event) {\n  // the event.data object will be passed to operations\n  const data = event.data;\n  data.delta = thresholdControl.value;\n  if (coordinate) {\n    data.pixel = map.getPixelFromCoordinate(coordinate);\n  }\n});\n\nfunction updateControlValue() {\n  document.getElementById('threshold-value').innerText = thresholdControl.value;\n}\nupdateControlValue();\n\nthresholdControl.addEventListener('input', function() {\n  updateControlValue();\n  raster.changed();\n});\n"],"sourceRoot":""}