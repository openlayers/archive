{"version":3,"sources":["webpack:///./kml-timezones.js"],"names":["vector","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","source","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_6__","url","format","_src_ol_format_KML_js__WEBPACK_IMPORTED_MODULE_2__","extractStyles","style","feature","offset","match","get","parseInt","date","Date","local","getTime","getTimezoneOffset","delta","Math","abs","getHours","getMinutes","opacity","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","fill","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","color","stroke","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","raster","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_Stamen_js__WEBPACK_IMPORTED_MODULE_5__","layer","map","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","layers","target","view","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","center","zoom","info","$","tooltip","animation","trigger","displayFeatureInfo","pixel","css","left","top","forEachFeatureAtPixel","attr","on","evt","dragging","getEventPixel","originalEvent"],"mappings":"uLAgBA,MA4BAA,EAAA,IAAAC,EAAA,GACAC,OAAA,IAAAC,EAAA,GACAC,IAAA,yBACAC,OAAA,IAAAC,EAAA,GACAC,eAAA,MAGAC,MAnCA,SAAAC,GACA,IAAAC,EAAA,EACA,MACAC,EADAF,EAAAG,IAAA,QACAD,MAAA,yBACAA,IAGAD,EAAA,GAFAG,SAAAF,EAAA,OACAE,SAAAF,EAAA,QAGA,MAAAG,EAAA,IAAAC,KACAC,EAAA,IAAAD,KAAAD,EAAAG,UACA,KAAAH,EAAAI,oBAAAR,IAEA,IAAAS,EAAAC,KAAAC,IAAA,GAAAL,EAAAM,WAAAN,EAAAO,aAAA,IACAJ,EAAA,KACAA,EAAA,GAAAA,GAEA,MAAAK,EAAA,OAAAL,EAAA,IACA,WAAAM,EAAA,GACAC,KAAA,IAAAC,EAAA,GACAC,OAAA,WAAAJ,KAEAK,OAAA,IAAAC,EAAA,GACAF,MAAA,iBAeAG,EAAA,IAAAC,EAAA,GACA9B,OAAA,IAAA+B,EAAA,GACAC,MAAA,YAIAC,EAAA,IAAAC,EAAA,GACAC,QAAAN,EAAA/B,GACAsC,OAAA,MACAC,KAAA,IAAAC,EAAA,GACAC,QAAA,KACAC,KAAA,MAIAC,EAAAC,EAAA,SACAD,EAAAE,SACAC,WAAA,EACAC,QAAA,WAGA,MAAAC,EAAA,SAAAC,GACAN,EAAAO,KACAC,KAAAF,EAAA,QACAG,IAAAH,EAAA,aAEA,MAAAxC,EAAA0B,EAAAkB,sBAAAJ,EAAA,SAAAxC,GACA,OAAAA,IAEAA,EACAkC,EAAAE,QAAA,QACAS,KAAA,sBAAA7C,EAAAG,IAAA,SACAiC,QAAA,YACAA,QAAA,QAEAF,EAAAE,QAAA,SAIAV,EAAAoB,GAAA,uBAAAC,GACAA,EAAAC,SACAd,EAAAE,QAAA,QAGAG,EAAAb,EAAAuB,cAAAF,EAAAG,kBAGAxB,EAAAoB,GAAA,iBAAAC,GACAR,EAAAQ,EAAAP","file":"kml-timezones.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport KML from '../src/ol/format/KML.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\n\n\n/*\n * Compute the style of the feature.  Here we want the opacity of polygons to\n * be based on the offset from local noon.  For example, a timezone where it is\n * currently noon would have an opacity of 0.75.  And a timezone where it is\n * currently midnight would have an opacity of 0.  This doesn't account for\n * daylight savings, so don't use it to plan your vacation.\n */\nconst styleFunction = function(feature) {\n  let offset = 0;\n  const name = feature.get('name'); // e.g. GMT -08:30\n  const match = name.match(/([\\-+]\\d{2}):(\\d{2})$/);\n  if (match) {\n    const hours = parseInt(match[1], 10);\n    const minutes = parseInt(match[2], 10);\n    offset = 60 * hours + minutes;\n  }\n  const date = new Date();\n  const local = new Date(date.getTime() +\n      (date.getTimezoneOffset() + offset) * 60000);\n  // offset from local noon (in hours)\n  let delta = Math.abs(12 - local.getHours() + (local.getMinutes() / 60));\n  if (delta > 12) {\n    delta = 24 - delta;\n  }\n  const opacity = 0.75 * (1 - delta / 12);\n  return new Style({\n    fill: new Fill({\n      color: [0xff, 0xff, 0x33, opacity]\n    }),\n    stroke: new Stroke({\n      color: '#ffffff'\n    })\n  });\n};\n\nconst vector = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/kml/timezones.kml',\n    format: new KML({\n      extractStyles: false\n    })\n  }),\n  style: styleFunction\n});\n\nconst raster = new TileLayer({\n  source: new Stamen({\n    layer: 'toner'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst info = $('#info');\ninfo.tooltip({\n  animation: false,\n  trigger: 'manual'\n});\n\nconst displayFeatureInfo = function(pixel) {\n  info.css({\n    left: pixel[0] + 'px',\n    top: (pixel[1] - 15) + 'px'\n  });\n  const feature = map.forEachFeatureAtPixel(pixel, function(feature) {\n    return feature;\n  });\n  if (feature) {\n    info.tooltip('hide')\n      .attr('data-original-title', feature.get('name'))\n      .tooltip('fixTitle')\n      .tooltip('show');\n  } else {\n    info.tooltip('hide');\n  }\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    info.tooltip('hide');\n    return;\n  }\n  displayFeatureInfo(map.getEventPixel(evt.originalEvent));\n});\n\nmap.on('click', function(evt) {\n  displayFeatureInfo(evt.pixel);\n});\n"],"sourceRoot":""}