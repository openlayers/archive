{"version":3,"sources":["webpack:///./icon-sprite-webgl.js"],"names":["map","layers","source","url","crossOrigin","target","document","getElementById","view","center","zoom","vectorSource","features","attributions","style","variables","filterShape","filter","symbol","symbolType","src","size","color","rotateWithView","offset","textureCoord","shapeTypes","all","shapeSelect","addEventListener","options","selectedIndex","value","render","const","client","XMLHttpRequest","open","onload","curIndex","csv","responseText","prevIndex","indexOf","line","substr","split","coords","parseFloat","isNaN","shape","push","datetime","year","parseInt","exec","duration","geometry","addFeatures","Object","keys","sort","a","b","forEach","option","createElement","text","appendChild","send","addLayer","info","on","evt","getView","getInteracting","getAnimating","pixel","innerText","forEachFeatureAtPixel","feature","get"],"mappings":"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","file":"icon-sprite-webgl.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport TileJSON from '../src/ol/source/TileJSON.js';\nimport Feature from '../src/ol/Feature.js';\nimport Point from '../src/ol/geom/Point.js';\nimport {Vector} from '../src/ol/source.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport WebGLPointsLayer from '../src/ol/layer/WebGLPoints.js';\n\nconst key = 'pk.eyJ1IjoidHNjaGF1YiIsImEiOiJjaW5zYW5lNHkxMTNmdWttM3JyOHZtMmNtIn0.CDIBD8H-G2Gf-cPkIuWtRg';\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new TileJSON({\n        url: 'https://api.tiles.mapbox.com/v4/mapbox.world-dark.json?secure&access_token=' + key,\n        crossOrigin: 'anonymous'\n      })\n    })\n  ],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 4000000],\n    zoom: 2\n  })\n});\n\nconst vectorSource = new Vector({\n  features: [],\n  attributions: 'National UFO Reporting Center'\n});\n\nconst oldColor = [255, 160, 110];\nconst newColor = [180, 255, 200];\nconst size = 16;\n\nconst style = {\n  variables: {\n    filterShape: 'all'\n  },\n  filter: [\n    'case',\n    ['!=', ['var', 'filterShape'], 'all'],\n    ['==', ['get', 'shape'], ['var', 'filterShape']],\n    true\n  ],\n  symbol: {\n    symbolType: 'image',\n    src: 'data/ufo_shapes.png',\n    size: size,\n    color: [\n      'interpolate',\n      ['linear'],\n      ['get', 'year'],\n      1950, oldColor,\n      2013, newColor\n    ],\n    rotateWithView: false,\n    offset: [\n      0,\n      0\n    ],\n    textureCoord: [\n      'match',\n      ['get', 'shape'],\n      'light', [0, 0, 0.25, 0.5],\n      'sphere', [0.25, 0, 0.5, 0.5],\n      'circle', [0.25, 0, 0.5, 0.5],\n      'disc', [0.5, 0, 0.75, 0.5],\n      'oval', [0.5, 0, 0.75, 0.5],\n      'triangle', [0.75, 0, 1, 0.5],\n      'fireball', [0, 0.5, 0.25, 1],\n      [0.75, 0.5, 1, 1]\n    ]\n  }\n};\n\n// key is shape name, value is sightings count\nconst shapeTypes = {\n  all: 0\n};\nconst shapeSelect = document.getElementById('shape-filter');\nshapeSelect.addEventListener('input', function() {\n  style.variables.filterShape = shapeSelect.options[shapeSelect.selectedIndex].value;\n  map.render();\n});\nfunction fillShapeSelect() {\n  Object.keys(shapeTypes)\n    .sort(function(a, b) {\n      return shapeTypes[b] - shapeTypes[a];\n    })\n    .forEach(function(shape) {\n      const option = document.createElement('option');\n      option.text = `${shape} (${shapeTypes[shape]} sightings)`;\n      option.value = shape;\n      shapeSelect.appendChild(option);\n    });\n}\n\nconst client = new XMLHttpRequest();\nclient.open('GET', 'data/csv/ufo_sighting_data.csv');\nclient.onload = function() {\n  const csv = client.responseText;\n  const features = [];\n\n  let prevIndex = csv.indexOf('\\n') + 1; // scan past the header line\n\n  let curIndex;\n  while ((curIndex = csv.indexOf('\\n', prevIndex)) != -1) {\n    const line = csv.substr(prevIndex, curIndex - prevIndex).split(',');\n    prevIndex = curIndex + 1;\n\n    const coords = fromLonLat([parseFloat(line[5]), parseFloat(line[4])]);\n\n    // only keep valid points\n    if (isNaN(coords[0]) || isNaN(coords[1])) {\n      continue;\n    }\n\n    const shape = line[2];\n    shapeTypes[shape] = (shapeTypes[shape] ? shapeTypes[shape] : 0) + 1;\n    shapeTypes['all']++;\n\n    features.push(new Feature({\n      datetime: line[0],\n      year: parseInt(/[0-9]{4}/.exec(line[0])[0]), // extract the year as int\n      shape: shape,\n      duration: line[3],\n      geometry: new Point(coords)\n    }));\n  }\n  vectorSource.addFeatures(features);\n  fillShapeSelect();\n};\nclient.send();\n\nmap.addLayer(\n  new WebGLPointsLayer({\n    source: vectorSource,\n    style: style\n  })\n);\n\nconst info = document.getElementById('info');\nmap.on('pointermove', function(evt) {\n  if (map.getView().getInteracting() || map.getView().getAnimating()) {\n    return;\n  }\n  const pixel = evt.pixel;\n  info.innerText = '';\n  map.forEachFeatureAtPixel(pixel, function(feature) {\n    const datetime = feature.get('datetime');\n    const duration = feature.get('duration');\n    const shape = feature.get('shape');\n    info.innerText = 'On ' + datetime + ', lasted ' + duration + ' seconds and had a \"' + shape + '\" shape.';\n  });\n});\n"],"sourceRoot":""}