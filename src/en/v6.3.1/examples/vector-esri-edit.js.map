{"version":3,"sources":["webpack:///./vector-esri-edit.js"],"names":["serviceUrl","esrijsonFormat","vectorSource","loader","extent","resolution","projection","const","url","encodeURIComponent","$","ajax","dataType","success","response","error","alert","message","details","join","features","readFeatures","featureProjection","length","addFeatures","strategy","tileSize","vector","source","raster","attributions","draw","type","select","setActive","selected","getFeatures","modify","map","interactions","extend","layers","target","document","getElementById","view","center","zoom","typeSelect","onchange","value","dirty","on","evt","element","getId","feature","fid","payload","writeFeature","getView","getProjection","post","f","done","data","result","JSON","parse","updateResults","description","code","addResults","setId","clear"],"mappings":"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","file":"vector-esri-edit.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport EsriJSON from '../src/ol/format/EsriJSON.js';\nimport {defaults as defaultInteractions, Draw, Modify, Select} from '../src/ol/interaction.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {tile as tileStrategy} from '../src/ol/loadingstrategy.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {createXYZ} from '../src/ol/tilegrid.js';\n\n\nconst serviceUrl = 'https://services.arcgis.com/rOo16HdIMeOBI4Mb/arcgis/rest/' +\n    'services/PDX_Pedestrian_Districts/FeatureServer/';\nconst layer = '0';\n\nconst esrijsonFormat = new EsriJSON();\n\nconst vectorSource = new VectorSource({\n  loader: function(extent, resolution, projection) {\n    const url = serviceUrl + layer + '/query/?f=json&' +\n        'returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=' +\n        encodeURIComponent('{\"xmin\":' + extent[0] + ',\"ymin\":' +\n            extent[1] + ',\"xmax\":' + extent[2] + ',\"ymax\":' + extent[3] +\n            ',\"spatialReference\":{\"wkid\":102100}}') +\n        '&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*' +\n        '&outSR=102100';\n    $.ajax({url: url, dataType: 'jsonp', success: function(response) {\n      if (response.error) {\n        alert(response.error.message + '\\n' +\n            response.error.details.join('\\n'));\n      } else {\n        // dataProjection will be read from document\n        const features = esrijsonFormat.readFeatures(response, {\n          featureProjection: projection\n        });\n        if (features.length > 0) {\n          vectorSource.addFeatures(features);\n        }\n      }\n    }});\n  },\n  strategy: tileStrategy(createXYZ({\n    tileSize: 512\n  }))\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource\n});\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions: 'Tiles Â© <a href=\"https://services.arcgisonline.com/ArcGIS/' +\n        'rest/services/World_Topo_Map/MapServer\">ArcGIS</a>',\n    url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +\n        'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'\n  })\n});\n\nconst draw = new Draw({\n  source: vectorSource,\n  type: 'Polygon'\n});\n\nconst select = new Select();\nselect.setActive(false);\nconst selected = select.getFeatures();\n\nconst modify = new Modify({\n  features: selected\n});\nmodify.setActive(false);\n\nconst map = new Map({\n  interactions: defaultInteractions().extend([draw, select, modify]),\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: fromLonLat([-122.619, 45.512]),\n    zoom: 12\n  })\n});\n\nconst typeSelect = document.getElementById('type');\n\n\n/**\n * Let user change the interaction type.\n */\ntypeSelect.onchange = function() {\n  draw.setActive(typeSelect.value === 'DRAW');\n  select.setActive(typeSelect.value === 'MODIFY');\n  modify.setActive(typeSelect.value === 'MODIFY');\n};\n\nconst dirty = {};\n\nselected.on('add', function(evt) {\n  const feature = evt.element;\n  feature.on('change', function(evt) {\n    dirty[evt.target.getId()] = true;\n  });\n});\n\nselected.on('remove', function(evt) {\n  const feature = evt.element;\n  const fid = feature.getId();\n  if (dirty[fid] === true) {\n    const payload = '[' + esrijsonFormat.writeFeature(feature, {\n      featureProjection: map.getView().getProjection()\n    }) + ']';\n    const url = serviceUrl + layer + '/updateFeatures';\n    $.post(url, {f: 'json', features: payload}).done(function(data) {\n      const result = JSON.parse(data);\n      if (result.updateResults && result.updateResults.length > 0) {\n        if (result.updateResults[0].success !== true) {\n          const error = result.updateResults[0].error;\n          alert(error.description + ' (' + error.code + ')');\n        } else {\n          delete dirty[fid];\n        }\n      }\n    });\n  }\n});\n\ndraw.on('drawend', function(evt) {\n  const feature = evt.feature;\n  const payload = '[' + esrijsonFormat.writeFeature(feature, {\n    featureProjection: map.getView().getProjection()\n  }) + ']';\n  const url = serviceUrl + layer + '/addFeatures';\n  $.post(url, {f: 'json', features: payload}).done(function(data) {\n    const result = JSON.parse(data);\n    if (result.addResults && result.addResults.length > 0) {\n      if (result.addResults[0].success === true) {\n        feature.setId(result.addResults[0]['objectId']);\n        vectorSource.clear();\n      } else {\n        const error = result.addResults[0].error;\n        alert(error.description + ' (' + error.code + ')');\n      }\n    }\n  });\n});\n"],"sourceRoot":""}