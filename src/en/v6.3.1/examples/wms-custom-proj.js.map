{"version":3,"sources":["webpack:///./wms-custom-proj.js"],"names":["projection","code","extent","units","coordinate","WGStoCHy","WGStoCHx","CHtoWGSlng","CHtoWGSlat","const","layers","source","url","crossOrigin","attributions","params","serverType","controls","extend","target","view","center","zoom","lat","lng","DECtoSEX","lat_aux","DEGtoSEC","lng_aux","Math","pow","y","x","y_aux","x_aux","angle","deg","parseInt","min","sec","parts","String","split","length","Number"],"mappings":"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","file":"wms-custom-proj.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls, ScaleLine} from '../src/ol/control.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {addProjection, addCoordinateTransforms, transform} from '../src/ol/proj.js';\nimport Projection from '../src/ol/proj/Projection.js';\nimport TileWMS from '../src/ol/source/TileWMS.js';\n\n\n// By default OpenLayers does not know about the EPSG:21781 (Swiss) projection.\n// So we create a projection instance for EPSG:21781 and pass it to\n// ol/proj~addProjection to make it available to the library for lookup by its\n// code.\n\nconst projection = new Projection({\n  code: 'EPSG:21781',\n  // The extent is used to determine zoom level 0. Recommended values for a\n  // projection's validity extent can be found at https://epsg.io/.\n  extent: [485869.5728, 76443.1884, 837076.5648, 299941.7864],\n  units: 'm'\n});\naddProjection(projection);\n\n// We also declare EPSG:21781/EPSG:4326 transform functions. These functions\n// are necessary for the ScaleLine control and when calling ol/proj~transform\n// for setting the view's initial center (see below).\n\naddCoordinateTransforms('EPSG:4326', projection,\n  function(coordinate) {\n    return [\n      WGStoCHy(coordinate[1], coordinate[0]),\n      WGStoCHx(coordinate[1], coordinate[0])\n    ];\n  },\n  function(coordinate) {\n    return [\n      CHtoWGSlng(coordinate[0], coordinate[1]),\n      CHtoWGSlat(coordinate[0], coordinate[1])\n    ];\n  });\n\nconst extent = [420000, 30000, 900000, 350000];\nconst layers = [\n  new TileLayer({\n    extent: extent,\n    source: new TileWMS({\n      url: 'https://wms.geo.admin.ch/',\n      crossOrigin: 'anonymous',\n      attributions: '© <a href=\"http://www.geo.admin.ch/internet/geoportal/' +\n          'en/home.html\">Pixelmap 1:1000000 / geo.admin.ch</a>',\n      params: {\n        'LAYERS': 'ch.swisstopo.pixelkarte-farbe-pk1000.noscale',\n        'FORMAT': 'image/jpeg'\n      },\n      serverType: 'mapserver'\n    })\n  }),\n  new TileLayer({\n    extent: extent,\n    source: new TileWMS({\n      url: 'https://wms.geo.admin.ch/',\n      crossOrigin: 'anonymous',\n      attributions: '© <a href=\"http://www.geo.admin.ch/internet/geoportal/' +\n          'en/home.html\">National parks / geo.admin.ch</a>',\n      params: {'LAYERS': 'ch.bafu.schutzgebiete-paerke_nationaler_bedeutung'},\n      serverType: 'mapserver'\n    })\n  })\n];\n\nconst map = new Map({\n  controls: defaultControls().extend([\n    new ScaleLine({\n      units: 'metric'\n    })\n  ]),\n  layers: layers,\n  target: 'map',\n  view: new View({\n    projection: projection,\n    center: transform([8.23, 46.86], 'EPSG:4326', 'EPSG:21781'),\n    extent: extent,\n    zoom: 2\n  })\n});\n\n\n/*\n * Swiss projection transform functions downloaded from\n * http://www.swisstopo.admin.ch/internet/swisstopo/en/home/products/software/products/skripts.html\n */\n\n// Convert WGS lat/long (° dec) to CH y\nfunction WGStoCHy(lat, lng) {\n\n  // Converts degrees dec to sex\n  lat = DECtoSEX(lat);\n  lng = DECtoSEX(lng);\n\n  // Converts degrees to seconds (sex)\n  lat = DEGtoSEC(lat);\n  lng = DEGtoSEC(lng);\n\n  // Axiliary values (% Bern)\n  const lat_aux = (lat - 169028.66) / 10000;\n  const lng_aux = (lng - 26782.5) / 10000;\n\n  // Process Y\n  const y = 600072.37 +\n      211455.93 * lng_aux -\n      10938.51 * lng_aux * lat_aux -\n      0.36 * lng_aux * Math.pow(lat_aux, 2) -\n      44.54 * Math.pow(lng_aux, 3);\n\n  return y;\n}\n\n// Convert WGS lat/long (° dec) to CH x\nfunction WGStoCHx(lat, lng) {\n\n  // Converts degrees dec to sex\n  lat = DECtoSEX(lat);\n  lng = DECtoSEX(lng);\n\n  // Converts degrees to seconds (sex)\n  lat = DEGtoSEC(lat);\n  lng = DEGtoSEC(lng);\n\n  // Axiliary values (% Bern)\n  const lat_aux = (lat - 169028.66) / 10000;\n  const lng_aux = (lng - 26782.5) / 10000;\n\n  // Process X\n  const x = 200147.07 +\n      308807.95 * lat_aux +\n      3745.25 * Math.pow(lng_aux, 2) +\n      76.63 * Math.pow(lat_aux, 2) -\n      194.56 * Math.pow(lng_aux, 2) * lat_aux +\n      119.79 * Math.pow(lat_aux, 3);\n\n  return x;\n\n}\n\n\n// Convert CH y/x to WGS lat\nfunction CHtoWGSlat(y, x) {\n\n  // Converts militar to civil and  to unit = 1000km\n  // Axiliary values (% Bern)\n  const y_aux = (y - 600000) / 1000000;\n  const x_aux = (x - 200000) / 1000000;\n\n  // Process lat\n  let lat = 16.9023892 +\n      3.238272 * x_aux -\n      0.270978 * Math.pow(y_aux, 2) -\n      0.002528 * Math.pow(x_aux, 2) -\n      0.0447 * Math.pow(y_aux, 2) * x_aux -\n      0.0140 * Math.pow(x_aux, 3);\n\n  // Unit 10000\" to 1 \" and converts seconds to degrees (dec)\n  lat = lat * 100 / 36;\n\n  return lat;\n\n}\n\n// Convert CH y/x to WGS long\nfunction CHtoWGSlng(y, x) {\n\n  // Converts militar to civil and  to unit = 1000km\n  // Axiliary values (% Bern)\n  const y_aux = (y - 600000) / 1000000;\n  const x_aux = (x - 200000) / 1000000;\n\n  // Process long\n  let lng = 2.6779094 +\n      4.728982 * y_aux +\n      0.791484 * y_aux * x_aux +\n      0.1306 * y_aux * Math.pow(x_aux, 2) -\n      0.0436 * Math.pow(y_aux, 3);\n\n  // Unit 10000\" to 1 \" and converts seconds to degrees (dec)\n  lng = lng * 100 / 36;\n\n  return lng;\n\n}\n\n\n// Convert DEC angle to SEX DMS\nfunction DECtoSEX(angle) {\n\n  // Extract DMS\n  const deg = parseInt(angle, 10);\n  const min = parseInt((angle - deg) * 60, 10);\n  const sec = (((angle - deg) * 60) - min) * 60;\n\n  // Result in degrees sex (dd.mmss)\n  return deg + min / 100 + sec / 10000;\n\n}\n\n// Convert Degrees angle to seconds\nfunction DEGtoSEC(angle) {\n\n  // Extract DMS\n  const deg = parseInt(angle, 10);\n  let min = parseInt((angle - deg) * 100, 10);\n  let sec = (((angle - deg) * 100) - min) * 100;\n\n  // Avoid rounding problems with seconds=0\n  const parts = String(angle).split('.');\n  if (parts.length == 2 && parts[1].length == 2) {\n    min = Number(parts[1]);\n    sec = 0;\n  }\n\n  // Result in degrees sex (dd.mmss)\n  return sec + min * 60 + deg * 3600;\n\n}\n"],"sourceRoot":""}