{"version":3,"sources":["webpack:///./regularshape.js"],"names":["stroke","color","width","fill","styles","image","points","radius","angle","Math","PI","rotation","radius2","displacement","styleKeys","features","Array","e","i","const","coordinates","random","setStyle","floor","source","vectorLayer","layers","target","view","center","zoom"],"mappings":"4FAAA,OA0FA,IA1FA,mFASMA,EAAS,IAAI,IAAO,CAACC,MAAO,QAASC,MAAO,IAC5CC,EAAO,IAAI,IAAK,CAACF,MAAO,QAExBG,EAAS,CACb,OAAU,IAAI,IAAM,CAClBC,MAAO,IAAI,IAAa,CACtBF,KAAMA,EACNH,OAAQA,EACRM,OAAQ,EACRC,OAAQ,GACRC,MAAOC,KAAKC,GAAK,MAGrB,SAAY,IAAI,IAAM,CACpBL,MAAO,IAAI,IAAa,CACtBF,KAAMA,EACNH,OAAQA,EACRM,OAAQ,EACRC,OAAQ,GACRI,SAAUF,KAAKC,GAAK,EACpBF,MAAO,MAGX,KAAQ,IAAI,IAAM,CAChBH,MAAO,IAAI,IAAa,CACtBF,KAAMA,EACNH,OAAQA,EACRM,OAAQ,EACRC,OAAQ,GACRK,QAAS,EACTJ,MAAO,MAGX,MAAS,IAAI,IAAM,CACjBH,MAAO,IAAI,IAAa,CACtBF,KAAMA,EACNH,OAAQA,EACRM,OAAQ,EACRC,OAAQ,GACRK,QAAS,EACTJ,MAAO,MAGX,EAAK,IAAI,IAAM,CACbH,MAAO,IAAI,IAAa,CACtBF,KAAMA,EACNH,OAAQA,EACRM,OAAQ,EACRC,OAAQ,GACRK,QAAS,EACTJ,MAAOC,KAAKC,GAAK,MAGrB,QAAW,CACT,IAAI,IAAM,CACRL,MAAO,IAAI,IAAa,CACtBF,KAAMA,EACNH,OAAQA,EACRM,OAAQ,EACRC,OAAQ,EACRC,MAAOC,KAAKC,GAAK,EACjBG,aAAc,CAAC,EAAG,QAGtB,IAAI,IAAM,CACRR,MAAO,IAAI,IAAa,CACtBF,KAAMA,EACNH,OAAQA,EACRM,OAAQ,EACRC,OAAQ,GACRC,MAAOC,KAAKC,GAAK,QAOnBI,EAAY,CAAC,IAAK,QAAS,OAAQ,WAAY,SAAU,WAEzDC,EAAW,IAAIC,MADP,KAERC,EAAI,KACDC,EAAI,EAAGA,EAHF,MAGeA,EAAG,CAC9BC,IAAMC,EAAc,CAAC,IAAQX,KAAKY,SAAWJ,EAAG,IAAQR,KAAKY,SAAWJ,GACxEF,EAASG,GAAK,IAAI,IAAQ,IAAI,IAAME,IACpCL,EAASG,GAAGI,SAASlB,EAAOU,EAAUL,KAAKc,MAAsB,EAAhBd,KAAKY,aAGxDF,IAAMK,EAAS,IAAI,IAAa,CAC9BT,SAAUA,IAGNU,EAAc,IAAI,IAAY,CAClCD,OAAQA,IAGE,IAAI,IAAI,CAClBE,OAAQ,CACND,GAEFE,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,Q","file":"regularshape.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Point from '../src/ol/geom/Point.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Fill, RegularShape, Stroke, Style} from '../src/ol/style.js';\n\n\nconst stroke = new Stroke({color: 'black', width: 2});\nconst fill = new Fill({color: 'red'});\n\nconst styles = {\n  'square': new Style({\n    image: new RegularShape({\n      fill: fill,\n      stroke: stroke,\n      points: 4,\n      radius: 10,\n      angle: Math.PI / 4\n    })\n  }),\n  'triangle': new Style({\n    image: new RegularShape({\n      fill: fill,\n      stroke: stroke,\n      points: 3,\n      radius: 10,\n      rotation: Math.PI / 4,\n      angle: 0\n    })\n  }),\n  'star': new Style({\n    image: new RegularShape({\n      fill: fill,\n      stroke: stroke,\n      points: 5,\n      radius: 10,\n      radius2: 4,\n      angle: 0\n    })\n  }),\n  'cross': new Style({\n    image: new RegularShape({\n      fill: fill,\n      stroke: stroke,\n      points: 4,\n      radius: 10,\n      radius2: 0,\n      angle: 0\n    })\n  }),\n  'x': new Style({\n    image: new RegularShape({\n      fill: fill,\n      stroke: stroke,\n      points: 4,\n      radius: 10,\n      radius2: 0,\n      angle: Math.PI / 4\n    })\n  }),\n  'stacked': [\n    new Style({\n      image: new RegularShape({\n        fill: fill,\n        stroke: stroke,\n        points: 4,\n        radius: 5,\n        angle: Math.PI / 4,\n        displacement: [0, 10]\n      })\n    }),\n    new Style({\n      image: new RegularShape({\n        fill: fill,\n        stroke: stroke,\n        points: 4,\n        radius: 10,\n        angle: Math.PI / 4\n      })\n    })\n  ]\n};\n\n\nconst styleKeys = ['x', 'cross', 'star', 'triangle', 'square', 'stacked'];\nconst count = 250;\nconst features = new Array(count);\nconst e = 4500000;\nfor (let i = 0; i < count; ++i) {\n  const coordinates = [2 * e * Math.random() - e, 2 * e * Math.random() - e];\n  features[i] = new Feature(new Point(coordinates));\n  features[i].setStyle(styles[styleKeys[Math.floor(Math.random() * 6)]]);\n}\n\nconst source = new VectorSource({\n  features: features\n});\n\nconst vectorLayer = new VectorLayer({\n  source: source\n});\n\nconst map = new Map({\n  layers: [\n    vectorLayer\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n"],"sourceRoot":""}