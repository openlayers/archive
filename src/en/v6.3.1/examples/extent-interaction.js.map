{"version":3,"sources":["webpack:///../src/ol/interaction/Extent.js","webpack:///./extent-interaction.js"],"names":["ExtentEventType","ExtentEvent","extent","super","this","Extent","opt_options","const","style","options","extent_","pointerHandler_","pixelTolerance_","undefined","pixelTolerance","snappedToVertex_","extentFeature_","vertexFeature_","extentOverlay_","source","useSpatialIndex","wrapX","boxStyle","feature","resolution","POLYGON","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","getDefaultPointerStyleFunction","setExtent","snapToVertex_","pixel","map","pixelCoordinate","getCoordinateFromPixelInternal","getExtentInternal","segments","getSegments","sort","a","b","closestSegment","vertex","vertexPixel","getPixelFromCoordinateInternal","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","handlePointerMove_","mapBrowserEvent","createOrUpdatePointerFeature_","createOrUpdateExtentFeature_","let","extentFeature","setGeometry","getSource","addFeature","vertexFeature","getGeometry","setCoordinates","handleEvent","type","POINTERMOVE","handlingDownUpSequence","handleDownEvent","getOpposingPoint","point","x_","y_","x","y","getPointHandler","getEdgeHandler","handleDragEvent","coordinate","handleUpEvent","setMap","getExtent","getMap","getView","getProjection","dispatchEvent","POINT","fixedPoint","fixedP1","fixedP2","vectorSource","url","format","layers","target","view","center","zoom","addInteraction","setActive","window","addEventListener","event","keyCode"],"mappings":"2FAAA,yGAsCMA,EAMW,gBASXC,EAAyB,YAK7B,WAAYC,GACVC,OAAM,KAAAH,GAONI,KAAKF,OAASA,E,gGAba,CAAL,KA4BpBG,EAAiC,YAIrC,WAAYC,GAEVC,IA+UIC,EA/UEC,EAAUH,GAAe,GAE/BH,OAAoD,QAOpDC,KAAKM,QAAU,KAOfN,KAAKO,gBAAkB,KAOvBP,KAAKQ,qBAA6CC,IAA3BJ,EAAQK,eAC7BL,EAAQK,eAAiB,GAO3BV,KAAKW,kBAAmB,EAOxBX,KAAKY,eAAiB,KAOtBZ,KAAKa,eAAiB,KAEjBX,IACHA,EAAc,IAQhBF,KAAKc,eAAiB,IAAI,IAAY,CACpCC,OAAQ,IAAI,IAAa,CACvBC,iBAAiB,EACjBC,QAASf,EAAYe,QAEvBb,MAAOF,EAAYgB,SAAWhB,EAAYgB,UAkRxCd,EAAQ,cACP,SAASe,EAASC,GACvB,OAAOhB,EAAM,IAAaiB,WAnRxBC,sBAAsB,EACtBC,wBAAwB,IAQ1BvB,KAAKwB,eAAiB,IAAI,IAAY,CACpCT,OAAQ,IAAI,IAAa,CACvBC,iBAAiB,EACjBC,QAASf,EAAYe,QAEvBb,MAAOF,EAAYuB,aAAevB,EAAYuB,aAAeC,IAC7DJ,sBAAsB,EACtBC,wBAAwB,IAGtBrB,EAAYJ,QACdE,KAAK2B,UAAUzB,EAAYJ,Q,8FAU/B,EAAF,UAAE8B,cAAA,SAAcC,EAAOC,GACnB3B,IAAM4B,EAAkBD,EAAIE,+BAA+BH,GAKrD/B,EAASE,KAAKiC,oBACpB,GAAInC,EAAQ,CAEVK,IAAM+B,EA6RZ,SAAqBpC,GACnB,MAAO,CACL,CAAC,CAACA,EAAO,GAAIA,EAAO,IAAK,CAACA,EAAO,GAAIA,EAAO,KAC5C,CAAC,CAACA,EAAO,GAAIA,EAAO,IAAK,CAACA,EAAO,GAAIA,EAAO,KAC5C,CAAC,CAACA,EAAO,GAAIA,EAAO,IAAK,CAACA,EAAO,GAAIA,EAAO,KAC5C,CAAC,CAACA,EAAO,GAAIA,EAAO,IAAK,CAACA,EAAO,GAAIA,EAAO,MAlSzBqC,CAAYrC,GAC7BoC,EAASE,MARY,SAASC,EAAGC,GACjC,OAAO,YAAyBP,EAAiBM,GAC7C,YAAyBN,EAAiBO,MAO9CnC,IAAMoC,EAAiBL,EAAS,GAE5BM,EAAU,WAAD,CAAkBT,EAC7BQ,GACIE,EAAcX,EAAIY,+BAA+BF,GAGvD,GAAI,YAAmBX,EAAOY,IAAgBzC,KAAKQ,gBAAiB,CAElEL,IAAMwC,EAASb,EAAIY,+BAA+BH,EAAe,IAC3DK,EAASd,EAAIY,+BAA+BH,EAAe,IAC3DM,EAAe,YAA0BJ,EAAaE,GACtDG,EAAe,YAA0BL,EAAaG,GACtDG,EAAOC,KAAKC,KAAKD,KAAKE,IAAIL,EAAcC,IAM9C,OALA9C,KAAKW,iBAAmBoC,GAAQ/C,KAAKQ,gBACjCR,KAAKW,mBACP6B,EAASK,EAAeC,EACtBP,EAAe,GAAKA,EAAe,IAEhCC,GAGX,OAAO,MAOT,EAAF,UAAEW,mBAAA,SAAmBC,GACjBjD,IAAM0B,EAAQuB,EAAgBvB,MACxBC,EAAMsB,EAAgBtB,IAExBU,EAASxC,KAAK4B,cAAcC,EAAOC,GAClCU,IACHA,EAASV,EAAIE,+BAA+BH,IAE9C7B,KAAKqD,8BAA8Bb,IAQrC,EAAF,UAAEc,6BAAA,SAA6BxD,GAC3ByD,IAAIC,EAAgBxD,KAAKY,eAiBzB,OAfK4C,EASE1D,EAGH0D,EAAcC,YAAY,YAAkB3D,IAF5C0D,EAAcC,iBAAYhD,IAN1B+C,EAHG1D,EAGa,IAAI,IAAQ,YAAkBA,IAF9B,IAAI,IAAQ,IAI9BE,KAAKY,eAAiB4C,EACtBxD,KAAKc,eAAe4C,YAAYC,WAAWH,IAQtCA,GAQT,EAAF,UAAEH,8BAAA,SAA8Bb,GAC5Be,IAAIK,EAAgB5D,KAAKa,eACpB+C,EAKcA,EAAcC,cACtBC,eAAetB,IALxBoB,EAAgB,IAAI,IAAQ,IAAI,IAAMpB,IACtCxC,KAAKa,eAAiB+C,EACtB5D,KAAKwB,eAAekC,YAAYC,WAAWC,IAK7C,OAAOA,GAMT,EAAF,UAAEG,YAAA,SAAYX,GACV,OAAoE,EAA8B,eAI9FA,EAAgBY,MAAQ,IAAoBC,aAAgBjE,KAAKkE,wBACnElE,KAAKmD,mBAAmBC,GAG1BrD,YAAMgE,YAAA,KAAY,KAAAX,IAEX,IAMT,EAAF,UAAEe,gBAAA,SAAgBf,GACdjD,IAAM0B,EAAQuB,EAAgBvB,MACxBC,EAAMsB,EAAgBtB,IAEtBhC,EAASE,KAAKiC,oBAChBO,EAASxC,KAAK4B,cAAcC,EAAOC,GAGjCsC,EAAmB,SAASC,GAChCd,IAAIe,EAAK,KACLC,EAAK,KAWT,OAVIF,EAAM,IAAMvE,EAAO,GACrBwE,EAAKxE,EAAO,GACHuE,EAAM,IAAMvE,EAAO,KAC5BwE,EAAKxE,EAAO,IAEVuE,EAAM,IAAMvE,EAAO,GACrByE,EAAKzE,EAAO,GACHuE,EAAM,IAAMvE,EAAO,KAC5ByE,EAAKzE,EAAO,IAEH,OAAPwE,GAAsB,OAAPC,EACV,CAACD,EAAIC,GAEP,MAET,GAAI/B,GAAU1C,EAAQ,CACpBK,IAAMqE,EAAKhC,EAAO,IAAM1C,EAAO,IAAM0C,EAAO,IAAM1C,EAAO,GAAM0C,EAAO,GAAK,KACrEiC,EAAKjC,EAAO,IAAM1C,EAAO,IAAM0C,EAAO,IAAM1C,EAAO,GAAM0C,EAAO,GAAK,KAGjE,OAANgC,GAAoB,OAANC,EAChBzE,KAAKO,gBAAkBmE,EAAgBN,EAAiB5B,IAEzC,OAANgC,EACTxE,KAAKO,gBAAkBoE,EACrBP,EAAiB,CAACI,EAAG1E,EAAO,KAC5BsE,EAAiB,CAACI,EAAG1E,EAAO,MAEf,OAAN2E,IACTzE,KAAKO,gBAAkBoE,EACrBP,EAAiB,CAACtE,EAAO,GAAI2E,IAC7BL,EAAiB,CAACtE,EAAO,GAAI2E,WAKjCjC,EAASV,EAAIE,+BAA+BH,GAC5C7B,KAAK2B,UAAU,CAACa,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,KACxDxC,KAAKO,gBAAkBmE,EAAgBlC,GAEzC,OAAO,GAMT,EAAF,UAAEoC,gBAAA,SAAgBxB,GACd,GAAIpD,KAAKO,gBAAiB,CACxBJ,IAAM4B,EAAkBqB,EAAgByB,WACxC7E,KAAK2B,UAAU3B,KAAKO,gBAAgBwB,IACpC/B,KAAKqD,8BAA8BtB,GAErC,OAAO,GAMT,EAAF,UAAE+C,cAAA,SAAc1B,GACZpD,KAAKO,gBAAkB,KAEvBJ,IAAML,EAASE,KAAKiC,oBAIpB,OAHKnC,GAA8B,IAApB,YAAQA,IACrBE,KAAK2B,UAAU,OAEV,GAMT,EAAF,UAAEoD,OAAA,SAAOjD,GACL9B,KAAKc,eAAeiE,OAAOjD,GAC3B9B,KAAKwB,eAAeuD,OAAOjD,GAC3B/B,YAAMgF,OAAA,KAAO,KAAAjD,IASf,EAAF,UAAEkD,UAAA,WACE,OAAO,YAAahF,KAAKiC,oBAAqBjC,KAAKiF,SAASC,UAAUC,kBASxE,EAAF,UAAElD,kBAAA,WACE,OAAOjC,KAAKM,SASd,EAAF,UAAEqB,UAAA,SAAU7B,GAERE,KAAKM,QAAUR,GAAkB,KACjCE,KAAKsD,6BAA6BxD,GAClCE,KAAKoF,cAAc,IAAIvF,EAAYG,KAAKM,W,EA3UL,CAAlB,KAgWrB,SAASoB,IACPvB,IAAMC,EAAQ,cACd,OAAO,SAASe,EAASC,GACvB,OAAOhB,EAAM,IAAaiF,QAQ9B,SAASX,EAAgBY,GACvB,OAAO,SAASjB,GACd,OAAO,YAAe,CAACiB,EAAYjB,KASvC,SAASM,EAAeY,EAASC,GAC/B,OAAID,EAAQ,IAAMC,EAAQ,GACjB,SAASnB,GACd,OAAO,YAAe,CAACkB,EAAS,CAAClB,EAAM,GAAImB,EAAQ,OAE5CD,EAAQ,IAAMC,EAAQ,GACxB,SAASnB,GACd,OAAO,YAAe,CAACkB,EAAS,CAACC,EAAQ,GAAInB,EAAM,OAG9C,KAkBI,O,iCCnef,wEAOMoB,EAAe,IAAI,IAAa,CACpCC,IAAK,iCACLC,OAAQ,IAAI,MAGR7D,EAAM,IAAI,IAAI,CAClB8D,OAAQ,CACN,IAAI,IAAU,CACZ7E,OAAQ,IAAI,MAEd,IAAI,IAAY,CACdA,OAAQ0E,KAGZI,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJlG,EAAS,IAAI,IACnBgC,EAAImE,eAAenG,GACnBA,EAAOoG,WAAU,GAGjBC,OAAOC,iBAAiB,WAAW,SAASC,GACrB,IAAjBA,EAAMC,SACRxG,EAAOoG,WAAU,MAGrBC,OAAOC,iBAAiB,SAAS,SAASC,GACnB,IAAjBA,EAAMC,SACRxG,EAAOoG,WAAU,Q","file":"extent-interaction.js","sourcesContent":["/**\n * @module ol/interaction/Extent\n */\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {squaredDistanceToSegment, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport {boundingExtent, getArea} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {toUserExtent} from '../proj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n\n/**\n * @enum {string}\n */\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEvent#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n */\nclass ExtentEvent extends Event {\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent the new extent\n   */\n  constructor(extent) {\n    super(ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n\n}\n\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires ExtentEvent\n * @api\n */\nclass Extent extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n      options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    if (!opt_options) {\n      opt_options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    if (opt_options.extent) {\n      this.setExtent(opt_options.extent);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../PluggableMap.js\").default} map map\n   * @returns {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  snapToVertex_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);\n    const sortByDistance = function(a, b) {\n      return squaredDistanceToSegment(pixelCoordinate, a) -\n          squaredDistanceToSegment(pixelCoordinate, b);\n    };\n    const extent = this.getExtentInternal();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      const segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      const closestSegment = segments[0];\n\n      let vertex = (closestOnSegment(pixelCoordinate,\n        closestSegment));\n      const vertexPixel = map.getPixelFromCoordinateInternal(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        const pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ?\n            closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n  handlePointerMove_(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    let vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @returns {Feature} extent as featrue\n   * @private\n   */\n  createOrUpdateExtentFeature_(extent) {\n    let extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @returns {Feature} vertex as feature\n   * @private\n   */\n  createOrUpdatePointerFeature_(vertex) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!(/** @type {import(\"../MapBrowserPointerEvent.js\").default} */ (mapBrowserEvent).pointerEvent)) {\n      return true;\n    }\n    //display pointer (if not dragging)\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    //call pointer to determine up/down/drag\n    super.handleEvent(mapBrowserEvent);\n    //return false to stop propagation\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    const extent = this.getExtentInternal();\n    let vertex = this.snapToVertex_(pixel, map);\n\n    //find the extent corner opposite the passed corner\n    const getOpposingPoint = function(point) {\n      let x_ = null;\n      let y_ = null;\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n      return null;\n    };\n    if (vertex && extent) {\n      const x = (vertex[0] == extent[0] || vertex[0] == extent[2]) ? vertex[0] : null;\n      const y = (vertex[1] == extent[1] || vertex[1] == extent[3]) ? vertex[1] : null;\n\n      //snap to point\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n      //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([x, extent[1]]),\n          getOpposingPoint([x, extent[3]])\n        );\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([extent[0], y]),\n          getOpposingPoint([extent[2], y])\n        );\n      }\n    //no snap - new bbox\n    } else {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n    return true; //event handled; start downup sequence\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      const pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.pointerHandler_ = null;\n    //If bbox is zero area, set to null;\n    const extent = this.getExtentInternal();\n    if (!extent || getArea(extent) === 0) {\n      this.setExtent(null);\n    }\n    return false; //Stop handling downup sequence\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection (or user projection if set)\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtent() {\n    return toUserExtent(this.getExtentInternal(), this.getMap().getView().getProjection());\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtentInternal() {\n    return this.extent_;\n  }\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n  setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentEvent(this.extent_));\n  }\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POLYGON];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function(point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @returns {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [\n    [[extent[0], extent[1]], [extent[0], extent[3]]],\n    [[extent[0], extent[3]], [extent[2], extent[3]]],\n    [[extent[2], extent[3]], [extent[2], extent[1]]],\n    [[extent[2], extent[1]], [extent[0], extent[1]]]\n  ];\n}\n\n\nexport default Extent;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport ExtentInteraction from '../src/ol/interaction/Extent.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\n\nconst vectorSource = new VectorSource({\n  url: 'data/geojson/countries.geojson',\n  format: new GeoJSON()\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    new VectorLayer({\n      source: vectorSource\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst extent = new ExtentInteraction();\nmap.addInteraction(extent);\nextent.setActive(false);\n\n//Enable interaction by holding shift\nwindow.addEventListener('keydown', function(event) {\n  if (event.keyCode == 16) {\n    extent.setActive(true);\n  }\n});\nwindow.addEventListener('keyup', function(event) {\n  if (event.keyCode == 16) {\n    extent.setActive(false);\n  }\n});\n"],"sourceRoot":""}