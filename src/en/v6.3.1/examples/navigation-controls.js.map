{"version":3,"sources":["webpack:///../src/ol/control/ZoomToExtent.js","webpack:///./navigation-controls.js"],"names":["ZoomToExtent","opt_options","const","options","super","element","document","createElement","target","this","extent","className","undefined","label","tipLabel","button","setAttribute","title","appendChild","createTextNode","addEventListener","CLICK","handleClick_","bind","cssClasses","event","preventDefault","handleZoomToExtent","view","getMap","getView","getProjection","getExtent","fitInternal","controls","extend","layers","source","center","zoom"],"mappings":"2FAAA,oCA6BMA,EAA4B,YAKhC,WAAYC,GACVC,IAAMC,EAAUF,GAA4B,GAE5CG,OAAM,MACJC,QAASC,SAASC,cAAc,OAChCC,OAAQL,EAAQK,SAOlBC,KAAKC,OAASP,EAAQO,OAASP,EAAQO,OAAS,KAEhDR,IAAMS,OAAkCC,IAAtBT,EAAQQ,UAA0BR,EAAQQ,UAAY,iBAElEE,OAA0BD,IAAlBT,EAAQU,MAAsBV,EAAQU,MAAQ,IACtDC,OAAgCF,IAArBT,EAAQW,SAAyBX,EAAQW,SAAW,gBAC/DC,EAAST,SAASC,cAAc,UACtCQ,EAAOC,aAAa,OAAQ,UAC5BD,EAAOE,MAAQH,EACfC,EAAOG,YACY,iBAAVL,EAAqBP,SAASa,eAAeN,GAASA,GAG/DE,EAAOK,iBAAiB,IAAUC,MAAOZ,KAAKa,aAAaC,KAAKd,OAAO,GAEvEP,IAAMsB,EAAab,EAAY,IAAM,IAAqB,IAAM,IAC1DN,EAAUI,KAAKJ,QACrBA,EAAQM,UAAYa,EACpBnB,EAAQa,YAAYH,G,8FAOtB,EAAF,UAAEO,aAAA,SAAaG,GACXA,EAAMC,iBACNjB,KAAKkB,sBAMP,EAAF,UAAEA,mBAAA,WACEzB,IACM0B,EADMnB,KAAKoB,SACAC,UACXpB,EAAUD,KAAKC,OAA4CD,KAAKC,OAAxCkB,EAAKG,gBAAgBC,YACnDJ,EAAKK,YAAY,YAAkBvB,K,EAtDL,CAAP,KA0DZ,O,iCCvFf,wDAOY,IAAI,IAAI,CAClBwB,SAAU,cAAkBC,OAAO,CACjC,IAAI,IAAa,CACfzB,OAAQ,CACN,kBAAmB,kBACnB,kBAAmB,uBAIzB0B,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,OAGhB7B,OAAQ,MACRoB,KAAM,IAAI,IAAK,CACbU,OAAQ,CAAC,EAAG,GACZC,KAAM,Q","file":"navigation-controls.js","sourcesContent":["/**\n * @module ol/control/ZoomToExtent\n */\nimport EventType from '../events/EventType.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport Control from './Control.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\nclass ZoomToExtent extends Control {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     * @protected\n     */\n    this.extent = options.extent ? options.extent : null;\n\n    const className = options.className !== undefined ? options.className : 'ol-zoom-extent';\n\n    const label = options.label !== undefined ? options.label : 'E';\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(\n      typeof label === 'string' ? document.createTextNode(label) : label\n    );\n\n    button.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  }\n\n  /**\n   * @protected\n   */\n  handleZoomToExtent() {\n    const map = this.getMap();\n    const view = map.getView();\n    const extent = !this.extent ? view.getProjection().getExtent() : this.extent;\n    view.fitInternal(polygonFromExtent(extent));\n  }\n}\n\nexport default ZoomToExtent;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls, ZoomToExtent} from '../src/ol/control.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport OSM from '../src/ol/source/OSM.js';\n\n\nconst map = new Map({\n  controls: defaultControls().extend([\n    new ZoomToExtent({\n      extent: [\n        813079.7791264898, 5929220.284081122,\n        848966.9639063801, 5936863.986909639\n      ]\n    })\n  ]),\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n"],"sourceRoot":""}