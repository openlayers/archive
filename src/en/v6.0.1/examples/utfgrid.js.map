{"version":3,"sources":["webpack:///../src/ol/source/UTFGrid.js","webpack:///./utfgrid.js"],"names":["tileCoord","state","src","extent","preemptive","jsonp","super","this","src_","extent_","preemptive_","grid_","keys_","data_","jsonp_","getImage","getData","coordinate","const","xRelative","yRelative","row","Math","floor","length","let","code","charCodeAt","data","id","forDataAtCoordinate","callback","opt_request","TileState","IDLE","EventType","CHANGE","e","loadInternal_","setTimeout","bind","getKey","handleError_","ERROR","changed","handleLoad_","json","EMPTY","LOADING","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","event","status","response","JSON","parse","responseText","err","load","options","projection","undefined","tileUrlFunction_","template_","url","handleTileJSONResponse","handleTileJSONError","tileJSON","getTemplate","forDataAtCoordinateAndResolution","resolution","tileGrid","z","getZForResolution","zDirection","getTileCoordForCoordAndZ","getTile","getProjection","setState","epsg4326Projection","sourceProjection","transform","minZoom","maxZoom","grids","attributionExtent","getExtent","setAttributions","frameState","READY","x","y","pixelRatio","tileCoordKey","tileCache","containsKey","get","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","getTileCoordExtent","set","useTile","key","mapLayer","source","TileJSON","gridSource","gridLayer","view","View","center","zoom","mapElement","document","getElementById","map","Map","layers","target","infoElement","flagElement","nameElement","infoOverlay","Overlay","element","offset","stopEvent","addOverlay","displayCountryInfo","viewResolution","getResolution","style","cursor","innerHTML","setPosition","on","evt","dragging","getEventCoordinate","originalEvent"],"mappings":"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","file":"utfgrid.js","sourcesContent":["/**\n * @module ol/source/UTFGrid\n */\n\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport {createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport {assert} from '../asserts.js';\nimport {listenOnce} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {jsonp as requestJSONP} from '../net.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport SourceState from './State.js';\nimport TileSource from './Tile.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\n\nexport class CustomTile extends Tile {\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {TileState} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative = (coordinate[0] - this.extent_[0]) /\n        (this.extent_[2] - this.extent_[0]);\n    const yRelative = (coordinate[1] - this.extent_[1]) /\n        (this.extent_[3] - this.extent_[1]);\n\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  forDataAtCoordinate(coordinate, callback, opt_request) {\n    if (this.state == TileState.IDLE && opt_request === true) {\n      listenOnce(this, EventType.CHANGE, function(e) {\n        callback(this.getData(coordinate));\n      }, this);\n      this.loadInternal_();\n    } else {\n      if (opt_request === true) {\n        setTimeout(function() {\n          callback(this.getData(coordinate));\n        }.bind(this), 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  getKey() {\n    return this.src_;\n  }\n\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n\n    this.state = TileState.EMPTY;\n    this.changed();\n  }\n\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(this.src_, this.handleLoad_.bind(this),\n          this.handleError_.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */(JSON.parse(client.responseText));\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n\n  /**\n   * @override\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    }\n  }\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false`, you need to pass `true` as `opt_request`\n * to the `forDataAtCoordinateAndResolution` method otherwise no data\n * will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n */\n\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: SourceState.LOADING\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = options.preemptive !== undefined ?\n      options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n\n  }\n\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */(JSON.parse(client.responseText));\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(\n    coordinate, resolution, callback, opt_request) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = /** @type {!CustomTile} */(this.getTile(\n        tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection()));\n      tile.forDataAtCoordinate(coordinate, callback, opt_request);\n    } else {\n      if (opt_request === true) {\n        setTimeout(function() {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState(SourceState.ERROR);\n  }\n\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: extentFromProjection(sourceProjection),\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n\n    this.template_ = tileJSON['template'];\n\n    const grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON['attribution'] !== undefined) {\n      const attributionExtent = extent !== undefined ?\n        extent : epsg4326Projection.getExtent();\n\n      this.setAttributions(function(frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n\n    this.setState(SourceState.READY);\n\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return (\n        /** @type {!import(\"../Tile.js\").default} */ (this.tileCache.get(tileCoordKey))\n      );\n    } else {\n      const tileCoord = [z, x, y];\n      const urlTileCoord =\n          this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n      const tile = new CustomTile(\n        tileCoord,\n        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n        tileUrl !== undefined ? tileUrl : '',\n        this.tileGrid.getTileCoordExtent(tileCoord),\n        this.preemptive_,\n        this.jsonp_);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\n\nexport default UTFGrid;\n","import Map from '../src/ol/Map.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport TileJSON from '../src/ol/source/TileJSON.js';\nimport UTFGrid from '../src/ol/source/UTFGrid.js';\n\nconst key = 'pk.eyJ1IjoiYWhvY2V2YXIiLCJhIjoiY2pzbmg0Nmk5MGF5NzQzbzRnbDNoeHJrbiJ9.7_-_gL8ur7ZtEiNwRfCy7Q';\n\nconst mapLayer = new TileLayer({\n  source: new TileJSON({\n    url: 'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' + key\n  })\n});\n\n\nconst gridSource = new UTFGrid({\n  url: 'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' + key\n});\n\nconst gridLayer = new TileLayer({source: gridSource});\n\nconst view = new View({\n  center: [0, 0],\n  zoom: 1\n});\n\nconst mapElement = document.getElementById('map');\nconst map = new Map({\n  layers: [mapLayer, gridLayer],\n  target: mapElement,\n  view: view\n});\n\nconst infoElement = document.getElementById('country-info');\nconst flagElement = document.getElementById('country-flag');\nconst nameElement = document.getElementById('country-name');\n\nconst infoOverlay = new Overlay({\n  element: infoElement,\n  offset: [15, 15],\n  stopEvent: false\n});\nmap.addOverlay(infoOverlay);\n\nconst displayCountryInfo = function(coordinate) {\n  const viewResolution = /** @type {number} */ (view.getResolution());\n  gridSource.forDataAtCoordinateAndResolution(coordinate, viewResolution,\n    function(data) {\n      // If you want to use the template from the TileJSON,\n      //  load the mustache.js library separately and call\n      //  info.innerHTML = Mustache.render(gridSource.getTemplate(), data);\n      mapElement.style.cursor = data ? 'pointer' : '';\n      if (data) {\n        flagElement.src = 'data:image/png;base64,' + data['flag_png'];\n        nameElement.innerHTML = data['admin'];\n      }\n      infoOverlay.setPosition(data ? coordinate : undefined);\n    });\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displayCountryInfo(coordinate);\n});\n\nmap.on('click', function(evt) {\n  displayCountryInfo(evt.coordinate);\n});\n"],"sourceRoot":""}