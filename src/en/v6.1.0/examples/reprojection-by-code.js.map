{"version":3,"sources":["webpack:///./reprojection-by-code.js"],"names":["map","layers","source","target","view","projection","center","zoom","queryInput","document","getElementById","searchButton","resultSpan","renderEdgesCheckbox","setProjection","code","name","proj4def","bbox","innerHTML","setView","const","newProjCode","defs","newProj","fromLonLat","extent","setExtent","newView","fit","onclick","event","query","value","fetch","then","response","json","results","length","let","i","ii","result","preventDefault","onchange","getLayers","forEach","layer","getSource","setRenderReprojectionEdges","checked"],"mappings":"4FAAA,8EAWMA,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,OAGhBC,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAKJC,EAAaC,SAASC,eAAe,cACrCC,EAAeF,SAASC,eAAe,eACvCE,EAAaH,SAASC,eAAe,eACrCG,EAAsBJ,SAASC,eAAe,gBAEpD,SAASI,EAAcC,EAAMC,EAAMC,EAAUC,GAC3C,GAAa,OAATH,GAA0B,OAATC,GAA8B,OAAbC,GAA8B,OAATC,EAOzD,OANAN,EAAWO,UAAY,gDACvBnB,EAAIoB,QAAQ,IAAI,IAAK,CACnBf,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,KAKVK,EAAWO,UAAY,IAAMJ,EAAO,KAAOC,EAE3CK,IAAMC,EAAc,QAAUP,EAC9B,IAAMQ,KAAKD,EAAaL,GACxB,YAAS,KACTI,IAAMG,EAAU,YAAcF,GACxBG,EAAa,YAAa,YAAaD,GAGvCE,EAAS,YACb,CAACR,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAAKO,GACxCD,EAAQG,UAAUD,GAClBL,IAAMO,EAAU,IAAI,IAAK,CACvBvB,WAAYmB,IAEdxB,EAAIoB,QAAQQ,GACZA,EAAQC,IAAIH,GAmCdf,EAAamB,QAAU,SAASC,GA/BhC,IAAgBC,IAgCPxB,EAAWyB,MA/BlBrB,EAAWO,UAAY,gBACvBe,MAAM,kCAAoCF,GAAOG,KAAK,SAASC,GAC7D,OAAOA,EAASC,SACfF,KAAK,SAASE,GACfhB,IAAMiB,EAAUD,EAAc,QAC9B,GAAIC,GAAWA,EAAQC,OAAS,EAC9B,IAAKC,IAAIC,EAAI,EAAGC,EAAKJ,EAAQC,OAAQE,EAAIC,EAAID,IAAK,CAChDpB,IAAMsB,EAASL,EAAQG,GACvB,GAAIE,EAAQ,CACVtB,IAAMN,EAAO4B,EAAa,KACpB3B,EAAO2B,EAAa,KACpB1B,EAAW0B,EAAc,MACzBzB,EAAOyB,EAAa,KAC1B,GAAI5B,GAAQA,EAAKwB,OAAS,GAAKtB,GAAYA,EAASsB,OAAS,GACzDrB,GAAuB,GAAfA,EAAKqB,OAEf,YADAzB,EAAcC,EAAMC,EAAMC,EAAUC,IAM5CJ,EAAc,KAAM,KAAM,KAAM,QAWlCiB,EAAMa,kBAOR/B,EAAoBgC,SAAW,WAC7B7C,EAAI8C,YAAYC,QAAQ,SAASC,GAC/B,GAAIA,aAAiB,IAAW,CAC9B3B,IAAMnB,EAAS8C,EAAMC,YACjB/C,aAAkB,KACpBA,EAAOgD,2BAA2BrC,EAAoBsC,e","file":"reprojection-by-code.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {applyTransform} from '../src/ol/extent.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {get as getProjection, getTransform} from '../src/ol/proj.js';\nimport {register} from '../src/ol/proj/proj4.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport TileImage from '../src/ol/source/TileImage.js';\nimport proj4 from 'proj4';\n\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    })\n  ],\n  target: 'map',\n  view: new View({\n    projection: 'EPSG:3857',\n    center: [0, 0],\n    zoom: 1\n  })\n});\n\n\nconst queryInput = document.getElementById('epsg-query');\nconst searchButton = document.getElementById('epsg-search');\nconst resultSpan = document.getElementById('epsg-result');\nconst renderEdgesCheckbox = document.getElementById('render-edges');\n\nfunction setProjection(code, name, proj4def, bbox) {\n  if (code === null || name === null || proj4def === null || bbox === null) {\n    resultSpan.innerHTML = 'Nothing usable found, using EPSG:3857...';\n    map.setView(new View({\n      projection: 'EPSG:3857',\n      center: [0, 0],\n      zoom: 1\n    }));\n    return;\n  }\n\n  resultSpan.innerHTML = '(' + code + ') ' + name;\n\n  const newProjCode = 'EPSG:' + code;\n  proj4.defs(newProjCode, proj4def);\n  register(proj4);\n  const newProj = getProjection(newProjCode);\n  const fromLonLat = getTransform('EPSG:4326', newProj);\n\n  // very approximate calculation of projection extent\n  const extent = applyTransform(\n    [bbox[1], bbox[2], bbox[3], bbox[0]], fromLonLat);\n  newProj.setExtent(extent);\n  const newView = new View({\n    projection: newProj\n  });\n  map.setView(newView);\n  newView.fit(extent);\n}\n\n\nfunction search(query) {\n  resultSpan.innerHTML = 'Searching ...';\n  fetch('https://epsg.io/?format=json&q=' + query).then(function(response) {\n    return response.json();\n  }).then(function(json) {\n    const results = json['results'];\n    if (results && results.length > 0) {\n      for (let i = 0, ii = results.length; i < ii; i++) {\n        const result = results[i];\n        if (result) {\n          const code = result['code'];\n          const name = result['name'];\n          const proj4def = result['proj4'];\n          const bbox = result['bbox'];\n          if (code && code.length > 0 && proj4def && proj4def.length > 0 &&\n              bbox && bbox.length == 4) {\n            setProjection(code, name, proj4def, bbox);\n            return;\n          }\n        }\n      }\n    }\n    setProjection(null, null, null, null);\n  });\n}\n\n\n/**\n * Handle click event.\n * @param {Event} event The event.\n */\nsearchButton.onclick = function(event) {\n  search(queryInput.value);\n  event.preventDefault();\n};\n\n\n/**\n * Handle change event.\n */\nrenderEdgesCheckbox.onchange = function() {\n  map.getLayers().forEach(function(layer) {\n    if (layer instanceof TileLayer) {\n      const source = layer.getSource();\n      if (source instanceof TileImage) {\n        source.setRenderReprojectionEdges(renderEdgesCheckbox.checked);\n      }\n    }\n  });\n};\n"],"sourceRoot":""}